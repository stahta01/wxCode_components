<?xml version="1.0" ?>

<!-- Author: Francesco Montorsi <frm@users.sourceforge.net>         -->
<!-- Date: 30/8/2004                                                -->
<!-- Last revision: 26/1/2005                                       -->


<!--                      ICONV BAKEFILE                            -->
<!--                                                                -->
<!--    The bakefile used to build the library and the test         -->
<!--    programs. The makefiles output is put:                      -->
<!--                                                                -->
<!--    - in the ..\LIB folder                                      -->
<!--    - in the ..\BIN folder                                      -->
<!--                                                                -->

<makefile>

    <using module="datafiles"/>
    <requires version="0.1.5"/>
    

    <!-- This is a bakefile, that is, a generic template used to    -->
    <!-- generate makefiles ALL supported compilers.                -->
    <!-- To use this project file you need Bakefile installed.      -->
    <!-- With the command "bakefile_gen" you can regen all the      -->
    <!-- makefiles and project files.                               -->
    <!-- See http://bakefile.sourceforge.net for more info.         -->




    <!--                                                            -->
    <!--                      GENERIC OPTIONS                       -->
    <!--                                                            -->

     
    <!--    This is a standard option that determines               -->
    <!--    whether the user wants to build this library as         -->
    <!--    a dll or as a static library.                           -->
    <option name="SHARED">
        <values>0,1</values>
        <values-description>,DLL</values-description>
        <default-value>0</default-value>
        <description>If set to zero a STATIC libxml library will be built</description>
    </option>

    <!-- Configuration for building the bakefile with               -->
    <!-- unicode strings or not (unicode or ansi).                  -->
    <option name="UNICODE">
        <values>0,1</values>
        <values-description>,Unicode</values-description>
        <default-value>0</default-value>        
        <description>Compile Unicode build?</description>
    </option>


    <!-- There are several options that deal with build             -->
    <!-- types. First, there's this one, BUILD.                     -->
    <!--                                                            -->
    <!-- BUILD determines whether or not we want to build           -->
    <!-- in release or debug mode.  Note that in practice           -->
    <!-- this means modifying the optimize tag, which by            -->
    <!-- default is set to off.  In this case debug means           -->
    <!-- off (no optimizations), and release means speed            -->
    <!-- (fast with inlining).  There is also a size option         -->
    <!-- that is not addressed in this example bakefile.            -->
    <option name="BUILD">
        <values>debug,release</values>
        <values-description>Debug,Release</values-description>
        <default-value>release</default-value>
        <description>
            Type of compiled binaries
        </description>
    </option>



    <!--                                                            -->
    <!--                    GENERIC VARIABLES                       -->
    <!--                                                            -->

    <!--    Set the ISDLL variable, so that we can use it           -->
    <!--    inside an if statement later on (options not            -->
    <!--    allowed in if statements).                              -->
    <set var="ISDLL" cond="SHARED=='1'">1</set>
    <set var="ISDLL" cond="SHARED=='0'">0</set>

    <!--    The unicode define we want.  By default bakefile        -->
    <!--    makes variables an empty string, so if unicode          -->
    <!--    is not defined $(UNICODE_DEFINE) would expand           -->
    <!--    to nothing (literally).                                 -->
    <set var="UNICODE_DEFINE">
        <if cond="FORMAT!='autoconf' and UNICODE=='1'">_UNICODE</if>
    </set>    

    <!--    Value we will use later on for the debug-info           -->
    <!--    tag inside our templates.                               -->
    <set var="DEBUGINFO">
        <if cond="BUILD=='debug'">on</if>
        <if cond="BUILD=='release'">off</if>
    </set>

    <!--    Value we will use later on for the debug-runtime        -->
    <!--    tag inside our templates.                               -->
    <set var="DEBUGRUNTIME">
        <if cond="BUILD=='debug'">on</if>
        <if cond="BUILD=='release'">off</if>
    </set>

    <!--    Value for optimize tag.                                 -->
    <set var="OPTIMIZEFLAG">
        <if cond="BUILD=='debug'">off</if>
        <if cond="BUILD=='release'">speed</if>
    </set>

    <!-- Level of warnings.  Here we max it out in debug            -->
    <!-- mode, and turn them off in release mode.                   -->
    <set var="WARNINGS">
        <if cond="BUILD=='debug'">max</if>
        <if cond="BUILD=='release'">no</if>
    </set>

    <!-- Set MYCPPFLAGS as empty; maybe it will be filled later...  -->
    <set var="MYCPPFLAGS"></set>
    <if cond="FORMAT=='mingw' or FORMAT=='autoconf'">

        <!-- With GCC, settings warnings to MAX would force         -->
        <!-- Bakefile to call GCC with "-W -Wall" which generates   -->
        <!-- a *lot* of warnings about wxWidgets headers...         -->
        <!-- this is why "-W -Wall" is here replaced by "-Wall".    -->
        <set var="WARNINGS">default</set>
        <set var="MYCPPFLAGS">-Wall</set>
    </if>
    
    
    
  


    <!--                                                            -->
    <!--                        ICONV OPTIONS                       -->
    <!--                                                            -->

    <option name="CHARSET_DIR" category="path">
        <default-value>..\libcharset</default-value>
        <description>The libcharset library main folder</description>
    </option>




 

    <!--                                                            -->
    <!--                    ICONV VARIABLES                         -->
    <!--                                                            -->   

    <!-- Put all the objects files generated by         -->
    <!-- the compilation in a subfolder of BUILD        -->
    <set var="BUILDDIR">$(FORMAT)</set>
    
    <!-- This variable is set to 1 when the current output writer supports -->
   	<!-- the __DEFINE_ARG variable. Otherwise it's set to zero. -->
   	<set var="HAS_DEFINE_ARG">
   		<if cond="FORMAT!='msvc6prj'">1</if>
   		<if cond="FORMAT=='msvc6prj'">0</if>   		
   	</set>
   	
   	<set var="ICONV_SHAREDDEF1">
		<if cond="ISDLL=='1'">BUILDING_LIBICONV</if>
   	</set>
   	<set var="ICONV_SHAREDDEF2">
		<if cond="ISDLL=='1'">BUILDING_DLL</if>
   	</set>

	<!-- The root directory of libxml2 -->
	<set var="ICONVBASEDIR">..</set>
	<set var="ICONVINCLUDEDIR">$(ICONVBASEDIR)$(DIRSEP)include</set>

  

 
    <!--                                                            -->
    <!--               ABOUT CONFIG.H HEADER CREATION               -->
    <!--                                                            -->   
    
    <set var="CONFIG_SRCNAME">config.h.msvc</set>
    <set var="CONFIG_DSTNAME">config.h</set>

    <set var="CONFIG2_SRCNAME">
    	<if cond="ISDLL=='1'">iconv.h.msvc-shared</if>
    	<if cond="ISDLL=='0'">iconv.h.msvc-static</if>
     </set>
    <set var="CONFIG2_DSTNAME">iconv.h</set>

    <set var="CONFIG3_SRCNAME">
    	<if cond="ISDLL=='1'">localcharset.h.msvc-shared</if>
    	<if cond="ISDLL=='0'">localcharset.h.in</if>
     </set>
    <set var="CONFIG3_DSTNAME">localcharset.h</set>
    
    <set var="CONFIG4_SRCNAME">config.h.msvc</set>
    <set var="CONFIG4_DSTNAME">config.h</set>


    <set var="CONFIG_SRC">$(ICONVBASEDIR)\lib\$(CONFIG_SRCNAME)</set>
    <set var="CONFIG_DST">$(ICONVBASEDIR)\lib\$(CONFIG_DSTNAME)</set>

    <set var="CONFIG2_SRC">$(ICONVBASEDIR)\include\$(CONFIG2_SRCNAME)</set>
    <set var="CONFIG2_DST">$(ICONVBASEDIR)\include\$(CONFIG2_DSTNAME)</set>

    <set var="CONFIG3_SRC">$(ICONVBASEDIR)\libcharset\include\$(CONFIG3_SRCNAME)</set>
    <set var="CONFIG3_DST">$(ICONVBASEDIR)\libcharset\include\$(CONFIG3_DSTNAME)</set>

    <set var="CONFIG4_SRC">$(ICONVBASEDIR)\libcharset\$(CONFIG4_SRCNAME)</set>
    <set var="CONFIG4_DST">$(ICONVBASEDIR)\libcharset\$(CONFIG4_DSTNAME)</set>

	<copy-file-to-file id="setup">
		<src>$(CONFIG_SRC)</src>
		<dst>$(CONFIG_DST)</dst>
		<dependency-of>all</dependency-of>
	</copy-file-to-file>
	<copy-file-to-file id="setup2">
		<src>$(CONFIG2_SRC)</src>
		<dst>$(CONFIG2_DST)</dst>
		<dependency-of>all</dependency-of>
	</copy-file-to-file>
	<copy-file-to-file id="setup3">
		<src>$(CONFIG3_SRC)</src>
		<dst>$(CONFIG3_DST)</dst>
		<dependency-of>all</dependency-of>
	</copy-file-to-file>
	<copy-file-to-file id="setup4">
		<src>$(CONFIG4_SRC)</src>
		<dst>$(CONFIG4_DST)</dst>
		<dependency-of>all</dependency-of>
	</copy-file-to-file>
	
    <!-- This defines a tag which includes headers on MSVC          -->
    <!-- Note that $(value) is stuck in there by bakefile,          -->
    <!-- and is the value between the beginning and end tag.        -->
    <define-tag name="headers" rules="dll,lib,exe">
        <if cond="FORMAT=='msvc6prj'">
            <msvc-project-files>
                $(value)
            </msvc-project-files>
        </if>
    </define-tag>
    		
    		
    		


    <!--                                                            -->
    <!--                          TEMPLATES                         -->
    <!--                                                            -->   

	<!-- The basic template: used by all the targets -->
    <template id="base">
        <if cond="FORMAT=='mingw'">                    
            <define>HAVE_W32API_H</define>
            <ldflags>-mthreads</ldflags>
        </if>

        <cxxflags>$(MYCPPFLAGS)</cxxflags>
        <warnings>$(WARNINGS)</warnings>
        <define>$(UNICODE_DEFINE)</define>
        <optimize>$(OPTIMIZEFLAG)</optimize>
        <debug-info>$(DEBUGINFO)</debug-info>
        <debug-runtime-libs>$(DEBUGRUNTIME)</debug-runtime-libs>
	</template>



 

    <!--                                                            -->
    <!--                  ICONV LIBRARY TARGET                      -->
    <!--                                                            -->  
    
    <lib id="iconv" template="base">
    	<depends>setup</depends>
    	<depends>setup2</depends>
    	<depends>setup3</depends>
    	<depends>setup4</depends>
             	
    	<define>$(ICONV_SHAREDDEF1)</define>
    	<define>$(ICONV_SHAREDDEF2)</define>
         	
    	<define>HAVE_CONFIG_H</define>
     	<define>ENABLE_RELOCATABLE=1</define>
      	<define>IN_LIBRARY</define>
       	<define>NO_XMALLOC</define>
        <define>set_relocation_prefix=libiconv_set_relocation_prefix</define>
        <define>relocate=libiconv_relocate</define>

		<!-- borland does not have EILSEQ... -->
		<define>EILSEQ=ENOENT</define>
        
        <include>$(ICONVBASEDIR)$(DIRSEP)include</include>    
        <include>$(ICONVBASEDIR)$(DIRSEP)libcharset$(DIRSEP)include</include>
        <include>$(ICONVBASEDIR)$(DIRSEP)libcharset</include>
    	    
    	<!-- output folder -->
        <dirname>$(ICONVBASEDIR)$(DIRSEP)lib</dirname>
        <libname>iconv</libname>
		        
        <!-- the list of source files to compile -->            
        <sources>
			$(ICONVBASEDIR)$(DIRSEP)lib$(DIRSEP)iconv.c
			$(ICONVBASEDIR)$(DIRSEP)libcharset$(DIRSEP)lib$(DIRSEP)localcharset.c
			$(ICONVBASEDIR)$(DIRSEP)lib$(DIRSEP)relocatable.c
        </sources>
    </lib>

</makefile>
