Welcome to wxTreeMultiCtrl - A wxWidgets control that allows wxWindow controls to be shaped in a tree, 
                             with folding capabilities, like a scrollable property sheet.

Current wxTreeMultiCtrl version is v1.08

    README $Revision: 1.3 $
    README $Date: 2005-08-16 17:51:49 $

FIXED AND NEW FEATURES 
----------------------
Aug 16, 2005
	- I made a start with the XML wrapper! This neat little wrapper allows you to define fields in XML
	  which the wxTreeMultiXmlWrapper class will interpret and display. This is very handy for wizard
	  presentation.
	  
	  The syntax is something like;
	  
        <wizard>
            <category caption="Please enter your personal experience" >
                <check id="LIKEITORNOT" caption="Do you like this?" />
            </category>
            <category caption="And now for some other fun">
                <category caption="Project settings">
                    <check id="INCLUDE_SETTINGS" caption="Include a wxConfig code fragment" />
                    <check id="INCLUDE_ABOUT" caption="Include an about dialog" default="1"/>
                    <check id="USE_XRC" caption="Setup an XRC fragment for XRC dialogs" />
                </category>
                <check id="CB_ONLY" caption="Only checkboxes right now Wink" />
            </category>
        </wizard> 
	  
      This is still under construction see below for instructions how to use it. This is no real version
      release yet.

Aug 11, 2005
    - In between release to get CMake working next to Bakefile. Sorry, but Bakefile has it's limitations!   
Jul 21, 2005
    v1.09
    - Ok my secomd attempt with Bakefile. Cmake is great, but it annoys me that the FindWxWin.cmake script still sucks bigtime
    - The bakefile seems to work fine now for debug, it is the only addition. Now wxWin 2.6.0 - 2.4.2 is properly supported
    
May 05, 2005
    v1.08 - 
    - Tried Bakefile for this project, but due to it's 'incompleteness' towards user projects I had to use CMake again.
    - I also altered the FindWxWin.CMAKE file so seperate libraries can be used instead of monolithic 
    - Fixed a local redraw bug (category: Bug) (completed: 4/30/2005)
    - IsExpanded argument removed (category: Bug) (completed: 4/30/2005)
    - Added new Panther OSX icons (completed: 4/30/2005) thanks to David Wright
    - 0000093: [Documentation] Added doxygen generation in CMake script (jorgb)
               Set USE_DOXYGEN to YES in CMake to get documentation on the fly (or check it from the site)
    - 0000048: [Improvements] Allow a checkboxes and radioboxes at any level (jorgb)
               If you don't wish checkbox functionality (remember this is a toggle so not all items automatically get a 
               checkbox) simply set USE_CHECKBOXVIEW in CMake to NO. This will exclude this functionality in the compile
               process (saves about 15k). I made this a compiler option because extra 3 icon bitmaps are included in the build.
    - 0000077: [GUI behaviour] Upon clicking the checkbox is not redrawn properly (jorgb)
    - 0000081: [Development] Upon checking the TreeMultiItemNode, the underlying items should be all checked or cleared (jorgb)
    - 0000072: [GUI behaviour] Optimize performance on redrawing of the nodes (jorgb)
    - 0000049: [wxWidgets Distrib Problems] Arranged the source so it matches the Contrib directory of wxWidgets (jorgb)
               If wxWidgets wants to put it in the contrib, I won't stop them.
    - 0000047: [Improvements] Add a new way how to allow controls at the caption level (jorgb)
               This is a patch which can be found at: http://solidsteel.nl/bugs/view.php?id=47 although I strongly advice
               against it. I do not offer support on bugs when this patch is applied, because I haven't been able to test
               it thoroughly, and it seems to disrupt the intended object model.

    For a change history, see changes.txt

HOW TO BUILD
------------

    ENABLING XML MAPPER CLASS
    =========================
        - Download TinyXML (http://www.sourceforge.net/projects/tinyxml) and compile it. 
        
        For CMake
        ---------
        When following the steps "MAKE WITH CMAKE" in the wizard, set wxUSE_XMLWRAPPER to YES.
        Press OK, and fill in the two paths to the TinyXML library (one for the include and one 
        for the lib path). Then generate again and you are all set.
        
        For normal projects
        -------------------
        For BAKEFILE projects in the /build dir of this release, define the constant wxUSE_XMLMAPPER 
        in your project files. Include in the library path the path to TinyXML's compiled libs, use
        the ones without STL support. Add the include path to the tinyXML in your project file, and 
        add the libraries too: tinyxmld.lib (debug) and tinyxml.lib (release) 

    MAKE WITH CMAKE
    ===============     
        Why CMake? It has a slightly different approach towards Bakefile. To begin with, the projects are generated
        on the spot for you after you set the options YOU want! For example, when you don't want checkbox view support
        built in wxTreeMultiCtrl, set wxUSE_CHECKBOXVIEW to NO as option. With Bakefile, you need to do this in the 
        project. It can also auto generate Doxygen documentation for you on the spot! So it is still my favorite
        project generator. What to do:
        
            1. Download and install CMake: http://www.cmake.org
            
            2. Edit CMakeLists.txt in the main dir of this component, and make sure the wxWidgets flags are set
               properly. 
               
            3. On Windows
                
                - Run CMakeSetup.exe
                - Select the compiler you want to generate projects for
                - Where is the source: {this component location}, eg. Z:\Src\tmc\wxCode\components\treemultictrl\
                - Where to build the binaries: D:\temp\out-of-the\source\treemultictrl
                - Press CONFIGURE
                * Select your options, e.g. wxUSE_CHECKBOXVIEW, DOXYGEN documentation, etc
                - Press CONFIGURE until OK button is enabled
                - Press OK to generate the projects
                
              On Linux
              
                - cd /home/someuser/tmp
                - mkdir tmc
                - cd tmc
                - ccmake {path to tmc source}
                - Follow steps and look at (*) at windows section
            
              NOTE FOR MINGW USERS
            
                Simply run CMakeSetup.exe inside the MSYS shell, and follow the steps on Windows platform.
                
            4. Run or make project

    MAKE WITH BAKEFILE
    ==================
        Bakefile is now also used for the build generation. You should (in practice) not need to rebuild the files. Please go to the 
        build directory and select the project file of your choice.
        
        Please do not forget to set the WXWIN environment var under Windows. This points to the root dir of wxWidgets, eg.
        
            WXWIN=Z:\wxWidgets\wx2.6.1\
        
        AFTER you set it, then start up any Visual Studio projects or else the env var is not yet in memory.
        
        If you do need to rebuild the makefiles / projects.. 
        
            1) Download and install Bakefile (http://bakefile.sourceforge.net)
            2) Under Windows the build/Bakefiles.bkgen will work out of the box (set the WXWIN env var though)
               Under Linux please change the %WXWIN% include setting for an include setting where wxWidgets presets are found
            3) run bakefile_gen and it should regenerate the projects, if needed switch on your projects in Bakefiles.bkgen
            
