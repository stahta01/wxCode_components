<HTML>
<head><link rel=stylesheet type="text/css" href="wx.css">
<title>wxMidi</title></head>

<BODY BGCOLOR=#FFFFFF>
<A NAME="wxMidi"></A>

<FONT FACE="Arial, Lucida, Helvetica">

<A NAME="wxMidiMessages"></A>
<H2>wxMidi messages</H2>
<P>

Raw MIDI messages are just a stream of bytes. The so called 'short messages' are the most common and are at most just three bytes but, in general, raw MIDI messages will vary from one byte to an arbitrary number of bytes.<P> 

In the wxMidi package MIDI messages will be represented by a wxMidiMessage object, that contains information about  the type, data length, and status byte of the raw MIDI message for which it serves as a wrapper. In addition, it provides a timestamp value that is used by devices involved in MIDI timing, such as sequencers.<P>

There are two categories of messages, each represented by a <A HREF="#wxMidiMessage">wxMidiMessage</A> subclass:<P>

<UL>
<LI><A HREF="#wxMidiShortMessage">wxMidiShortMessage</A> are the most common and have a status byte and at most two data bytes.</LI> 
<LI><A HREF="#wxMidiSysExMessage">wxMidiSysExMessage</A> contain system-exclusive MIDI messages. They may have many bytes, and generally contain manufacturer-specific instructions. </LI>
<!--<LI><B>wxMidiMetaEvents </B>occur in MIDI files, but not in raw MIDI data streams. Meta events contain data, such as lyrics or tempo settings, that might be useful to sequencers but are usually meaningless for synthesizers. <FONT COLOR="#FF0000">Warning: these are not yet implemented</FONT></LI> -->
</UL>

In addition, for now the wxMidi interface allows you to use the native portmidi message format, represented by 
 the <B>wxMidiPmMessage</B> data type, that is just a long word 
containing the three bytes of a MIDI short message or, in case of sysex messages, four bytes of a chunk of a sysex message. It is recommended not to use this format as it is not guaranteed to be maintained in future versions of
wxMidi. Should you have the necessity of using it, I would very much appreciate an e-mail explaining the reason
so that the wxMidi interface can be better designed.

wxMidiPmMessage is not directly use by methods Write() or Read(). Insted, a more complex data structure is used for this, the  <B>wxMidiPmEvent </B>struct. It is just a wxMidiPmMessage plus a timestamp.<p>

<A HREF="#wxMidiMessage">wxMidiMessage</A><BR>
<A HREF="#wxMidiShortMessage">wxMidiShortMessage</A><BR>
<A HREF="#wxMidiSysExMessage">wxMidiSysExMessage</A><BR>
<P>


<HR>
<a name="wxMidiMessage"/>
<H2>wxMidiMessage</H2>
In the wxMidi package MIDI messages will be represented by a wxMidiMessage object, It is an abstract class from which the specific Midi messages derive. It contains information about  the type, data length, and status byte of the MIDI message. In addition, it provides a timestamp value that is used by devices involved in MIDI timing, such as sequencers.<P>

<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<A HREF="#wxMidiShortMessage">wxMidiShortMessage</A>, 
<A HREF="#wxMidiSysExMessage">wxMidiSysExMessage</A>
<P>



<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<a href="#wxMidiMessageConstr">wxMidiMessage::wxMidiMessage</a><BR>
<a href="#wxMidiMessageDestr">wxMidiMessage::~wxMidiMessage</a><BR>
<a href="#wxMidiMessageGetStatus">wxMidiMessage::GetStatus</a><BR>
<a href="#wxMidiMessageGetTimestamp">wxMidiMessage::GetTimestamp</a><BR>
<a href="#wxMidiMessageGetType">wxMidiMessage::GetType</a><BR>
<a href="#wxMidiMessageSetTimestamp">wxMidiMessage::SetTimestamp</a><BR>
<P>

<HR>
<a name="wxMidiMessageConstr"/>
<H3>wxMidiMessage::wxMidiMessage</H3>
<B>wxMidiMessage</B>()<P>
Constructor.<p>

<HR>
<a name="wxMidiMessageDestr"/>
<H3>wxMidiMessage::~wxMidiMessage</H3>
~<B>wxMidiMessage</B>()<P>
Destructor. <p>

<HR>
<a name="wxMidiMessageGetStatus"/>
<H3>wxMidiSystem::GetStatus</H3>
<B>wxByte GetStatus</B>()<P>
Returns the status byte of the message. <p>

For a wxSysExMessage status byte is always 0xF0 but the end of sysex message (0xF7) is also included in the message data. According MIDI standard  the most significative bit of the status byte is always 1 so the range of staus values goes from 0x80 to 0xFF.<P>

Values lower than 0xF0 identify channel messages, with the four lower bits specifying the channel (0-15); for example, status byte 0x93 is a NoteOn for channel 3:<P>
<table width="80%">
<tr><td>Note-Off Event</td><td>0x8n</td></tr>
<tr><td>Note-On  Event</td><td>0x9n</td></tr>
<tr><td>Polyphonic Key Pressure</td><td>0xAn</td></tr>
<tr><td>Control Change</td><td>0xBn</td></tr>
<tr><td>Program Change</td><td>0xCn</td></tr>
<tr><td>Channel Pressure</td><td>0xDn</td></tr>
<tr><td>Pitch Bend</td><td>0xEn</td></tr>
</table>
<P>&nbsp;<P>

Values 0xF0 to 0xFF are for system messages and are no intended for a specific channel:<P>

<table>
<tr><td>Begin System Exclusive</td><td>0xF0</td></tr>
<tr><td>MIDI  Time Code</td><td>0xF1</td></tr>
<tr><td>Song Position Pointer</td><td>0xF2</td></tr>
<tr><td>Song Select</td><td>0xF3</td></tr>
<tr><td>Tune Request</td><td>0xF6</td></tr>
<tr><td>End System Exclusive</td><td>0xF7</td></tr>
<tr><td>Real-time Clock</td><td>0xF8</td></tr>
<tr><td>Undefined</td><td>0xF9</td></tr>
<tr><td>Start</td><td>0xFA</td></tr>
<tr><td>Continue</td><td>0xFB</td></tr>
<tr><td>Stop</td><td>0xFC</td></tr>
<tr><td>Undefined</td><td>0xFD</td></tr>
<tr><td>Active Sensing</td><td>0xFE</td></tr>
<tr><td>System Reset</td><td>0xFF</td></tr>
</table>

<HR>
<a name="wxMidiMessageGetTimestamp"/>
<H3>wxMidiMessage::GetTimestamp</H3>
<B>wxMidiTimestamp GetTimestamp</B>()<P>
Returns the message timestamp value.  On input, the timestamp ideally denotes the arrival time of the
   status byte of the message.<p>


<HR>
<a name="wxMidiMessageGetType"/>
<H3>wxMidiMessage::GetType</H3>
<B>wxMidiMsgType GetType</B>()<P>
Returns either wxMIDI_SHORT_MSG, or
wxMIDI_SYSEX_MSG, identifying the type of message object.<p>


<HR>
<a name="wxMidiMessageSetTimestamp"/>
<H3>wxMidiMessage::SetTimestamp</H3>
<B>void SetTimestamp</B>(<B>long </B><I>timestamp</I>)<P>

Set the message timestamp value.  On output to a wxMidiOutDevice opened with non-zero latency, the timestamp
   will determine the time to begin sending the
   message. If the wxMidiOutDevice was opened with a latency value of zero, timestamps will be ignored and messages
will be delivered inmediatelly.<p>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>timestamp</I><UL>
The timestamp value. Its is milliseconsd elapsed since the wxMidi package initialization. Current time can be 
obtained by calling wxMidi::GetTime().
</UL>
<P>



<!-- ======================================================================================= -->


<HR>
<a name="wxMidiShortMessage"/>
<H2>wxMidiShortMessage</H2>
wxMidiShortMessage are the most common and have a status byte and at most two data bytes.<P> 

<B><FONT COLOR="#FF0000">Derived from:</FONT></B><P>
<A HREF="#wxMidiMessage">wxMidiMessage</A><BR>
<P>

<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<A HREF="#wxMidiMessage">wxMidiMessage</A>,
<A HREF="#wxMidiSysExMessage">wxMidiSysExMessage</A>
<P>

<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<a href="#wxMidiShortMessageConstr">wxMidiShortMessage::wxMidiShortMessage</a><BR>
<a href="#wxMidiShortMessageDestr">wxMidiShortMessage::~wxMidiShortMessage</a><BR>
<a href="#wxMidiShortMessageGetData1">wxMidiShortMessage::GetData1</a><BR>
<a href="#wxMidiShortMessageGetData2">wxMidiShortMessage::GetData2</a><BR>
<P>

<HR>
<a name="wxMidiShortMessageConstr"/>
<H3>wxMidiShortMessage::wxMidiShortMessage</H3>
	wxMidiShortMessage(wxByte status, wxByte data1, wxByte data2)
<B>wxMidiShortMessage</B>()<P>
Constructor.<p>

<HR>
<a name="wxMidiShortMessageDestr"/>
<H3>wxMidiShortMessage::~wxMidiShortMessage</H3>
~<B>wxMidiShortMessage</B>()<P>
Destructor. <p>

<HR>
<a name="wxMidiShortMessageGetData1"/>
<H3>wxMidiShortMessage::GetData1</H3>
<B>wxByte GetData1</B>()<P>
Returns the first data byte of the message or 0x00 if the type of message only has the status byte.<p>

<HR>
<a name="wxMidiShortMessageGetData2"/>
<H3>wxMidiShortMessage::GetData2</H3>
<B>wxByte GetData2</B>()<P>
Returns the second data byte of the message or 0x00 if the type of message only has one data byte.<p>



<!-- ======================================================================================= -->



<HR>
<a name="wxMidiSysExMessage"/>
<H2>wxMidiSysExMessage</H2>
Object wxMidiSysExMessage represents a system-exclusive MIDI message. As the MIDI specification allows that sysex messages be interrupted by real-time messages, the wxMidi package takes care of this and ensures that any real-time messsage embeded into a sysex message will be delivered first. Also it ensures that when a sysex message is delivered it is complete and does not contain real-time messages embeded into it.<P>

The sysex message encapsulated in a wxMidiSysExMessage will normally be terminated by an EOX status byte (0xF7), but this can not be guaranteed. If the last byte of a received wxMidiSysExMessage is not an EOX it means the sysex message was somehow truncated. This is not considered an error, as a missing EOX can result from the user
disconnecting a MIDI cable during sysex transmission.<P>

The timestamp of a wxMidiSysExMessage is the time at which the status byte (the first byte of the message) arrived.<P>

<B><FONT COLOR="#FF0000">Derived from:</FONT></B><P>
<A HREF="#wxMidiMessage">wxMidiMessage</A><BR>
<P>

<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<A HREF="#wxMidiMessage">wxMidiMessage</A>,
<A HREF="#wxMidiShortMessage">wxMidiShortMessage</A>
<P>



<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<a href="#wxMidiSysExMessageConstr">wxMidiSysExMessage::wxMidiSysExMessage</a><BR>
<a href="#wxMidiSysExMessageDestr">wxMidiSysExMessage::~wxMidiSysExMessage</a><BR>
<a href="#wxMidiSysExMessageError">wxMidiSysExMessage::Error</a><BR>
<a href="#wxMidiSysExMessageGetMessage">wxMidiSysExMessage::GetMessage</a><BR>
<a href="#wxMidiSysExMessageLength">wxMidiSysExMessage::Length</a><BR>
<a href="#wxMidiSysExMessageSetBuffer">wxMidiSysExMessage::SetBuffer</a><BR>
<a href="#wxMidiSysExMessageSetLength">wxMidiSysExMessage::SetLength</a><BR>
<P>


<HR>
<a name="wxMidiSysExMessageConstr"/>
<H3>wxMidiSysExMessage::wxMidiSysExMessage</H3>
<B>wxMidiSysExMessage</B>()<P>
Default constructor, intended for wxMidi internal use.<P>
<B>wxMidiSysExMessage</B>(<B>wxByte</B>* <I>msg</I>, <B>wxMidiTimestamp </B><I>timestamp</I>=0)<P>
Constructor, creating a wxMidiSysExMessage object from a string of wxBytes. In case of error during construction, subsecuents calls to <A href="#wxMidiSysExMessageError">wxMidiSysExMessage::Error</A> will return a error code with more information about the error.<P>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>msg</I><UL>
the raw MIDI message, as string of wxBytes. It must include the start-of-sysex status byte (0xF0) at the begining and the end-of-sysex status byte (0xF7) at the end.</UL><P>
<I>timestamp</I><UL>
The timestamp value. It is milliseconsd elapsed since the wxMidi package initialization. Current time can be 
obtained by calling wxMidi::GetTime(). Only meaningful if the wxOutDevice is open with latency time different from zero. In any case, if no timestamp is specified or if a value of zero is specified, the message will be delivered inmediately. See <A href="#wxMidiOutDeviceWrite">wxMidiOutDevice::Write</A>.<P>
</UL>
<P>


<HR>
<a name="wxMidiSysExMessageDestr"/>
<H3>wxMidiSysExMessage::~wxMidiSysExMessage</H3>
~<B>wxMidiSysExMessage</B>()<P>
Destructor. <p>

<HR>
<a name="wxMidiSysExMessageError"/>
<H3>wxMidiSysExMessage::Error</H3>
<B>wxMidiError Error</B>()<P>
Returns the error code for the wxMidiSysExMessage constructor.<p>

When building the wxMidiSysExMessage in one step, copying data from a wxByte string, some checking is done, for example, to verify that the message starts with a start-of-sysex status byte (0xF0) and that the buffer ends with an end-of-sysex status byte (0xF7). If any error is detected, the error is recorded and is returned when this method is called.<P>

If no error, zero (wxMIDI_NO_ERROR) is returned.<P>

<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<A HREF="wxMidiConstants.htm#wxMidiErrorCodes">wxMidi error codes</A>, 
<A HREF="#wxMidiSysExMessageConstr">wxMidiSysExMessage constructor</A>
<P>



<HR>
<a name="wxMidiSysExMessageGetMessage"/>
<H3>wxMidiSysExMessage::GetMessage</H3>
<B>wxByte</B>* <B>GetMessage</B>()<P>
Returns a wxByte string containing the raw MIDI message. It includes the start-of-sysex status byte (0xF0) and the end-of-sysex status byte (0xF7) - unless it is a truncated sysex message - . See <A HREF="#wxMidiSysExMessage">wxMidiSysExMessage</A><P>

<FONT COLOR="#FF0000">The returned string is owned by the wxMidiSysExMessage and must not be deleted.
</FONT><P>

<HR>
<a name="wxMidiSysExMessageLength"/>
<H3>wxMidiSysExMessage::Length</H3>
<B>int Length</B>()<P>
Returns the length (number of bytes) of the message returned by 
<a href="#wxMidiSysExMessageGetMessage">wxMidiSysExMessage::GetMessage</a>. It is, the length, in bytes, of the raw MIDI message, not the length of the buffer containing it.<P>


<HR>
<a name="wxMidiSysExMessageSetBuffer"/>
<H3>wxMidiSysExMessage::SetBuffer</H3>
<B>void SetBuffer</B>(<B>wxByte</B>* <I>pBuffer</I>)<P>
This method is mainly intended for internal use of wxMidi. It stores the pointer received as parameter, so that internal buffer will point to the received string. 
<FONT COLOR="#FF0000">The wxMidiSysExMessage object will become the owner of the string and will be deleted in the destructor. User must not delete the passed buffer.</FONT><P>
The lenght of the passed string must be set by calling 
<a href="#wxMidiSysExMessageSetLength">wxMidiSysExMessage::SetLength</a>.<P>


<HR>
<a name="wxMidiSysExMessageSetLength"/>
<H3>wxMidiSysExMessage::SetLength</H3>
<B>void SetLength</B>(<B>int </B><I>lenght</I>) <P>
This method is mainly intended for internal use of wxMidi. It stores the lentgh of the wxByte string received in a previous call to 
<a href="#wxMidiSysExMessageSetBuffer">wxMidiSysExMessage::SetBuffer</a> 
(or to be received in a subsequent call to that method). 
<FONT COLOR="#FF0000">The value pased as parameter must be the real size of the raw MIDI message not the size of the buffer containing it, that could be greater.</FONT><P>



</FONT></BODY></HTML>
