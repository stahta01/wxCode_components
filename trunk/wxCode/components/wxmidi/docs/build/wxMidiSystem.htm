<HTML>
<head><link rel=stylesheet type="text/css" href="wx.css">
<title>wxMidi</title></head>

<BODY BGCOLOR=#FFFFFF>
<A NAME="wxMidi"></A>

<FONT FACE="Arial, Lucida, Helvetica">

<A name="wxMidiSystem"/>
<H2>wxMidiSystem</H2>
wxMidiSystem acts as the user application's entry point to the MIDI music system. It provides information about, and access to, the set of installed MIDI devices.<P>

wxMidiSystem is a singleton and, therefore, the constructor is not public. Access to the only instance must be through method <a href="#wxMidiSystemGetInstance">GetInstance</a>.<P>

<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<a href="#wxMidiSystemCountDevices">wxMidiSystem::CountDevices</a><BR>
<a href="#wxMidiSystemGetErrorText">wxMidiSystem::GetErrorText</a><BR>
<a href="#wxMidiSystemGetHostErrorText">wxMidiSystem::GetHostErrorText</a><BR>
<a href="#wxMidiSystemGetInstance">wxMidiSystem::GetInstance</a><BR>
<a href="#wxMidiSystemGetTime">wxMidiSystem::GetTime</a><BR>
<a href="#wxMidiSystemDestr">wxMidiSystem::~wxMidiSystem</a><BR>
<P>

	
<HR>
<a name="wxMidiSystemCountDevices"/>
<H3>wxMidiSystem::CountDevices</H3>
<B>int</B> <B>CountDevices</B>()<P>

Returns the number of MIDI devices present in the system. The IDs of the MIDI devices will range from 0 to CountDevices() - 1. So, for example,  if CountDevices() returns 3, it means that there are three MIDI devices in the system and that their IDs will be 0, 1 and 2.To determine if they are output devices or input devices, you will have to instantiate the corresponding wxMidiDevice object and use methods IsInput() or IsOutput(), as in the following example:<P>.
<B><FONT COLOR="#FF0000">Example</FONT></B><P>
<PRE>
	// populate two combo boxes with available Midi devices, 
	// one combo box with in devices and the other one 
	// with out devices.
	
	wxMidiSystem* pMidi = wxMidiSystem::GetInstance();
	int nNumDevices = pMidi->CountDevices();
	wxString sMsg;

	// get available input and output devices
	int nItem, nInput=0, nOutput=0;
	for (int i = 0; i < nNumDevices; i++) {
      	wxMidiOutDevice* pMidiDev = new wxMidiOutDevice(i);
      	if (pMidiDev->IsOutputPort()) {
			nOutput++;
			sMsg.Printf(_T("%s [%s]"),
					pMidiDev->DeviceName(),
					pMidiDev->InterfaceUsed() );
			nItem = m_pOutCombo->Append(sMsg);
			m_pOutCombo->SetClientData(nItem, (void *)i);
      	}
		if (pMidiDev->IsInputPort()) {
			nInput++;
			sMsg.Printf(_T("%s [%s]"),
					pMidiDev->DeviceName(),
					pMidiDev->InterfaceUsed() );
			nItem = m_pInCombo->Append(sMsg);
			m_pInCombo->SetClientData(nItem, (void *)i);
      	}
		delete pMidiDev;
   	}
	if (nOutput > 0) m_pOutCombo->SetSelection(0);
	if (nInput > 0) m_pInCombo->SetSelection(0);

</PRE>


<HR>
<a name="wxMidiSystemGetErrorText"/>
<H3>wxMidiSystem::GetErrorText</H3>
<B>const wxString GetErrorText</B>(<B>wxMidiError </B><I>errnum </I>)<P>

Translates a portmidi error number into a human readable message. For a explanation of error codes
see <A href="wxMidiConstants.htm#wxMidiErrorCodes">wxMidi error codes</A>. <P>


<HR>
<a name="wxMidiSystemGetHostErrorText"/>
<H3>wxMidiSystem::GetHostErrorText</H3>
<B>wxString GetHostErrorText</B>()<P>

Translate portmidi host error into human readable message. After this routine executes, the host error is cleared.<P>


<HR>
<a name="wxMidiSystemGetInstance"/>
<H3>wxMidiSystem::GetInstance</H3>
<B>wxMidiError</B> <B>GetInstance</B>()<P>

Returns a pointer to the only wxMidiSystem instance. Note that wxMidiSystem is a singleton and, therefore, the constructor is not public. Access to the only instance must be through this GetInstance() method.<p>

<HR>
<a name="wxMidiSystemGetTime"/>
<H3>wxMidiSystem::GetTime</H3>
<B>wxMidiTimestamp</B> <B>GetTime</B>()<P>

Returns current value of the Midi timer. This timer is started when the Midi package is initialized and has a resolution of one millisecond.<P>



<HR>
<a name="wxMidiSystemDestr"/>
<H3>wxMidiSystem::~wxMidiSystem</H3>
<B>~wxMidiSystem</B>()<P>

Destructror.<P>




