<HTML>
<head><link rel=stylesheet type="text/css" href="wx.css">
<title>wxMidi</title></head>

<BODY BGCOLOR=#FFFFFF>
<A NAME="wxMidiDatabeseGM"></A>

<FONT FACE="Arial, Lucida, Helvetica">

<a name="wxMidiDatabaseGM"/>
<H2>wxMidiDatabaseGM</H2>
The General MIDI (GM) Specification, published by the International MIDI Association, 
defines a set of general capabilities for General MIDI Instruments. The General MIDI 
Specification includes the definition of a General MIDI Sound Set (a patch map), a General
MIDI Percussion map (mapping of percussion sounds to note numbers), and a set of General
MIDI Performance capabilities (number of voices, types of MIDI messages recognized, etc.).<P>

A MIDI sequence which has been generated for use on a General MIDI Instrument should play
correctly on any General MIDI synthesizer or sound module.<P>

The wxMidi package has a database with the General Midi standard (GM) instruments list. Instruments are grouped into sections, to facilitate the user to search for a specific instrument. The database includes methods to populate a combo box, a list box and, in general, any other control derived from <B>wxControlWithItems</B>.<P>

wxMidiSystem is a singleton and, therefore, the constructor is not public. Access to the only instance must be through method <a href="#wxMidiDatabaseGMGetInstance">GetInstance</a>.<P>

The General MIDI system specifies which instrument or sound corresponds with each
program/patch number, but General MIDI does not specify how these sounds are
produced. Thus, program number 0 should select the Acoustic Grand Piano sound
on any General MIDI instrument. However, the Acoustic Grand Piano sound on
two General MIDI synthesizers which use different synthesis techniques may
sound quite different.<P>

The General MIDI system utilizes MIDI channels 0-8 and 10-15 for chromatic
instrument sounds, while channel number 9 is utilized for "key-based" 
percussion sounds.<P>

For sounds on channels 0-8 and 10-15, the note number in a NoteOn
message is used to select the pitch of the sound which will be played. For example
if the Vibraphone instrument (program number 11) has been selected on channel 2,
then playing note number 60 on channel 2 would play the middle C note (this would
be the default note to pitch assignment on most instruments), and note number 59 on channel 2 would play B below middle C. Both notes would be played using the
Vibraphone sound.<P>

The General MIDI system specifies
sounds (or instruments, in wxMidi terminilogy) by using program numbers 0 through 127. The list of all these 128 sounds could be obtained by using different methods; for example, by calling <a href="#wxMidiDatabaseGMPopulateWithAllInstruments">PopulateWithAllInstruments</a>.<P>

These instrument sounds are grouped into "sets" of related sounds. For example, instruments 0-7 are piano sounds, 8-15 are chromatic percussion sounds, 16-23 are organ sounds, 24-31 are guitar sounds, etc. Each one of these "sets" is called a "section" in the wxMidiDatabaseGM. There are two specific methods to deal with sections:
<a href="#wxMidiDatabaseGMGetNumSections">GetNumSections</a>, 
<a href="#wxMidiDatabaseGMGetSectionName">GetSectionName</a> and
<a href="#wxMidiDatabaseGMPopulateWithSections">PopulateWithSections</a>.<P>

The list of instruments in a section is available through method 
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments
</a>.<P>

As said, channel 9 reserved for "key-based" 
percussion sounds. 
For these "key-based" sounds, the note number data in a NoteOn message is used
differently. Note numbers on channel 9 are used to select which drum sound will
be played. For example, a NoteOn message on channel 9 with note number 60 will
play a Hi Bongo drum sound. Note number 59 on channel 9 will play the Ride
Cymbal 2 sound. The list of all key-based percussion sounds is accesible trhough method <a href="#wxMidiDatabaseGMPopulateWithPercusionInstr">PopulateWithPercusionInstr</a><P>

The wxMidiDatabaseGM object includes additional methods for retrieving an instrumen name given its number or the number of the section and the index inside the section. See, for example, 
<a href="#wxMidiDatabaseGMGetInstrFromSection">GetInstrFromSection</a>, 
<a href="#wxMidiDatabaseGMGetInstrumentName">GetInstrumentName</a>, 
<a href="#wxMidiDatabaseGMGetNumInstrumentsInSection">GetNumInstrumentsInSection</a><P>&nbsp;<P>


<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<a href="#wxMidiDatabaseGMDestr">wxMidiDatabaseGM::~wxMidiDatabaseGM</a><BR>
<a href="#wxMidiDatabaseGMGetInstance">wxMidiDatabaseGM::GetInstance</a><BR>
<a href="#wxMidiDatabaseGMGetInstrFromSection">wxMidiDatabaseGM::GetInstrFromSection</a><BR>
<a href="#wxMidiDatabaseGMGetInstrumentName">wxMidiDatabaseGM::GetInstrumentName</a><BR>
<a href="#wxMidiDatabaseGMGetNumInstrumentsInSection">wxMidiDatabaseGM::GetNumInstrumentsInSection</a><BR>
<a href="#wxMidiDatabaseGMGetNumSections">wxMidiDatabaseGM::GetNumSections</a><BR>
<a href="#wxMidiDatabaseGMGetSectionName">wxMidiDatabaseGM::GetSectionName</a><BR>
<a href="#wxMidiDatabaseGMPopulateWithAllInstruments">wxMidiDatabaseGM::PopulateWithAllInstruments</a><BR>
<a href="#wxMidiDatabaseGMPopulateWithInstruments">wxMidiDatabaseGM::PopulateWithInstruments</a><BR>
<a href="#wxMidiDatabaseGMPopulateWithPercusionInstr">wxMidiDatabaseGM::PopulateWithPercusionInstr</a><BR>
<a href="#wxMidiDatabaseGMPopulateWithSections">wxMidiDatabaseGM::PopulateWithSections</a><BR>
<P>



<HR>
<a name="wxMidiDatabaseGMGetInstance"/>
<H3>wxMidiDatabaseGM::GetInstance</H3>
<B>wxMidiError</B> <B>GetInstance</B>()<P>

Returns a pointer to the only wxMidiDatabaseGM instance. Note that wxMidiDatabaseGM is a singleton and, therefore, the constructor is not public. Access to the only instance must be through this GetInstance() method.<P>

<HR>
<a name="wxMidiDatabaseGMGetInstrFromSection"/>
<H3>wxMidiDatabaseGM::GetInstrFromSection</H3>
<B>int GetInstrFromSection</B>(<B>int </B><I>nSect</I>, <B>int </B><I>n</I>)<P>

Returns the GM number of the <I>n</I>th instrument in section <I>nSect</I>.<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>nSect</I><UL>
The number of the section in which it is included the instrument to retrieve. Must be a number in the range 0 to  wxMidiDatabaseGM::GetNumSections() - 1.
</UL><P>
<I>n</I><UL>
The position (0 to GetNumInstrumentsInSection() - 1 ) in section of the instrument whose GM index is desired.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Remarks</FONT></B><P>
This method is useful when in your application, the instruments are presented organized into sections instead
of in a single list with all GM instruments.<P>
In the first case, when the user selects an instrument, it is necessary to translate the pair (section number, instrument number - relative to section - ) to the GM standard program number , as in following example:<P>

<PRE>
// It is assumed that combo box <I>m_pSectCombo</I> is loaded 
// with section names and that combo box <I>m_pInstrCombo</I>
// is loaded with the names of the instruments
// in the selected section.

void MyFrame::OnComboInstruments(wxCommandEvent &event)
{
    // A new instrument has been selected. Change Midi program

    int nInstr = m_pInstrCombo->GetSelection();
    int nSect = m_pSectCombo->GetSelection();
    wxMidiDatabaseGM* pMidiGM = wxMidiDatabaseGM::GetInstance();
    int nProgram = pMidiGM->GetInstrFromSection(nSect, nInstr);
    int nChannel = m_channel;
    wxMidiError nErr = m_pOutDev->ProgramChange(nChannel, nProgram);
    if (nErr) {
        ...
    }
    else {
        ...
    }
}

</PRE>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMGetNumInstrumentsInSection">GetNumInstrumentsInSection</a>,
<a href="#wxMidiDatabaseGMGetNumSections">GetNumSections</a>,
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments</a>
<P>



<HR>
<a name="wxMidiDatabaseGMGetInstrumentName"/>
<H3>wxMidiDatabaseGM::GetInstrumentName</H3>
<B>wxString GetInstrumentName</B>(<B>int </B><I>nInstr</I>)<P>

Returns a string with the name of instrumen <I>nInstr</I>.<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>nInstr</I><UL>
The number (0 to 127, according the GM standard) whose name is to be retrieved.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Remarks</FONT></B><P>
To populate a control (i.e. a combo box) with the names of all instruments you can do it in a single call
by using method
<a href="#wxMidiDatabaseGMPopulateWithAllInstruments">PopulateWithAllInstruments</a>
instead of doing it inside a loop of calls to GetInstrumentName().<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMPopulateWithAllInstruments">PopulateWithAllInstruments</a>,
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments</a>,
<a href="#wxMidiDatabaseGMPopulateWithPercusionInstr">PopulateWithPercusionInstr</a><P>



<HR>
<a name="wxMidiDatabaseGMGetNumInstrumentsInSection"/>
<H3>wxMidiDatabaseGM::GetNumInstrumentsInSection</H3>
<B>int GetNumInstrumentsInSection</B>(<B>int </B><I>nSect</I>)<P>

Returns the number of instruments that are included in section number <I>nSect</I>. In the wxMidiDatabaseGM, the number of instruments in a section is always eight. This method was included to allow for future extensions and to deal
with other MIDI standards.<P>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>nSect</I><UL>
The number of the section for which the number of instruments in it is desired. Must be a number in the range 0 to  wxMidiDatabaseGM::GetNumSections() - 1.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMGetInstrFromSection">GetInstrFromSection</a>,
<a href="#wxMidiDatabaseGMGetNumSections">GetNumSections</a>,
<a href="#wxMidiDatabaseGMGetSectionName">GetSectionName</a>,
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments</a>
<P>

<HR>
<a name="wxMidiDatabaseGMGetNumSections"/>
<H3>wxMidiDatabaseGM::GetNumSections</H3>
<B>int GetNumSections</B>()<P>

Returns the number of sections in which the instruments in the GM standard has been organized. 
In the wxMidiDatabaseGM, the number sections is always 16. 
This method was included to allow for future extensions and to deal
with other MIDI standards.<P>
<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMGetNumInstrumentsInSection">GetNumInstrumentsInSection</a>,
<a href="#wxMidiDatabaseGMGetSectionName">GetSectionName</a>,
<a href="#wxMidiDatabaseGMPopulateWithSections">PopulateWithSections</a>
<P>

<HR>
<a name="wxMidiDatabaseGMGetSectionName"/>
<H3>wxMidiDatabaseGM::GetSectionName</H3>
<B>wxString GetSectionName</B>(<B>int </B><I>nSect</I>)<P>

Returns a string containig the name of section number <I>nSect</I>.<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>nSect</I><UL>
The number of the section whose name is desired. Must be a number in range 0 to  wxMidiDatabaseGM::GetNumSections() - 1.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Remarks</FONT></B><P>
To populate a control (i.e. a combo box) with the names of all sections you can do it in a single call
by using method
<a href="#wxMidiDatabaseGMPopulateWithSections">PopulateWithSections</a>
instead of doing it inside a loop of calls to GetSectionName().<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMGetInstrFromSection">GetInstrFromSection</a>,
<a href="#wxMidiDatabaseGMGetNumInstrumentsInSection">GetNumInstrumentsInSection</a>,
<a href="#wxMidiDatabaseGMGetNumSections">GetNumSections</a>,
<a href="#wxMidiDatabaseGMPopulateWithSections">PopulateWithSections</a>
<P>


<HR>
<a name="wxMidiDatabaseGMPopulateWithAllInstruments"/>
<H3>wxMidiDatabaseGM::PopulateWithAllInstruments</H3>
<B>void PopulateWithAllInstruments</B>(<B>wxControlWithItems</B>* <I>pCtrol</I>, <B>int </B><I>nInstr</I>=0)<P>

Load control <I>pCtrol </I>with the list of all instrumens in the GM standard. If <I>nInstr </I>is specified, the name of that instrument is left selected in the control. Otherwise, the first instrument is left selected.<P>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>pCtrol </I><UL>
Pointer to wxControlWithItems object to be initialized and populated.
</UL><P>
<I>nInstr</I><UL>
Number (0 to 127) of the instrument to select.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Example:</FONT></B><P>
<PRE>

pInstrCombo = 
    new wxComboBox(panel, ID_COMBO_INSTRUMENTS,
			_T("This"),
			wxPoint(20,25), wxSize(270, wxDefaultCoord),
			0, NULL,
			wxCB_DROPDOWN | wxCB_READONLY | wxPROCESS_ENTER);

wxMidiDatabaseGM* pMidiGM = wxMidiDatabaseGM::GetInstance();
pMidiGM->PopulateWithAllInstruments(pInstrCombo);

</PRE>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments</a>,
<a href="#wxMidiDatabaseGMPopulateWithPercusionInstr">PopulateWithPercusionInstr</a>,
<P>



<HR>
<a name="wxMidiDatabaseGMPopulateWithInstruments"/>
<H3>wxMidiDatabaseGM::PopulateWithInstruments</H3>
<B>void PopulateWithInstruments</B>(<B>wxControlWithItems</B>* <I>pCtrol</I>, <B>int </B><I>nSection</I>, <B>int </B><I>nInstr</I>=0)<P>

Load control <I>pCtrol </I>with the list of all instrumens that belong to section <I>nSection</I>. If <I>nInstr </I>is specified, the name of that instrument is left selected in the control. Otherwise, the first instrument of the section is left selected.<P>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>pCtrol </I><UL>
Pointer to wxControlWithItems object to be initialized and populated.
</UL><P>
<I>nSection</I><UL>
The number of the section whose instruments' names are going to be loaded. Must be a number in range 0 to  wxMidiDatabaseGM::GetNumSections() - 1.
</UL><P>
<I>nInstr</I><UL>
Number (0 to GetNumInstrumentsInSection() - 1 ) of the instrument to select.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Remarks:</FONT></B><P>
This method is useful when in your application, the instruments are presented organized into sections instead
of in a single long list with all GM instruments.<P>
For example, you have to load a combo box with the list of all sections and other combo box with the
list of instruments in currently selected section, as in following example:<P>


<PRE>

MyFrame::MyFrame (...)
{
   ...

   wxMidiDatabaseGM* pMidiGM = wxMidiDatabaseGM::GetInstance();
   m_pSectCombo = 
      new wxComboBox(this, ID_COMBO_SECTIONS,
			_T("This"),
			wxPoint(20,25), wxSize(270, wxDefaultCoord),
			0, NULL,
			wxCB_DROPDOWN | wxCB_READONLY | wxPROCESS_ENTER);

   pMidiGM->PopulateWithSections(m_pSectCombo);

   m_pInstrCombo = 
      new wxComboBox(this, ID_COMBO_INSTRUMENTS,
			_T("This"),
			wxPoint(20,25), wxSize(270, wxDefaultCoord),
			0, NULL,
			wxCB_DROPDOWN | wxCB_READONLY | wxPROCESS_ENTER);

   pMidiGM->PopulateWithInstruments(m_pInstrCombo, 0, 0);

   ...
}

void MyFrame::OnComboSections(wxCommandEvent &event)
{
   // A new section selected. Reload Instruments combo
   // with the instruments in the selected section

   wxMidiDatabaseGM* pMidiGM = wxMidiDatabaseGM::GetInstance();
   int nSect = m_pSectCombo->GetSelection();
   pMidiGM->PopulateWithInstruments(m_pInstrCombo, nSect);
   DoProgramChange();

}

void MyFrame::OnComboInstruments(wxCommandEvent &event)
{
	// A new instrument selected. Change Midi program
	DoProgramChange();
}

void MyFrame::DoProgramChange()
{
    // A new instrument has been selected. Change Midi program

    int nInstr = m_pInstrCombo->GetSelection();
    int nSect = m_pSectCombo->GetSelection();
    wxMidiDatabaseGM* pMidiGM = wxMidiDatabaseGM::GetInstance();
    int nProgram = pMidiGM->GetInstrFromSection(nSect, nInstr);
    int nChannel = m_channel;
    wxMidiError nErr = m_pOutDev->ProgramChange(nChannel, nProgram);
    if (nErr) {
        ...
    }
    else {
        ...
    }

}


</PRE>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMPopulateWithAllInstruments">PopulateWithAllInstruments</a>,
<a href="#wxMidiDatabaseGMPopulateWithPercusionInstr">PopulateWithPercusionInstr</a>,
<a href="#wxMidiDatabaseGMPopulateWithSections">PopulateWithSections</a>
<P>


<HR>
<a name="wxMidiDatabaseGMPopulateWithPercusionInstr"/>
<H3>wxMidiDatabaseGM::PopulateWithPercusionInstr</H3>
<B>void PopulateWithPercusionInstr</B>(<B>wxControlWithItems</B>* <I>pCtrol</I>, <B>int </B><I>iSel</I>=0)<P>

In the MIDI standard channel 9 is reserved for "key-based" percussion sounds. 
For these "key-based" sounds, the note number data in a NoteOn message is used
to select which drum sound will
be played. For example, a NoteOn message on channel 9 with note number 60 will
play a Hi Bongo drum sound. Note number 59 on channel 9 will play the Ride
Cymbal 2 sound. Method  PopulateWithPercusionInstr is used to load a control (combo box, list box, or other derived from wxControlWithItems) whit the list of all key-based percussion sounds in the GM standard.<P>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>pCtrol </I><UL>
Pointer to wxControlWithItems object to be initialized and populated.
</UL><P>
<I>iSel</I><UL>
Number (35 to 81) of the sound to leave selected in the control. Default value (zero) is for leaving selected the
first available sound (35-Acoustic Bass Drum) as well as any out of range value.
</UL><P>

The list of percussion sounds in the GM standard is included here for your conveniece:<P>

<table>
<tr><td>35-Acoustic Bass Drum</td><td>59-Ride Cymbal 2</td></tr>
<tr><td>36-Bass Drum 1</td><td>60-High Bongo</td></tr>
<tr><td>37-Side Stick</td><td>61-Low Bongo</td></tr>
<tr><td>38-Acoustic Snare</td><td>62-Mute High Conga</td></tr>
<tr><td>39-Hand clap</td><td>63-Open High Conga</td></tr>
<tr><td>40-Electric Snare</td><td>64-Low Conga</td></tr>
<tr><td>41_Low Floor Tom</td><td>65-High Timbale</td></tr>
<tr><td>42_Closed High-Hat</td><td>66-Low Timbale</td></tr>
<tr><td>43-High Floor Tom</td><td>67-High Agogo</td></tr>
<tr><td>44-Pedal High-Hat</td><td>68-Low Agogo</td></tr>
<tr><td>45-Low Tom</td><td>69-Casaba</td></tr>
<tr><td>46-Open High-Hat</td><td>70-Maracas</td></tr>
<tr><td>47-Low-Mid Tom</td><td>71-Short Whistle</td></tr>
<tr><td>48-High-Mid Tom</td><td>72-Long Whistle</td></tr>
<tr><td>49-Crash Cymbal 1</td><td>73-Short Guiro</td></tr>
<tr><td>50-High Tom</td><td>74-Long Guiro</td></tr>
<tr><td>51-Ride Cymbal 1</td><td>75-Claves</td></tr>
<tr><td>52-Chinese Cymbal</td><td>76-High Wood Block</td></tr>
<tr><td>53-Ride Bell</td><td>77-Low Wood Block</td></tr>
<tr><td>54-Tambourine</td><td>78-Mute Cuica</td></tr>
<tr><td>55-Splash Cymbal</td><td>79-Open Cuica</td></tr>
<tr><td>56-Cowbell</td><td>80-Mute Triangle</td></tr>
<tr><td>57-Crash Cymbal 2</td><td>81-Open Triangle</td></tr>
<tr><td>58-Vibraslap</td><td>&nbsp;</td></tr>
</table>


<HR>
<a name="wxMidiDatabaseGMPopulateWithSections"/>
<H3>wxMidiDatabaseGM::PopulateWithSections</H3>
<B>int PopulateWithSections</B>(<B>wxControlWithItems</B>* <I>pCtrol</I>, <B>int </B><I>nSelInstr</I>=-1)<P>

Load control <I>pCtrol </I>with the list of all sections in which the instruments in the GM standard have been organized in the wxMidiDatabaseGM. If <I>nSelInstr</I>is specified, the name of that section is left selected in the control. Otherwise, the first section is left selected.<P>

<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>pCtrol </I><UL>
Pointer to wxControlWithItems object to be initialized and populated.
</UL><P>
<I>nSelInstr</I><UL>
Number (0 to GetNumSections() - 1 ) of the section to select.
</UL><P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">Remarks:</FONT></B><P>
This method is useful when in your application, the instruments are presented organized into sections instead
of in a single long list with all GM instruments.<P>
See an example in 
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments</a>
<P>

&nbsp;<P>
<B><FONT COLOR="#FF0000">See also:</FONT></B><P>
<a href="#wxMidiDatabaseGMPopulateWithAllInstruments">PopulateWithAllInstruments</a>,
<a href="#wxMidiDatabaseGMPopulateWithPercusionInstr">PopulateWithPercusionInstr</a>,
<a href="#wxMidiDatabaseGMPopulateWithInstruments">PopulateWithInstruments</a>
<P>


<HR>
<a name="wxMidiDatabaseGMDestr"/>
<H3>wxMidiDatabaseGM::~wxMidiDatabaseGM</H3>
~<B>wxMidiDatabaseGM</B>()<P>
Destructor. <p>

