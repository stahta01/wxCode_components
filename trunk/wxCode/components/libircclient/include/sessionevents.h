//===========================================================================
//
//  wxLibIRCClient - A wxWidgets libircclient wrapper library
//  Copyright (C) 2009 Andrea Zanellato (xvirc dot client at gmail dot com)
//
//  This program is FREE software. You can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your opinion) any later version.
//
//  This program is distributed in the HOPE that it will be USEFUL,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//  See the GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program. If not, write to the Free Software Foundation,
//  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
//===========================================================================
/**
 * @file session_events.h
 * @author foldink (foldink@gmail.com)
 * @date 07-February-2010
 * @version 0.0.1
 */
#ifndef __LIRCCSESSIONEVENTS_H__
#define __LIRCCSESSIONEVENTS_H__

#include <wx/event.h>

#include "defs.h"

typedef enum
{
	ID_LIRCC_CONNECT,
	ID_LIRCC_CHAN_NICK,
	ID_LIRCC_CHAN_QUIT,
	ID_LIRCC_CHAN_JOIN,
	ID_LIRCC_CHAN_PART,
	ID_LIRCC_CHAN_MODE,
	ID_LIRCC_USER_MODE,
	ID_LIRCC_CHAN_TOPIC,
	ID_LIRCC_CHAN_KICK,
	ID_LIRCC_CHAN_MSG,
	ID_LIRCC_USER_MSG,
	ID_LIRCC_USER_NOTICE,
	ID_LIRCC_CHAN_NOTICE,
	ID_LIRCC_INVITE,
	ID_LIRCC_CTCP_REQ,
	ID_LIRCC_CTCP_REP,
	ID_LIRCC_CTCP_ACTION,
	ID_LIRCC_UNKNOWN,
	ID_LIRCC_NUMERIC,
	ID_LIRCC_DCC_CHAT_REQ,
	ID_LIRCC_DCC_SEND_REQ
}
wxLIRCCSessionID;

/** xvirc imports */
class wxLIRCCSession;

/**
 * @class wxLIRCCSessionEvent
 * @brief This is the event class for managing information about events in session
 * 
 * @author foldink (foldink@gmail.com)
 * @date 07-February-2010
 * @version 0.0.1
 */
class WXDLLIMPEXP_LIBIRCLIENT wxLIRCCSessionEvent : public wxThreadEvent
{
public:
	/**
	 * Default constructor,
	 * @param commandType type of event this events is 
	 * @param id event id fot generation
	 * @param session session concerned by the event
	 */
	wxLIRCCSessionEvent(wxEventType commandType = wxEVT_NULL, int id = 0, 
				wxLIRCCSession* session = 0L )
				: wxThreadEvent(commandType, id),
				m_session(session),
				m_X(0),
				m_Y(0),
				m_count(0)
	{}

	/** 
	 * Copy constructor
	 * This one is needed by wxWidgets events system
	 */
    wxLIRCCSessionEvent(const wxLIRCCSessionEvent& event)
				: wxThreadEvent(event),
				m_session(event.m_session),
				m_X(event.m_X),
				m_Y(event.m_Y),
				m_count(event.m_count),
				m_origin(event.m_origin),
				m_params(event.m_params)
	{}
	
	/** 
	 * Clone method, this one is requested too...
	 */
    virtual wxEvent *Clone() const { return new wxLIRCCSessionEvent(*this); }
	
	/** Get the session concerned by this event */
    wxLIRCCSession* GetSession() const { return m_session; }
	
	/** Set the session concerned by this event */
    void SetSession(wxLIRCCSession* session) { m_session = session; }

	/** Get the mouse position if one */
    int GetX() const { return m_X; }
	
	/** Set the mouse position if one */
    void SetX(int x) { m_X = x; }

	/** Get the mouse position if one */
    int GetY() const { return m_Y; }
	
	/** Set the mouse position if one */
    void SetY(int y) { m_Y = y; }
	
	/** Get the count value generated by libircclient events */
	int GetCount() const {return m_count;};
	
	/** Set the count value generated by libircclient events */
	void SetCount( int count ) { m_count = count; };
	
	/** Get the origin string generated by libircclient */
	const wxString& GetOrigin() const {return m_origin;};
	
	/** Set the origin string generated by libircclient */
	void SetOrigin( const wxString& origin ) {m_origin = origin;};
	
	/** Get the params string generated byt the libircclient event */
	const wxArrayString& GetParams() const { return m_params; };
	
	/** Set the params string generated byt the libircclient event */
	void SetParams( const wxArrayString& params ) {m_params = params;};

protected:

    wxLIRCCSession* m_session;

    int m_X;
    int m_Y;
	
	int m_count;
	wxString m_origin;
	wxArrayString m_params;

private:
    DECLARE_DYNAMIC_CLASS(wxLIRCCSessionEvent)
};

/** define an event function pointer for wxWidgets defines */
typedef void (wxEvtHandler::*wxLIRCCSessionEventFunction)(wxLIRCCSessionEvent&);

#define wxLIRCCSessionEventHandler(func) \
    (wxObjectEventFunction)(wxEventFunction)wxStaticCastEvent(wxLIRCCSessionEventFunction, &func)

/**********************************************************************************************
 * SESSION EVENTS
**********************************************************************************************/
extern const wxEventType wxLIRCC_EVT_THREAD_CONNECT;
#define LIRCC_EVT_THREAD_CONNECT(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_CONNECT, ID_LIRCC_CONNECT, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_NICK;
#define LIRCC_EVT_THREAD_NICK(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_NICK, ID_LIRCC_CHAN_NICK, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_QUIT;
#define LIRCC_EVT_THREAD_QUIT(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_QUIT, ID_LIRCC_CHAN_QUIT, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_JOIN;
#define LIRCC_EVT_THREAD_JOIN(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_JOIN, ID_CHANNEL_JOIN, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_PART;
#define LIRCC_EVT_THREAD_PART(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_PART, ID_LIRCC_CHAN_JOIN, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_MODE;
#define LIRCC_EVT_THREAD_MODE(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_MODE, ID_LIRCC_CHAN_MODE, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_U_MODE;
#define LIRCC_EVT_THREAD_U_MODE(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_U_MODE, ID_LIRCC_USER_MODE, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_TOPIC;
#define LIRCC_EVT_THREAD_TOPIC(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_TOPIC, ID_LIRCC_CHAN_TOPIC, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_KICK;
#define LIRCC_EVT_THREAD_KICK(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_KICK, ID_LIRCC_CHAN_KICK, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_CHANMSG;
#define LIRCC_EVT_THREAD_CHANMSG(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_CHANMSG, ID_LIRCC_CHAN_MSG, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_PRIVMSG;
#define LIRCC_EVT_THREAD_PRIVMSG(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_PRIVMSG, ID_LIRCC_USER_MSG, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_NOTICE;
#define LIRCC_EVT_THREAD_NOTICE(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_NOTICE, ID_LIRCC_USER_NOTICE, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_CHAN_NOTICE;
#define LIRCC_EVT_THREAD_CHAN_NOTICE(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_CHAN_NOTICE, ID_LIRCC_CHAN_NOTICE, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_INVITE;
#define LIRCC_EVT_THREAD_INVITE(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_INVITE, ID_LIRCC_INVITE, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_CTCPREQ;
#define LIRCC_EVT_THREAD_CTCPREQ(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_CTCPREQ, ID_LIRCC_CTCP_REQ, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_CTCPREP;
#define LIRCC_EVT_THREAD_CTCPREP(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_CTCPREP, ID_LIRCC_CTCP_REP, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_CTCPACT;
#define LIRCC_EVT_THREAD_CTCPACT(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_CTCPACT, ID_LIRCC_CTCP_ACTION, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_UNKNOWN;
#define LIRCC_EVT_THREAD_UNKNOWN(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_UNKNOWN, ID_LIRCC_UNKNOWN, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_NUMERIC;
#define LIRCC_EVT_THREAD_NUMERIC(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_NUMERIC, ID_LIRCC_NUMERIC, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_DCCCHAT;
#define LIRCC_EVT_THREAD_DCCCHAT(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_DCCCHAT, ID_LIRCC_DCC_CHAT_REQ, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL ),

extern const wxEventType wxLIRCC_EVT_THREAD_DCCSEND;
#define LIRCC_EVT_THREAD_DCCSEND(fn) DECLARE_EVENT_TABLE_ENTRY( wxLIRCC_EVT_THREAD_DCCSEND, ID_LIRCC_DCC_SEND_REQ, wxID_ANY, (wxObjectEventFunction)(wxEventFunction)(wxLIRCCSessionEventFunction)&fn, (wxObject *) NULL )

#endif //__LIRCCSESSIONEVENTS_H__
