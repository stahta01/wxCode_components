//===========================================================================
//
//  wxLibIRCClient - A wxWidgets libircclient wrapper library
//  Copyright (C) 2009 Andrea Zanellato (xvirc dot client at gmail dot com)
//
//  This program is FREE software. You can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your opinion) any later version.
//
//  This program is distributed in the HOPE that it will be USEFUL,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//  See the GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program. If not, write to the Free Software Foundation,
//  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
//===========================================================================
/**
 * @file sessionmanager.h
 * @author foldink (foldink@gmail.com)
 * @date 07-February-2010
 * @version 0.0.1
 */
#ifndef __IRCSessionManager__
#define __IRCSessionManager__

#include <wx/event.h>

#include "libircclient.h"

#include "defs.h"

class IRCSession;

/** define an array of session, to store any new session in this manager */
WX_DEFINE_ARRAY(IRCSession*, IRCSessionArray);

/**
 * @class IRCSessionManager
 * @brief This is the main class for Handling irc sessions and channels in XVIRC
 * 
 * This class is a global singleton, you cannot directly build this class. If you need to
 * deal with you have to call IRCSessionManager::Get() to access the global instance of this
 * manager.
 * 
 * @author foldink (foldink@gmail.com)
 * @date 07-February-2010
 * @version 0.0.1
 */
class WXDLLIMPEXP_LIBIRCLIENT IRCSessionManager : public wxEvtHandler
{
	
public :
	
	/** This method is used to access the global instance of this class
	 * it will build it if it has not been yet... Any way you have to 
	 * call this method if you want to access global informations 
	 * contained in this manager.
	 */
	static inline IRCSessionManager* Get() 
	{
		if(m_instance == 0)
            m_instance = new IRCSessionManager();

        return m_instance;
	};
	
	/** This method is used to free the global instance of this class
	 * you shall never call this method unless you are a XVIRC developer
	 * and that you know what you are doing. This method will free all
	 * the memory for this class and set the global instance to 0;
	 */
	static inline void Free()
	{
		if( m_instance != 0 )
			delete m_instance;
        
		m_instance = 0;
	};
	
	/** Get the registered irc sessions from this manager */
	const IRCSessionArray& GetSessions() const {return m_sessions;};
	
	/** Find a, IRCSession accordingly to its irc_session_t pointer
	 * @param session irc_session_t pointer to find
	 * @return NULL if the session was not found
	 */
	IRCSession* FindSession( irc_session_t* session );
	
	/** Create a new session and manage it in this manager
	 * @param parent panel in which the session shall be attached (?)
	 * @return pointer to the new session
	 * 
	 * @note that this might change accordingly to RedTide requirements
	 */
	IRCSession* Create();

	/** Remove a session from this manager */
	void IRCSessionDestroy( irc_session_t* session );

	/***********************************************************************************************************************************
	 * IRC SESSIONS CALLBACK POINTERS
	 **********************************************************************************************************************************/
	 
	/* Can only use static void function and cannot used for processing events, we need redirect these 
	 * for each session in the corresponding IRCSession. This is the aim of this class.
	 */
	 
	/** Callback used when irc library is connecting the session. Accordingly to libircclient documentation, 
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 * 
	 * Every event generates a callback. This callback is generated by most events. Depending on the event nature
	 * it can provide zero or more params. For each event, the number of provided params is fixed, and their meaning is
	 * described.
	 * 
	 * Every event has origin, though the origin variable may be NULL, which means that event origin is unknown. 
	 * The origin usually looks like nick!host@ircserver, i.e. like tim!home@irc.krasnogorsk.ru. Such origins can not be
	 * used in IRC commands, and need to be stripped (i.e. host and server part should be cut off) before using.
	 * This can be done either explicitly, by calling irc_target_get_nick(), or implicitly for all the events - by setting the
	 * LIBIRC_OPTION_STRIPNICKS option with irc_option_set(). 
	 **/
	static void on_connect ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a nick message. Accordingly to libircclient documentation, 
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_nick ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a quit message. Accordingly to libircclient documentation,
	 * The "quit" event is triggered upon receipt of a QUIT message, which means that someone on a channel with the client has disconnected.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_quit ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a join message. Accordingly to libircclient documentation,
	 * The "join" event is triggered upon receipt of a JOIN message, which means that someone has entered a channel that the client is on.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_join ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a part message. Accordingly to libircclient documentation,
	 * The "part" event is triggered upon receipt of a PART message, which means that someone has left a channel that the client is on.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_part ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a mode message. Accordingly to libircclient documentation,
	 * The "mode" event is triggered upon receipt of a channel MODE message, which means that someone on a channel with the client has changed the channel's parameters.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_mode ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a mode message. Accordingly to libircclient documentation,
	 * The "umode" event is triggered upon receipt of a user MODE message, which means that your user mode has been changed.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_umode ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a topic message. Accordingly to libircclient documentation,
	 * The "topic" event is triggered upon receipt of a TOPIC message, which means that someone on a channel with the client has changed the channel's topic.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_topic ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a kick message. Accordingly to libircclient documentation,
	 * The "kick" event is triggered upon receipt of a KICK message, which means that someone on a channel with the client (or possibly the client itself!) has been forcibly ejected.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_kick ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a channel message. Accordingly to libircclient documentation,
	 * The "channel" event is triggered upon receipt of a PRIVMSG message to an entire channel, which means that 
	 * someone on a channel with the client has said something aloud. Your own messages don't trigger PRIVMSG event.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_channel ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a PRIVMSG message. Accordingly to libircclient documentation,
	 * The "privmsg" event is triggered upon receipt of a PRIVMSG message which is addressed to one or more clients, 
	 * which means that someone is sending the client a private message.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_privmsg ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a NOTICE message. Accordingly to libircclient documentation,
	 * The "notice" event is triggered upon receipt of a NOTICE message which means that someone has sent the 
	 * client a public or private notice. According to RFC 1459, the only difference between NOTICE and PRIVMSG 
	 * is that you should NEVER automatically reply to NOTICE messages. Unfortunately, this rule is frequently 
	 * violated by IRC servers itself - for example, NICKSERV messages require reply, and are NOTICEs.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_notice ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );

	/** Callback used when the session receives a channel NOTICE message. Accordingly to libircclient documentation,
	 * The "channel_notice" event is triggered upon receipt of a NOTICE message which means that someone has sent the client a public
     * notice. According to RFC 1459, the only difference between NOTICE and PRIVMSG is that you should NEVER automatically reply to NOTICE
     * messages. Unfortunately, this rule is frequently violated by IRC servers itself - for example, NICKSERV messages require reply, and 
     * are NOTICEs.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_channel_notice ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a INVITE message. Accordingly to libircclient documentation,
	 * The "invite" event is triggered upon receipt of an INVITE message, which means that someone is permitting 
	 * the client's entry into a +i channel.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_invite ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a CTCP message. Accordingly to libircclient documentation,
	 * The "ctcp" event is triggered when the client receives the CTCP request. By default, the built-in CTCP 
	 * request handler is used. The build-in handler automatically replies on most CTCP messages, so you will 
	 * rarely need to override it.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_ctcp_req ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a CTCP reply message. Accordingly to libircclient documentation,
	 * The "ctcp" event is triggered when the client receives the CTCP reply.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_ctcp_rep ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a CTCP reply message. Accordingly to libircclient documentation,
	 * The "action" event is triggered when the client receives the CTCP ACTION message. These messages usually looks like:
	 * @code [23:32:55] ***Tim gonna sleep @endcode
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_ctcp_action ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a unknown reply message. Accordingly to libircclient documentation,
	 * The "unknown" event is triggered upon receipt of any number of unclassifiable miscellaneous messages, which 
	 * aren't handled by the library.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_unknown ( irc_session_t * session, const char * event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a numeric response message. Accordingly to libircclient documentation,
	 * The "numeric" event is triggered upon receipt of any numeric response from the server. There is a lot of such 
	 * responses, see the full list here: Numeric reply codes from RFC1459.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_numeric ( irc_session_t * session, unsigned int event, const char * origin, const char ** params, unsigned int count );
	
	/** Callback used when the session receives a DCC CHAT request message. Accordingly to libircclient documentation,
	 * The "dcc chat" event is triggered when someone requests a DCC CHAT from you.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_dcc_chat_req ( irc_session_t * session, const char * nick, const char * addr, irc_dcc_t dccid );
	
	/** Callback used when the session receives a DCC SEND request message. Accordingly to libircclient documentation,
	 * The "dcc chat" event is triggered when someone wants to send a file to you via DCC SEND request.
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_dcc_send_req ( irc_session_t * session, const char * nick, const char * addr, const char * filename, unsigned long size, irc_dcc_t dccid );
	
	/** Callback used when the session receives a DCC RECIEVE request message. Accordingly to libircclient documentation,
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_dcc_recv ( irc_session_t * session, irc_dcc_t id, int status, void * ctx, const char * data, unsigned int length );
	
	/** Callback used when the session receives a DCC RECIEVE file message. Accordingly to libircclient documentation,
	 * 
	 * @param session the session, which generates an event 
	 * @param event the text name of the event. Useful in case you use a single event handler for several events simultaneously
	 * @param origin the originator of the event.
	 * @param params a list of event params. Depending on the event nature, it could have zero or more params. The actual number of params is specified in count. 
	 * 			None of the params can be NULL, but 'params' pointer itself could be NULL for some events.
	 * @param count the total number of params supplied.
	 *
	 **/
	static void on_dcc_file_recv ( irc_session_t * session, irc_dcc_t id, int status, void * ctx, const char * data, unsigned int length );

private :

	/**
	 * Default constructor, the one you cannot use directly. This class is a singleton
	 * if you don't know what it is refer to wikipedia or equivalent.
	 * To access the globally managed instance of this class you have to call IRCSessionManager::Get(),
	 * and all public non-static methods will be accessible from.
	 */
	IRCSessionManager();
	
	/**
	 * Default destructor, the one you cannot use directly. This class is a singleton
	 * if you don't know what it is refer to wikipedia or equivalent.
	 * You shall never have to destroy this class by your own unless you are a XVIRC
	 * developer. To destroy the global instance of this class you need to call IRCSessionManager::Free()
	 * after this call all global instance memory will be freed. All info will be lost and 
	 * the instance pointer will be set to 0. This shall be done only at the very end of the program !
	 */
	~IRCSessionManager();
	
	/** here the copy constructor does not exists */
	explicit IRCSessionManager( const IRCSessionManager& ){};
	
	/** as for the copy ctor the operator = shall not exists too */
	IRCSessionManager& operator=(IRCSessionManager const&){return *this;};
		
private :
	/** define the static global instance for this manager */
	static IRCSessionManager* m_instance;
	
	/** array containing all opened sessions */
	IRCSessionArray m_sessions;
	
	/** Callbacks data structure to handle on our delegate class */
	irc_callbacks_t m_callbacks;
};

#endif
