<?xml version="1.0"?>
<!DOCTYPE webupdate PUBLIC "-//WebUpdate//DTD WebUpdater 1.0//EN" "http://wxcode.sourceforge.net/components/webupdate/remote.dtd">
<!-- $Id$ -->

<!-- This script is exactly like script2.xml just with local URIs instead of absolute HTTP ones-->
<webupdate version="1.0">   

   <!-- our CORE package: we use this to deliver the sample binaries -->
   <package id="core">
      <latest-version importance="normal">1.5.0</latest-version>

      <latest-download>
	  
			<!-- use a simple ZIP -->
			<uri>file:$(remotedir)advanced-msw-$(latest-version).zip</uri>
			<platform name="msw"/>
			
			<actions>
				<extract file="$(thisfile)" where="$(programdir)"/>
			</actions>
	  </latest-download>
      <latest-download>
	  
			<!-- use a simple ZIP -->
			<uri>file:$(remotedir)advanced-gtk-$(latest-version).zip</uri>
			<platform name="gtk"/>
			
			<actions>
				<extract file="$(thisfile)" where="$(programdir)"/>
				<run cmd="./configure && make"/>
			</actions>
	  </latest-download>
	  <description>It's a good habit to always include a description for each package - in this way the user knows what he's downloading... in this case this is the package which contains a simple data file and the updated EXE for $(appname)</description>
   </package>
   
   
   
   <!-- our ADDON1 package -->
   <package id="addon1">
	  <requires>core</requires>
      <latest-version importance="low">1.5.0</latest-version>      

	  <!-- a single download for all platforms -->
      <latest-download>
			<uri>file:$(remotedir)addon1-$(latest-version).zip</uri>
			<platform name="any"/>	
			
			<actions>
				<mkdir dir="$(programdir)//addon1" />
				<extract file="$(thisfile)" where="$(programdir)//addon1"/>
			</actions>
	  </latest-download>
	  <description>This is the package $(id) for $(appname)</description>
   </package>

   
   <!-- our ADDON2 package -->
   <package id="addon2">
	  <requires>core</requires>
      
      <!-- just to show that 'normnal' priorities are automatically checked... -->
      <latest-version importance="normal">1.5.0</latest-version>      

	  <!-- a single download for all platforms -->
      <latest-download>
			<uri>file:$(remotedir)addon2-$(latest-version).zip</uri>
			<platform name="any"/>	
			
			<actions>
				<mkdir dir="$(programdir)//addon2" />
				<extract file="$(thisfile)" where="$(programdir)//addon2"/>
			</actions>
	  </latest-download>
	  <description>This is the package $(id) for $(appname)</description>
   </package>
   

   <!-- our ADDON3 package -->
   <package id="addon3">
	  <requires>core,addon1,addon2</requires>
      <latest-version importance="low">1.5.0</latest-version>      

	  <!-- a single download for all platforms -->
      <latest-download>
			<uri>file:$(remotedir)addon3-$(latest-version).zip</uri>
			<platform name="any"/>	
			
			<actions>
				<mkfile file="$(programdir)//test.txt" content="Hello World !" encoding="ISO8859-1"/>

                <!-- unlike other addon packages here I want also to show the usage of the "namemap" property:
                the "addon.txt" which should be contains in the addon3 package will be decompressed as
                "myaddonfile.txt" ;-) -->
				<mkdir dir="$(programdir)//addon3" />
				<extract file="$(thisfile)" where="$(programdir)//addon3" namemap="addon.txt=myaddonfile.txt" />
				<open file="$(programdir)//test.txt"/>
			</actions>
	  </latest-download>
	  <description>This is the package $(id) for $(appname)</description>
   </package>
   
</webupdate>
