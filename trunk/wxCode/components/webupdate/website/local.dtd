<!-- 
   Name:        local.dtd
   Purpose:     a simple DTD to validate local update script
   Author:      Francesco Montorsi
   Created:     2005/06/24
   RCS-ID:      $Id$
   Copyright:   (c) 2005 Francesco Montorsi
   Licence:     wxWidgets licence

   This Document Type Definition (DTD) is for the update scripts that reside
   in your program's folder and which just list the installed packages.
   This file should make easier to check validity of the
   scripts you write and it should also be as a simple reference guide for the 
   update script format.
	 
   Also remember to validate your XML files against this DTD before mailing for
   problems about your scripts: WebUpdate component is not responsible for
   unwanted behaviours coming from malformed update scripts !

-->




<!-- WEBUPDATE tag: this is the root of the script file.
-->
<!ELEMENT webupdate (appname,appfile,dlgxrc,remoteuri,keywords?,local-package*)>




<!--                                                                                -->
<!--                        CHILDREN TAGS OF 'WEBUPDATE'                            -->
<!--                                                                                -->


<!-- APPNAME tag: specifies the name of the application being updated.
-->
<!ELEMENT appname (#PCDATA)>


<!-- APPFILE tag: specifies the name of the executable file for the application
                  being updated. This field is used to restart the application 
 		  after the update process. To keep this field cross-platform you
                  should not specify the extension which will be added by the
                  WebUpdater application (.EXE for win32; nothing for unix).
-->
<!ELEMENT appfile (#PCDATA)>


<!-- DLGXRC: specifies the name of the dialog resource to load from the XRC file.
-->
<!ELEMENT dlgxrc (#PCDATA)>


<!-- REMOTEURI tag: specifies where the WebUpdate remote script is stored.
-->
<!ELEMENT remoteuri (#PCDATA)>


<!-- KEYWORDS tag: specifies additional keywords used by WebUpdate to substitute
                                  $(xxxx) strings in the remote script. See remote.dtd for more info
								  about keyword substitution.
                                  The keywords must be in the format:
								   key1="value1",key2="value2",key3="value3" ...
								In the sample above, the following substitution will be performed
								
								$(key1)  => value1
								$(key2)  => value2
								$(key3)  => value3
								....
								
								Note: this tag is parsed after that all the standard keywords (see remote.dtd)
								has been initialized so that you can override them (e.g. using 
								programdir=c:\programdir\loaded\by\registry, the WebUpdater will
								use that value to substitute $(programdir) keys...).
								
								Note #2: this is the only tag in a local XML script where keyword substitution
								is performed: i.e. the following is allowed and does what you think:
									        <keywords>addondir=$(programdir)\addons</keywords> 
-->
<!ELEMENT keywords (#PCDATA)>


<!-- LOCAL-PACKAGE: begins a new local package section.
-->
<!ELEMENT local-package (version)>
<!ATTLIST local-package id ID #REQUIRED>






<!--                                                                                -->
<!--                        CHILDREN TAGS OF 'LOCAL-PACKAGE'                        -->
<!--                                                                                -->

<!-- VERSION tag: the version string for this local package.
-->
<!ELEMENT version (#PCDATA)>

