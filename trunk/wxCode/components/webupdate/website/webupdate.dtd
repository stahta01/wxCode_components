<!-- 
   Name:        webupdate.dtd
   Purpose:     a simple DTD to validate update script
   Author:      Francesco Montorsi
   Created:     2005/06/24
   RCS-ID:      $Id$
   Copyright:   (c) 2005 Francesco Montorsi
   Licence:     wxWidgets licence

   This Document Type Definition (DTD) is for the update scripts that you put
   in your webserver. This file should make easier to check validity of the
   scripts you write and it should also be as a simple reference guide for the 
   update script format.

   I suggest you to look at the following files as examples of WebUpdate scripts:
   
     http://wxcode.sf.net/components/webupdate/script1.xml
	 http://wxcode.sf.net/components/webupdate/script2.xml
	 
   Also remember to validate your XML files against this DTD before mailing for
   problems about your scripts: WebUpdate component is not responsible for
   unwanted behaviours coming from malformed update scripts !


   NOTE ABOUT "KEYWORD SUBSTITUTION": in this context, by "keyword substitution" 
   we mean the process of replacing thos strings in the form $(...) with values
   defined at compile-time in the program which downloads this script file.
   Keyword substitution is performed only in the text content of those tags whose  
   description explicitely state it.
   The list of keywords which can be used is:
   
   - folders:   
	 $(programdir) = the folder where the program executable is placed
	 $(downloaddir) = the folder where the downloaded files are placed
     $(tempdir) = a temporary folder
   
   - names:   
     $(appname) = the name of the application
     $(framename) = the label of the main frame of the application
   
   - miscellaneous:
     $(pid) = the process ID of the application
	 
   - these are available only after the relative tags:
     $(latest-version) = the version of the package (available only after <latest-version>)
     $(thisfile) = the name of the file of this package (available only after <uri>)
	 $(id) = the ID name of this package (available only after <package id="">)

-->




<!-- WEBUPDATE tag: this is the root of the script file.
-->
<!ELEMENT webupdate (msg-update-available?, msg-update-notavailable?, package*)>




<!--                                                                                -->
<!--                        CHILDREN TAGS OF 'WEBUPDATE'                            -->
<!--                                                                                -->


<!-- PACKAGE tag: this begins a new package section where
                  are provided all the info about new updates.
				  Requires an "id" attribute (which must be unique).
-->
<!ELEMENT package (requires?, latest-version, latest-download*, description?)>
<!ATTLIST package id ID #REQUIRED>


<!-- MSG-UPDATE-AVAILABLE tag: contains a text message which is displayed to the user in case
                               a new version of some package is available for its platform. 
							   Keyword substitution is performed in the text.
-->
<!ELEMENT msg-update-available (#PCDATA)>


<!-- MSG-UPDATE-NOTAVAILABLE tag: contains a text message which is displayed to the user in case
                                 a new version of the package is NOT available for its platform. 
							     Keyword substitution is performed in the text.
-->
<!ELEMENT msg-update-notavailable (#PCDATA)>






<!--                                                                                -->
<!--                        CHILDREN TAGS OF 'PACKAGE'                              -->
<!--                                                                                -->

<!-- REQUIRES tag: lists the packages required for the installation of this package.
                   The list must be comma-separed and the names of the packages referenced
				   must be declared somewhere in the web update script.
-->
<!ELEMENT requires (#PCDATA)>



<!-- LATEST-VERSION tag: contains the version string of the most updated version
                         available in the webserver.
						 You can use the 'importance' attribute to define how much
						 important is this update...
-->
<!ELEMENT latest-version (#PCDATA)>
<!ATTLIST latest-version importance (low|normal|high) "normal">


<!-- LATEST-DOWNLOAD tag: must contain the URI tag with the download location of the most updated
                          file available in the webserver. Requires also a "platform" child tag
						  which specifies the platform targeted by this download.
						  The "md5" subtag can be optionally used to specify a MD5 checksum.
						  At least one "action" child tag must be present to specify the action to
						  take at the end of the download.						  
-->
<!ELEMENT latest-download (uri, platform, md5?, action+)>


<!-- DESCRIPTION tag: the description for this package; contained URLs will be automatically highlighted
                      so that the user can click them to directly visit them.
                      This is useful to embed a link to the changelog for this package, for example.
                      Keyword substitution is performed in the text.				  
-->
<!ELEMENT description (#PCDATA)>




<!--                                                                                -->
<!--                     CHILDREN TAGS OF 'LATEST-DOWNLOAD'                         -->
<!--                                                                                -->

<!-- PLATFORM tag: contains the platform code for the platform which is targeted
                   by the current download.
-->
<!ELEMENT platform EMPTY>
<!ATTLIST platform name (msw|gtk|mac|x11|motif|mgl|os2|any) "any">



<!-- URI tag: specifies the URI of the current download.
              Keyword substitution is performed in the text; this allows you to write
			  URLs in this way:
			  
			  <uri>http://mysite.net/myprog-$(latest-version).zip</uri>
			  
			  which is very handy for those projects who follow a strict naming rule.
			  This allows you to avoid to update the filename each time a new release
			  is out but don't forget that you will still need to update the tags:
			  <latest-version>, <md5>, etc ...
			  
-->
<!ELEMENT uri (#PCDATA)>


<!-- MD5 tag: allows the webupdate XML script writer to specify a MD5 file checksym for
              this download.
-->
<!ELEMENT md5 (#PCDATA)>


<!-- ACTION tag: allows to specify an action to take when the download is complete.
                 There are some built-in action handlers for "run", "extract", "exit"...				 
-->
<!ELEMENT action (#PCDATA)>


<!-- for "run" action tags -->
<!ATTLIST action flags CDATA "ASYNC">				<!-- the possible flags are: ASYNC, SYNC -->
<!ATTLIST action args CDATA "">					<!-- the arguments to give to the file to run -->
<!ATTLIST action file CDATA #IMPLIED>				<!-- REQUIRED: the path+name of the file to run -->

<!-- for "extract" action tags -->
<!ATTLIST action where CDATA "$(programdir)">      <!-- the folder where extracted files will be put -->
<!ATTLIST action file CDATA "$(thisfile)">         <!-- the file to extract -->
<!ATTLIST action type CDATA "zip">					<!-- the possible values actually are: 'zip' -->

<!-- for "exit" action tags -->
<!ATTLIST action flags CDATA "ASKUSER">    		<!-- the possible flags are: ASKUSER, NOTIFYUSER, RESTART -->

<!-- add the attributes for you own actions here -->
