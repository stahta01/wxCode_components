/***************************************************************
 * Name:      wxledfont.cpp
 * Purpose:   Code for Class wxLEDFont
 * Author:    Christian Gräfe (info@mcs-soft.de)
 * Created:   2007-03-02
 * Copyright: Christian Gräfe (www.mcs-soft.de)
 * License:	  wxWindows licence
 **************************************************************/
// For compilers that support precompilation, includes "wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include <wx/wx.h>
#endif

#include "wx/wxledfont.h"

wxLEDFont::wxLEDFont() :
	m_letterspace(1),
	m_maxLetterWidth(ms_slWidth),
	m_maxLetterHeight(ms_slHeight)
{
	// set standartletter
	// Space without fit
	m_letters[ms_standartLettersChar[0]]= new MatrixObject(ms_standartLettersData[0],ms_slWidth,ms_slHeight);
	// all the other letters
	AdvancedMatrixObject* tmp=0;
	for(int i=1;i<69;++i)
	{
		tmp=new AdvancedMatrixObject(ms_standartLettersData[i],ms_slWidth,ms_slHeight);
		tmp=tmp;
		tmp->FitLeft();
		tmp->FitRight();
		m_letters[ms_standartLettersChar[i]]= new MatrixObject(*tmp);
		wxDELETE(tmp);
	}
}

wxLEDFont::~wxLEDFont()
{
	// Objecte der HashMap wieder freigeben
	wxLEDFontHashMap::iterator it;
    for( it = m_letters.begin(); it != m_letters.end(); ++it )
    {
        MatrixObject* value = it->second;
        delete value;
    }
}

const MatrixObject* wxLEDFont::GetLetter(char l)
{
	// suchen
	wxLEDFontHashMap::iterator it=m_letters.find(l);
	if(it==m_letters.end()) return NULL;
	else return it->second;
}

AdvancedMatrixObject* wxLEDFont::GetMOForText(const wxString& text, wxAlignment a)
{

	// ausmase des matrix_object suchen
	wxString s_tmp=text;
	int w=0,h=0,npos=s_tmp.Find('\n'),i=0;
	while(npos!=wxNOT_FOUND)
	{
		h++;
		if(w<npos) w=npos;
		s_tmp=s_tmp.AfterFirst('\n');
		npos=s_tmp.Find('\n');
	}
	h++;
	if(w<s_tmp.Length()) w=s_tmp.Length();

	// create matrixobject for the text
	AdvancedMatrixObject* mo_forText=new AdvancedMatrixObject(
					0,w*(m_maxLetterWidth+m_letterspace),
					h*(m_maxLetterHeight+m_letterspace)-m_letterspace);

	// create array for the textlines
	AdvancedMatrixObject** mo_lines=new AdvancedMatrixObject*[h+1];

	// create the AMOs fo the textlines
	for(i=0;i<=h;++i)
		mo_lines[i]=new AdvancedMatrixObject(
							0,w*(m_maxLetterWidth+m_letterspace),
							m_maxLetterHeight);

	// Get the Letters and save in the MO of the line
	int x=0,line=0;
	const MatrixObject* mo_tmp=0;
	for(i=0; i<text.Length(); ++i)
	{
		char c=text.GetChar(i);
		if(c=='\n')
		{
			++line;
			x=0;
		}
		else
		{
			mo_tmp=this->GetLetter(c);
			if(mo_tmp)
			{
				// Save Letter in the line for the text
				mo_lines[line]->SetDatesAt(x,0,*mo_tmp);

				// x-Pos of the next Letter
				x+=mo_tmp->GetWidth()+m_letterspace;
			}
		}
	}

	// shrink the mo of the lines and save in one MO
	int y=0;
	for(i=0;i<=h;++i)
	{
		mo_lines[i]->FitRight();

		// find x pos
		if(a==wxALIGN_RIGHT)
			x=mo_forText->GetWidth()-mo_lines[i]->GetWidth();
		else if(a==wxALIGN_CENTER_HORIZONTAL)
			x=(mo_forText->GetWidth()-mo_lines[i]->GetWidth())/2;
		else  // wxALIGN_LEFT
			x=0;

		// set the line
		mo_forText->SetDatesAt(x,y,*mo_lines[i]);

		// find y pos for next line
		y+=m_maxLetterHeight+m_letterspace;

		// free the line
		wxDELETE(mo_lines[i])
	}

	// Fit the right, left and bottom border
	mo_forText->FitLeft();
	mo_forText->FitRight();
	//mo_forText->FitBottom();

	// free the array for the lines
	delete mo_lines;

	// return the mo
	return mo_forText;
}

const int wxLEDFont::ms_slWidth=5;
const int wxLEDFont::ms_slHeight=7;
const wxString wxLEDFont::ms_standartLettersChar = wxT(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`{|}~");
const char wxLEDFont::ms_standartLettersData[69][35] = {
	{	//' ',		// 0 -> SPACE
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//'!',		// 1 -> !
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,0,0,0,
		0,0,1,0,0
	},
	{	//'"',		// 2 -> "
		0,1,0,1,0,
		0,1,0,1,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//'#',		// 3 -> #
		0,1,0,1,0,
		0,1,0,1,0,
		1,1,1,1,1,
		0,1,0,1,0,
		1,1,1,1,1,
		0,1,0,1,0,
		0,1,0,1,0
	},
	{	//' ',		// TODO 4 -> $
		0,0,1,0,0,
		0,1,1,1,0,
		1,0,0,0,0,
		0,1,1,1,0,
		0,0,0,0,1,
		0,1,1,1,0,
		0,0,1,0,0
	},
	{	//'%',		// 5 -> %
		0,0,0,0,1,
		0,1,0,0,1,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		1,0,0,1,0,
		1,0,0,0,0
	},
	{	//'&',		// 6 -> &
		0,1,1,0,0,
		1,0,0,1,0,
		1,0,0,1,0,
		0,1,1,0,0,
		1,0,0,1,1,
		1,0,0,1,0,
		0,1,1,0,1
	},
	{	//'\'',		// 7 -> '
		1,1,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//'(',		// 8 -> (
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,0,1,0
	},
	{	//')',		// 9 -> )
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0
	},
	{	//'*',		// 10 -> *
		0,0,0,0,0,
		0,0,1,0,0,
		1,0,1,0,1,
		0,1,1,1,0,
		1,0,1,0,1,
		0,0,1,0,0,
		0,0,0,0,0,
	},
	{	//'+',		// 11 -> +
		0,0,0,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		1,1,1,1,1,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,0,0,0
	},
	{	//',',		// 12 -> ,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		1,0,0,0,0
	},
	{	//'-',		// 13 -> -
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,1,1,1,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//'.',		// 14 -> .
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		1,0,0,0,0
	},
	{	//'/',		// 15 -> /
		0,0,0,0,1,
		0,0,0,0,1,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0
	},
	{	//'0',		// 16 -> 0
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,1,1,
		1,0,1,0,1,
		1,1,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'1',		// 17 -> 1
		0,0,1,0,0,
		0,1,1,0,0,
		1,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,1,1,1,0
	},
	{	//'2',		// 18 -> 2
		0,1,1,1,0,
		1,0,0,0,1,
		0,0,0,0,1,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		1,1,1,1,1
	},
	{	//'3',		// 19 -> 3
		0,1,1,1,0,
		1,0,0,0,1,
		0,0,0,0,1,
		0,1,1,1,0,
		0,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'4',		// 20 -> 4
		0,0,0,1,0,
		0,0,1,1,0,
		0,1,0,1,0,
		1,0,0,1,0,
		1,1,1,1,1,
		0,0,0,1,0,
		0,0,0,1,0
	},
	{	//'5',		// 21 -> 5
		1,1,1,1,1,
		1,0,0,0,0,
		1,0,0,0,0,
		0,1,1,1,0,
		0,0,0,0,1,
		0,0,0,0,1,
		1,1,1,1,0
	},
	{	//'6',		// 22 -> 6
		0,0,1,1,0,
		0,1,0,0,0,
		1,0,0,0,0,
		1,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'7',		// 23 -> 7
		1,1,1,1,1,
		0,0,0,0,1,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0
	},
	{	//'8',		// 24 -> 8
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'9',		// 25 -> 9
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,1,
		0,0,0,0,1,
		0,0,0,0,1,
		0,1,1,1,0
	},
	{	//':',		// 26 -> :
		0,0,0,0,0,
		0,0,0,0,0,
		1,0,0,0,0,
		0,0,0,0,0,
		1,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//';',		// 27 -> ;
		0,0,0,0,0,
		0,0,0,0,0,
		0,1,0,0,0,
		0,0,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		1,0,0,0,0
	},
	{	//'<',		// 28 -> <
		0,0,0,0,0,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,0,1,0,
		0,0,0,0,0
	},
	{	//'=',		// 29 -> =
		0,0,0,0,0,
		0,0,0,0,0,
		1,1,1,1,1,
		0,0,0,0,0,
		1,1,1,1,1,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//'>',		// 30 -> >
		0,0,0,0,0,
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		0,0,0,0,0
	},
	{	//'?',		// 31 -> ?
		0,1,1,1,0,
		1,0,0,0,1,
		0,0,0,0,1,
		0,0,0,1,0,
		0,0,1,0,0,
		0,0,0,0,0,
		0,0,1,0,0
	},
	{	//'@',		// 32 -> @
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,1,1,1,
		1,0,1,0,1,
		1,0,1,1,1,
		1,0,0,0,0,
		0,1,1,1,0
	},
	{	//'A',		// 33 -> A
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,1,1,1,1,
		1,0,0,0,1,
		1,0,0,0,1
	},
	{	//'B',		// 34 -> B
		1,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,1,1,1,0
	},
	{	//'C',		// 35 -> C
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'D',		// 36 -> D
		1,1,1,0,0,
		1,0,0,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,1,0,
		1,1,1,0,0
	},
	{	//'E',		// 37 -> E
		1,1,1,1,1,
		1,0,0,0,0,
		1,0,0,0,0,
		1,1,1,1,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,1,1,1,1
	},
	{	//'F',		// 38 -> F
		1,1,1,1,1,
		1,0,0,0,0,
		1,0,0,0,0,
		1,1,1,1,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0
	},
	{	//'G',		// 38 -> G
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,0,
		1,0,1,1,1,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'H',		// 40 -> H
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,1,1,1,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1
	},
	{	//'I',		// 41 -> I
		0,1,1,1,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,1,1,1,0
	},
	{	//'J',		// 42 -> J
		0,0,1,1,1,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		1,0,0,1,0,
		0,1,1,0,0
	},
	{	//'K',		// 43 -> K
		1,0,0,0,1,
		1,0,0,1,0,
		1,0,1,0,0,
		1,1,0,0,0,
		1,0,1,0,0,
		1,0,0,1,0,
		1,0,0,0,1
	},
	{	//'L',		// 44 -> L
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,1,1,1,1
	},
	{	//'M',		// 45 -> M
		1,0,0,0,1,
		1,1,0,1,1,
		1,0,1,0,1,
		1,0,1,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1
	},
	{	//'N',		// 46 -> N
		1,0,0,0,1,
		1,1,0,0,1,
		1,0,1,0,1,
		1,0,0,1,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1
	},
	{	//'O',		// 47 -> O
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'P',		// 48 -> P
		1,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,1,1,1,0,
		1,0,0,0,0,
		1,0,0,0,0,
		1,0,0,0,0
	},
	{	//'Q',		// 49 -> Q
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,1,0,1,
		0,1,1,1,0,
		0,0,0,0,1
	},
	{	//'R',		// 50 -> R
		1,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,1,
		1,1,1,1,0,
		1,0,1,0,0,
		1,0,0,1,0,
		1,0,0,0,1
	},
	{	//'S',		// 51 -> S
		0,1,1,1,0,
		1,0,0,0,1,
		1,0,0,0,0,
		0,1,1,1,0,
		0,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'T',		// 52 -> T
		1,1,1,1,1,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0
	},
	{	//'U',		// 53 -> U
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,1,1,0
	},
	{	//'V',		// 54 -> V
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,0,1,0,
		0,0,1,0,0
	},
	{	//'W',		// 55 -> W
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,0,0,1,
		1,0,1,0,1,
		1,0,1,0,1,
		1,1,0,1,1,
		1,0,0,0,1
	},
	{	//'X',		// 56 -> X
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,0,1,0,
		0,0,1,0,0,
		0,1,0,1,0,
		1,0,0,0,1,
		1,0,0,0,1
	},
	{	//'Y',		// 57 -> Y
		1,0,0,0,1,
		1,0,0,0,1,
		0,1,0,1,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0
	},
	{	//'Z',		// 58 -> Z
		1,1,1,1,1,
		0,0,0,0,1,
		0,0,0,1,0,
		0,0,1,0,0,
		0,1,0,0,0,
		1,0,0,0,0,
		1,1,1,1,1
	},
	{	//'[',		// 59 -> [
		0,1,1,1,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,1,0,0,0,
		0,1,1,1,0
	},
	{				// 60 ->
		1,0,0,0,0,
		1,0,0,0,0,
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,0,1,0,
		0,0,0,0,1,
		0,0,0,0,1
	},
	{	//']',		// 61 -> ]
		0,1,1,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,0,0,1,0,
		0,1,1,1,0
	},
	{	//'^',		// 62 -> ^
		0,0,1,0,0,
		0,1,0,1,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
	{	//'_',		// 63 -> _
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		1,1,1,1,1
	},
	{	//'`',		// 64 -> `
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	},
/////////////////////////////
// a - z
////////////////////////////
	{	//'{',		// 91 -> {
		0,0,0,1,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,0,1,0
	},
	{	//'|',		// 92 -> |
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,1,0,0
	},

	{	//'}',		// 93 -> }
		0,1,0,0,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,0,0,1,0,
		0,0,1,0,0,
		0,0,1,0,0,
		0,1,0,0,0
	},
	{	//'~',		// 94 -> ~
		0,0,0,0,0,
		0,0,0,0,0,
		0,1,0,1,0,
		1,0,1,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0
	}
};

