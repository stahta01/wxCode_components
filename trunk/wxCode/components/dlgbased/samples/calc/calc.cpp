/////////////////////////////////////////////////////////////////////////////
// Name:        calc.cpp
// Purpose:     Simple wxWindows calculator (dialog based)
// Author:      Marco Ghislanzoni
// Modified by:
// Created:     11/02/1999
// RCS-ID:
// Copyright:   (c) Marco Ghislanzoni
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////

// *****************************************************************
// NOTE: This version of the calculator works with just two decimals
// *****************************************************************

// ============================================================================
// declarations
// ============================================================================

// ----------------------------------------------------------------------------
// headers
// ----------------------------------------------------------------------------

// for strtod conversion
#define __USELOCALE__ 1

#ifdef __GNUG__
    #pragma implementation "calc.cpp"
    #pragma interface "calc.cpp"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// For all others, include the necessary headers (this file is usually all you
// need because it includes almost all "standard" wxWindows headers
#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

//#include "wx/resource.h"

// define __USELOCALE__ if you have problem converting
// the strings to double using strtod because of
// your decimal point being different from '.'
#ifdef __USELOCALE__
#include <locale.h>
#endif

// ----------------------------------------------------------------------------
// ressources
// ----------------------------------------------------------------------------
// The application icon
#if defined(__WXGTK__) || defined(__WXMOTIF__)
    #include "mondrian.xpm"
#endif

// WXR file generated by DialogEd
#include "calcdlg.h"

// If you have a Windows compiler that can cope with long strings,
// then you can always use the #include form for simplicity.

// NOTE: Borland's brc32.exe resource compiler doesn't recognize
// the TEXT resource, for some reason, so either run-time file loading
// or file inclusion should be used.

#if defined(__WXMSW__)
// Under Windows, some compilers can't include
// a whole .wxr file. So we use a .rc user-defined resource
// instead. dialog1 will point to the whole .wxr 'file'.
static char *dialog1 = NULL;
#else
// Other platforms should have sensible compilers that
// cope with long strings.
#include "calcdlg.wxr"
#endif

// ----------------------------------------------------------------------------
// private classes
// ----------------------------------------------------------------------------

// Define the application
class TheApp : public wxApp
{
public:
	// Init member
    virtual bool OnInit();
};

// Define a new dialog type: this is going to be our main window
class MainDialog : public wxDialog
{
public:
    // Constructor(s)
    MainDialog();

    // Event handlers (these functions should _not_ be virtual)
    void OnQuit(wxCommandEvent& event);
	void OnNumber(wxCommandEvent& event);
	void OnOperator(wxCommandEvent& event);
	void OnClear(wxCommandEvent& event);

	// Set icon
    virtual void SetIcon(const wxIcon& icon);

	// Calculator display
	wxStaticText *txtDisplay;

private:

	// Helper function that performs
	// the four basic math operation
	double DoOperation( double a, double b, int op );

	// Last operand
	double lastOp ;
	// Operation to perform
	long int operation ;
	// Operation result
	double result ;

	// Flag to clear display after operation
	bool clearDisplay ;

	// Dialog icon
	wxIcon m_icon;
	
    DECLARE_EVENT_TABLE()
};

// ----------------------------------------------------------------------------
// constants
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// event tables and other macros for wxWindows
// ----------------------------------------------------------------------------

BEGIN_EVENT_TABLE(MainDialog, wxDialog)
	EVT_BUTTON(ID_OFF, MainDialog::OnQuit)
	EVT_BUTTON(ID_CLEAR, MainDialog::OnClear)
	EVT_COMMAND_RANGE(ID_BUTTON102, ID_BUTTON112, wxEVT_COMMAND_BUTTON_CLICKED, MainDialog::OnNumber)
	EVT_COMMAND_RANGE(ID_EQUAL, ID_DIV, wxEVT_COMMAND_BUTTON_CLICKED, MainDialog::OnOperator)
	// We have to implement this to force closing
	// the dialog when the 'x' button is pressed
	EVT_CLOSE(MainDialog::OnQuit)
END_EVENT_TABLE()

IMPLEMENT_APP(TheApp)

// ============================================================================
// implementation
// ============================================================================

// ----------------------------------------------------------------------------
// the application class
// ----------------------------------------------------------------------------

// `Main program' equivalent: the program execution "starts" here
bool TheApp::OnInit()
{
	#if defined(__WXMSW__)
	  // Load the .wxr 'file' from a .rc resource, under Windows.
	  dialog1 = wxLoadUserResource(wxT("dialog1"), wxT("WXRDATA"));
	  // All resources in the file (only one in this case) get parsed
	  // by this call.
	  wxResourceParseString(dialog1);
	#else
	  // Simply parse the data pointed to by the variable dialog1.
	  // If there were several resources, there would be several
	  // variables, and this would need to be called several times.
	  wxResourceParseData(dialog1);
	#endif

    // Create main dialog using default constructor
	MainDialog *dialog = new MainDialog();

	if (dialog->LoadFromResource(NULL, wxT("dialog1")))
    {

		// Set the dialog icon
		// We setup the icon here because we used the standard constructor
		// so that the dialog doesn't exist until it's loaded from the
		// resource
#ifdef __WIN95__
		dialog->SetIcon(wxICON(mondrian));
#endif

#ifdef __USELOCALE__
		// Set the locale for string to double conversion
		setlocale( LC_ALL, wxT("English"));
#endif

		// Retrieve a pointer to display control
		// The display control should display its content right
		// aligned but this option unfortunately is not present...
        dialog->txtDisplay = (wxStaticText *)wxFindWindowByName(wxT("lblDisp"), dialog);
        if (dialog->txtDisplay)
		{	
			// Set initial display value
			dialog->txtDisplay->SetLabel(wxT("0"));
		}
    }
	else
	{
		// Problems with resources
		wxMessageBox(wxT("Error loading resources!"), wxT("ERROR!"),
                            wxOK | wxICON_EXCLAMATION, NULL);
		// We return FALSE so the application stops
		return FALSE;
	}
	
	// Center the dialog
	dialog->Centre();

    // Show it and tell the application that it's our main window
    dialog->Show(TRUE);
    SetTopWindow(dialog);

    return TRUE;
}

// ----------------------------------------------------------------------------
// main dialog
// ----------------------------------------------------------------------------

// Dialog constructor
MainDialog::MainDialog() : wxDialog()
{
	lastOp = 0.0f ;
	operation = ID_PLUS;
	result = 0.0f;

	clearDisplay = FALSE;
}

// Originally a wxDialog doesn't have any method to set the
// window associated icon since this has been implemented in 
// wxFrame only.
// But in a dialog based app we want to associate an icon
// to the main window (i.e. the dialog)
// This code is the same of wxFrame::SetIcon.
void MainDialog::SetIcon(const wxIcon& icon)
{
  m_icon = icon;
#ifdef __WIN95__
  if ( m_icon.Ok() )
    SendMessage((HWND) GetHWND(), WM_SETICON,
                (WPARAM)TRUE, (LPARAM)(HICON) m_icon.GetHICON());
#endif
}


// Event handlers

void MainDialog::OnClear(wxCommandEvent& WXUNUSED(event))
{
	txtDisplay->SetLabel(wxT("0"));
	lastOp = 0.0f ;
	operation = ID_PLUS ;
	result = 0.0f ;
	return;
}

void MainDialog::OnNumber(wxCommandEvent& event)
{

	// Numeric buttons and decimal point have ids
	// sequentially defined
	// ID_BUTTON 102 is 0
	// ...
	// ID_BUTTON 111 is 9
	// ID_BUTTON 112 is .
	int id = event.GetId() - ID_BUTTON102;
	wxString display = txtDisplay->GetLabel();
	wxString add ;

	// Clear string if contains just 0
	// or clear display flag is on
	if (!display.Cmp(wxT("0")) || clearDisplay)
		display.Empty();

	// Limit string length to 12 chars
	if (display.Len() < 12)
	{
		if (id == 10)
		{
			// If the first pressed char is "."
			// then we want "0."
			if ( display.Len() == 0 )
				display = display + wxT("0") ;
			display = display + wxT(".") ;
		}
		else
		{
			// If first character entered is 0 we
			// reject it
			if ( id == 0 && display.Len() == 0 )
				display = wxT("0") ;
			else
			{
				add.Printf(wxT("%d"),id);
				display = display + add;
			}
		}

		txtDisplay->SetLabel(display);
	}
	clearDisplay = FALSE;
	return ;
}

double MainDialog::DoOperation( double a, double b, int op )
{
	switch ( op )
	{
		case ID_EQUAL : return result ;
		case ID_PLUS : return( a + b ) ;
		case ID_MINUS : return( a - b ) ;
		case ID_MULT : return( a * b ) ;
		case ID_DIV : return( a / b ) ;
	}
	return(result);
}

void MainDialog::OnOperator(wxCommandEvent& event)
{
	// When the user presses one of the operator
	// button the display content is converted
	// to a float value and stored to lastOp
	//
	// Each time the user presses one of the
	// operation buttons the current display content
	// is applied as a second operand to the first
	// operand with the operator stored in operation
	//
	// Then the result is displayed and becomes
	// lastOp
	//
	// Trick
	// -----
	// Initially the lastOp is 0 and the operator
	// is PLUS so that nothing happens but the
	// currentOp itself is redisplayed
	
	// Get display content
	wxString display = txtDisplay->GetLabel();
	double currentOp = strtod(display.c_str(),NULL);

	// Get the required operation
	int op = event.GetId() ;

	// Trap division by zero error
	if ( currentOp == 0.0f && operation == ID_DIV )
	{
		wxBell();
		txtDisplay->SetLabel(wxT("0"));
		lastOp = 0.0f ;
		operation = ID_PLUS ;
		result = 0.0f ;
		return ;
	}

	result = DoOperation( lastOp, currentOp, operation ) ;
	display.Printf(wxT("%.2f"),result);
	// Limit result length to 12 chars
	display = display.Left(12);
	txtDisplay->SetLabel(display);
	operation = op ;
	// When last operation is just equal we start from
	// 0
	if ( op != ID_EQUAL ) 
		lastOp = result ;
	else
		lastOp = 0.0f;
	clearDisplay = TRUE ;

	return ;
}

void MainDialog::OnQuit(wxCloseEvent& WXUNUSED(event))
{
	// Hide main dialog
	Show(FALSE);

	// Display (C) dialog on exit
	wxString msg;
    msg.Printf(wxT("Thanks for using Calc!\n")
		       wxT("(C) 1999 by Marco Ghislanzoni\n")
               wxT("Written using %s")
#ifdef wxBETA_NUMBER
               wxT(" (beta %d)")
#endif // wxBETA_NUMBER
               , wxVERSION_STRING
#ifdef wxBETA_NUMBER
               , wxBETA_NUMBER
#endif // wxBETA_NUMBER
              );

    wxMessageBox(msg, wxT("Calc"), wxOK | wxICON_INFORMATION, NULL);

	// NOTE Since our main window is a dialog and not
	// ---- a frame we have to close it using Destroy
	//      rather than Close. In fact Close doesn't
	//      actually close a dialog but just hides it
	//      so that the application will hang there
	//      with his only window hidden and thus unable
	//      to get any user input.
    
	// --> Don't use Close with a wxDialog,
	//     use Destry instead.
    Destroy();
}
