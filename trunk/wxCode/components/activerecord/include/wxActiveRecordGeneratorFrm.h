/////////////////////////////////////////////////////////////////////////////
// Name:        wxActiveRecordGeneratorFrm.h
// Purpose:     
// Author:      Matías Szeftel
// Modified by: 
// Created:     Fri 09 Feb 2007 00:57:26 ART
// RCS-ID:      
// Copyright:   (c) 2006 Matías Szeftel <mszeftel@yahoo.com.ar>
// Licence:     GPL (GNU Public License)
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Fri 09 Feb 2007 00:57:26 ART

#ifndef _WXACTIVERECORDGENERATORFRM_H_
#define _WXACTIVERECORDGENERATORFRM_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "wxActiveRecordGeneratorFrm.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/frame.h"
#include "wx/notebook.h"
#include "wx/listctrl.h"
#include "wx/statline.h"
////@end includes
#include "wx/xml/xml.h"
#include <wx/progdlg.h>

#include "wxActiveRecordGenerator.h"
#include "DatabaseConnectionDlg.h"
#include "RelationPropertiesDlg.h"
#include "AboutDlg.h"

/*!
 * Forward declarations
 */

////@begin forward declarations
class wxNotebook;
class wxListView;
////@end forward declarations

/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_FRAME 10000
#define ID_MAINPANEL 10001
#define ID_NBTABLES 10015
#define ID_TABLES 10040
#define ID_LVTABLES 10019
#define ID_ADDTABLE 10002
#define ID_DELETETABLE 10012
#define ID_VIEWS 10003
#define ID_LVVIEWS 10020
#define ID_ADDVIEW 10021
#define ID_DELETEVIEW 10022
#define ID_NOTEBOOK1 10032
#define ID_PROPERTIESPANEL 10027
#define ID_TCCLASSNAME 10013
#define ID_CMBIDFIELD 10014
#define ID_CHKAUTOINCR 10036
#define ID_CHKOVERWRITE 10039
#define ID_READONLY 10041
#define ID_RELATIONSPANEL 10031
#define ID_HASMANY 10006
#define ID_EDITHASMANY 10007
#define ID_DELHASMANY 10008
#define ID_LVHASMANY 10004
#define ID_BELONGSTO 10009
#define ID_EDITBELONGSTO 10010
#define ID_DELBELONGSTO 10011
#define ID_LVBELONGSTO 10005
#define ID_TCOUTPUTDIR 10034
#define ID_BTNOUTPUTDIR 10035
#define ID_CHECKBOX1 10043
#define ID_GENERATE 10018
#define ID_NEWDATABASE 10016
#define ID_LOAD 10038
#define ID_SAVE 10037
#define ID_ABOUT 10017
#define SYMBOL_WXACTIVERECORDGENERATORFRM_STYLE wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxMINIMIZE_BOX|wxMAXIMIZE_BOX|wxCLOSE_BOX
#define SYMBOL_WXACTIVERECORDGENERATORFRM_TITLE _("wxActiveRecordGenerator")
#define SYMBOL_WXACTIVERECORDGENERATORFRM_IDNAME ID_FRAME
#define SYMBOL_WXACTIVERECORDGENERATORFRM_SIZE wxSize(800, 600)
#define SYMBOL_WXACTIVERECORDGENERATORFRM_POSITION wxDefaultPosition
////@end control identifiers

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * wxActiveRecordGeneratorFrm class declaration
 */

class wxActiveRecordGeneratorFrm: public wxFrame
{    
    DECLARE_CLASS( wxActiveRecordGeneratorFrm )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    wxActiveRecordGeneratorFrm( );
    wxActiveRecordGeneratorFrm( wxWindow* parent, wxWindowID id = SYMBOL_WXACTIVERECORDGENERATORFRM_IDNAME, const wxString& caption = SYMBOL_WXACTIVERECORDGENERATORFRM_TITLE, const wxPoint& pos = SYMBOL_WXACTIVERECORDGENERATORFRM_POSITION, const wxSize& size = SYMBOL_WXACTIVERECORDGENERATORFRM_SIZE, long style = SYMBOL_WXACTIVERECORDGENERATORFRM_STYLE );

    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_WXACTIVERECORDGENERATORFRM_IDNAME, const wxString& caption = SYMBOL_WXACTIVERECORDGENERATORFRM_TITLE, const wxPoint& pos = SYMBOL_WXACTIVERECORDGENERATORFRM_POSITION, const wxSize& size = SYMBOL_WXACTIVERECORDGENERATORFRM_SIZE, long style = SYMBOL_WXACTIVERECORDGENERATORFRM_STYLE );

    /// Initialises member variables
    void Init();

    /// Creates the controls and sizers
    void CreateControls();

////@begin wxActiveRecordGeneratorFrm event handler declarations

    /// wxEVT_CLOSE_WINDOW event handler for ID_FRAME
    void OnCloseWindow( wxCloseEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_MAINPANEL
    void OnMainpanelUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED event handler for ID_NBTABLES
    void OnNbtablesPageChanged( wxNotebookEvent& event );

    /// wxEVT_COMMAND_LIST_ITEM_SELECTED event handler for ID_LVTABLES
    void OnLvtablesSelected( wxListEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ADDTABLE
    void OnAddtableClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELETETABLE
    void OnDeletetableClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_DELETETABLE
    void OnDeletetableUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_LIST_ITEM_SELECTED event handler for ID_LVVIEWS
    void OnLvviewsSelected( wxListEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ADDVIEW
    void OnAddviewClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELETEVIEW
    void OnDeleteviewClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_DELETEVIEW
    void OnDeleteviewUpdate( wxUpdateUIEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_PROPERTIESPANEL
    void OnPropertiespanelUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TCCLASSNAME
    void OnTcclassnameUpdated( wxCommandEvent& event );

    /// wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_CMBIDFIELD
    void OnCmbidfieldSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHKAUTOINCR
    void OnChkautoincrClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHKOVERWRITE
    void OnChkoverwriteClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_READONLY
    void OnReadonlyClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_HASMANY
    void OnHasmanyClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_EDITHASMANY
    void OnEdithasmanyClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_EDITHASMANY
    void OnEdithasmanyUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELHASMANY
    void OnDelhasmanyClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BELONGSTO
    void OnBelongstoClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_EDITBELONGSTO
    void OnEditbelongstoClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_EDITBELONGSTO
    void OnEditbelongstoUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELBELONGSTO
    void OnDelbelongstoClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTNOUTPUTDIR
    void OnBtnoutputdirClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GENERATE
    void OnGenerateClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_GENERATE
    void OnGenerateUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_NEWDATABASE
    void OnNewdatabaseClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_LOAD
    void OnLoadClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_SAVE
    void OnSaveClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_ABOUT
    void OnAboutClick( wxCommandEvent& event );

////@end wxActiveRecordGeneratorFrm event handler declarations

////@begin wxActiveRecordGeneratorFrm member function declarations

    DatabaseConnectionDlg* GetConnectionDlg() const { return connectionDlg ; }
    void SetConnectionDlg(DatabaseConnectionDlg* value) { connectionDlg = value ; }

    wxActiveRecordGenerator* GetActiveRecordGen() const { return activeRecordGen ; }
    void SetActiveRecordGen(wxActiveRecordGenerator* value) { activeRecordGen = value ; }

    wxArrayString GetTables() const { return m_tables ; }
    void SetTables(wxArrayString value) { m_tables = value ; }

    ArNodeHash GetNodeHash() const { return nodeHash ; }
    void SetNodeHash(ArNodeHash value) { nodeHash = value ; }

    bool GetConnected() const { return m_connected ; }
    void SetConnected(bool value) { m_connected = value ; }

    wxArrayString GetViews() const { return m_views ; }
    void SetViews(wxArrayString value) { m_views = value ; }

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end wxActiveRecordGeneratorFrm member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin wxActiveRecordGeneratorFrm member variables
    wxPanel* mainPanel;
    wxNotebook* nb_tables;
    wxListView* lv_tables;
    wxButton* btn_addTable;
    wxButton* btn_deleteTable;
    wxListView* lv_views;
    wxButton* btn_addView;
    wxButton* btn_deleteView;
    wxPanel* propertiesPanel;
    wxTextCtrl* tc_className;
    wxComboBox* cmb_idField;
    wxCheckBox* chk_autoIncr;
    wxCheckBox* chk_overwrite;
    wxCheckBox* chk_readOnly;
    wxPanel* relationsPanel;
    wxButton* btn_hasMany;
    wxButton* btn_editHasMany;
    wxButton* btn_deleteHasMany;
    wxListView* lv_hasMany;
    wxButton* btn_editBelongsTo;
    wxButton* btn_deleteBelongsTo;
    wxListView* lv_belongsTo;
    wxTextCtrl* tc_outputDir;
    wxButton* btn_outputDir;
    wxCheckBox* chk_useSrcInclude;
    wxButton* btn_generate;
    wxActiveRecordGenerator* activeRecordGen;
    wxArrayString m_tables;
    ArNodeHash nodeHash;
    wxArrayString m_views;
public:
    bool m_connected;
private:
    DatabaseConnectionDlg* connectionDlg;
////@end wxActiveRecordGeneratorFrm member variables
	wxString m_version;
	bool LoadNode(const wxString& strNode);
public:
	bool LoadOnInit(const wxString& file);
	bool LoadFromXml(const wxString& file);
	bool SaveToXml(const wxString& file);
	wxString GetVersion() const { return m_version ; }
    void SetVersion(wxString value) { 
		m_version = value ;
	}
};

#endif
    // _WXACTIVERECORDGENERATORFRM_H_
