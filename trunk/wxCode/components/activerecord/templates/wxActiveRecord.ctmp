/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v %%ARG_VERSION%%
/////////////////////////////////////////////////////

#include "%%ARNAME%%.h"

/** ACTIVE_RECORD **/
%%ARNAME%%::%%ARNAME%%():%%AR_BASE_CLASS%%(){
}

%%ARNAME%%::%%ARNAME%%(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):%%AR_BASE_CLASS%%(name,server,user,password,table){
}

%%ARNAME%%::%%ARNAME%%(DatabaseLayer* database,const wxString& table):%%AR_BASE_CLASS%%(database,table){
}

bool %%ARNAME%%::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return %%AR_BASE_CLASS%%::Create(name,server,user,password,table);
}

%%ARROWNAME%%* %%ARNAME%%::RowFromResult(DatabaseResultSet* result){
	%%ARROWNAME%%* row=new %%ARROWNAME%%(this);
	
	row->GetFromResult(result);
	
	return row;
}
////@@begin template arWrite
%%ARROWNAME%%* %%ARNAME%%::New(){
	%%ARROWNAME%%* newRow=new %%ARROWNAME%%(this);
	garbageRows.Add(newRow);
	return newRow;
}
%%DELETEIDIMPL%%
////@@end template arWrite

%%IDFIELDIMPL%%



%%ARROWNAME%%* %%ARNAME%%::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		%%ARROWNAME%%* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

%%ARROWSETNAME%%* %%ARNAME%%::WhereSet(const wxString& whereClause,const wxString& orderBy){
	%%ARROWSETNAME%%* rowSet=new %%ARROWSETNAME%%();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


%%ARROWSETNAME%%* %%ARNAME%%::All(const wxString& orderBy){
	%%ARROWSETNAME%%* rowSet=new %%ARROWSETNAME%%();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

%%ARROWNAME%%::%%ARROWNAME%%():wxActiveRecordRow(){
	newRow=true;
}

%%ARROWNAME%%::%%ARROWNAME%%(%%ARNAME%%* activeRecord):wxActiveRecordRow(activeRecord){
	newRow=true;
}

%%ARROWNAME%%::%%ARROWNAME%%(const %%ARROWNAME%%& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	m_database=src.m_database;
	m_table=src.m_table;
	
	%%COPYCONST%%
}

%%ARROWNAME%%::%%ARROWNAME%%(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

%%ARROWNAME%%& %%ARROWNAME%%::operator=(const %%ARROWNAME%%& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	m_database=src.m_database;
	m_table=src.m_table;
	
	%%COPYCONST%%

	return *this;
}

bool %%ARROWNAME%%::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
	%%GETFROMRESULT%%

	return true;
}
	
////@@begin template arRowWrite
bool %%ARROWNAME%%::Save(){
	try{
		if(newRow){
			%%INSERT%%
			
			newRow=false;
		}
		else{
			%%SAVE%%
		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

%%ROWDELETEIMPL%%
////@@end template arRowWrite

%%RELATIONSIMPL%%

/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

%%ARROWSETNAME%%::%%ARROWSETNAME%%():wxActiveRecordRowSet(){
}

%%ARROWSETNAME%%::%%ARROWSETNAME%%(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

%%ARROWSETNAME%%::%%ARROWSETNAME%%(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

%%ARROWNAME%%* %%ARROWSETNAME%%::Item(unsigned long item){
	return (%%ARROWNAME%%*)wxActiveRecordRowSet::Item(item);
}

////@@begin template arSetWrite
bool %%ARROWSETNAME%%::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}
////@@end template arSetWrite

%%CMPSIMPL%%

/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations
%%CUSTOMIMPLS%%
////@@end custom implementations
