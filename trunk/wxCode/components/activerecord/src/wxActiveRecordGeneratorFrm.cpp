/////////////////////////////////////////////////////////////////////////////
// Name:        wxActiveRecordGeneratorFrm.cpp
// Purpose:     
// Author:      Matías Szeftel
// Modified by: 
// Created:     Fri 09 Feb 2007 00:57:25 ART
// RCS-ID:      
// Copyright:   (c) 2006 Matías Szeftel <mszeftel@yahoo.com.ar>
// Licence:     GPL (GNU Public License)
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Fri 09 Feb 2007 00:57:25 ART

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "wxActiveRecordGeneratorFrm.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "../include/wxActiveRecordGeneratorFrm.h"

////@begin XPM images
////@end XPM images

/*!
 * wxActiveRecordGeneratorFrm type definition
 */

IMPLEMENT_CLASS( wxActiveRecordGeneratorFrm, wxFrame )

/*!
 * wxActiveRecordGeneratorFrm event table definition
 */

BEGIN_EVENT_TABLE( wxActiveRecordGeneratorFrm, wxFrame )

////@begin wxActiveRecordGeneratorFrm event table entries
    EVT_CLOSE( wxActiveRecordGeneratorFrm::OnCloseWindow )

    EVT_UPDATE_UI( ID_MAINPANEL, wxActiveRecordGeneratorFrm::OnMainpanelUpdate )

    EVT_NOTEBOOK_PAGE_CHANGED( ID_NBTABLES, wxActiveRecordGeneratorFrm::OnNbtablesPageChanged )

    EVT_LIST_ITEM_SELECTED( ID_LVTABLES, wxActiveRecordGeneratorFrm::OnLvtablesSelected )

    EVT_BUTTON( ID_ADDTABLE, wxActiveRecordGeneratorFrm::OnAddtableClick )

    EVT_BUTTON( ID_DELETETABLE, wxActiveRecordGeneratorFrm::OnDeletetableClick )
    EVT_UPDATE_UI( ID_DELETETABLE, wxActiveRecordGeneratorFrm::OnDeletetableUpdate )

    EVT_LIST_ITEM_SELECTED( ID_LVVIEWS, wxActiveRecordGeneratorFrm::OnLvviewsSelected )

    EVT_BUTTON( ID_ADDVIEW, wxActiveRecordGeneratorFrm::OnAddviewClick )

    EVT_BUTTON( ID_DELETEVIEW, wxActiveRecordGeneratorFrm::OnDeleteviewClick )
    EVT_UPDATE_UI( ID_DELETEVIEW, wxActiveRecordGeneratorFrm::OnDeleteviewUpdate )

    EVT_UPDATE_UI( ID_PROPERTIESPANEL, wxActiveRecordGeneratorFrm::OnPropertiespanelUpdate )

    EVT_TEXT( ID_TCCLASSNAME, wxActiveRecordGeneratorFrm::OnTcclassnameUpdated )

    EVT_COMBOBOX( ID_CMBIDFIELD, wxActiveRecordGeneratorFrm::OnCmbidfieldSelected )

    EVT_CHECKBOX( ID_CHKAUTOINCR, wxActiveRecordGeneratorFrm::OnChkautoincrClick )

    EVT_CHECKBOX( ID_CHKOVERWRITE, wxActiveRecordGeneratorFrm::OnChkoverwriteClick )

    EVT_CHECKBOX( ID_READONLY, wxActiveRecordGeneratorFrm::OnReadonlyClick )

    EVT_BUTTON( ID_HASMANY, wxActiveRecordGeneratorFrm::OnHasmanyClick )

    EVT_BUTTON( ID_EDITHASMANY, wxActiveRecordGeneratorFrm::OnEdithasmanyClick )
    EVT_UPDATE_UI( ID_EDITHASMANY, wxActiveRecordGeneratorFrm::OnEdithasmanyUpdate )

    EVT_BUTTON( ID_DELHASMANY, wxActiveRecordGeneratorFrm::OnDelhasmanyClick )

    EVT_BUTTON( ID_BELONGSTO, wxActiveRecordGeneratorFrm::OnBelongstoClick )

    EVT_BUTTON( ID_EDITBELONGSTO, wxActiveRecordGeneratorFrm::OnEditbelongstoClick )
    EVT_UPDATE_UI( ID_EDITBELONGSTO, wxActiveRecordGeneratorFrm::OnEditbelongstoUpdate )

    EVT_BUTTON( ID_DELBELONGSTO, wxActiveRecordGeneratorFrm::OnDelbelongstoClick )

    EVT_BUTTON( ID_BTNOUTPUTDIR, wxActiveRecordGeneratorFrm::OnBtnoutputdirClick )

    EVT_BUTTON( ID_GENERATE, wxActiveRecordGeneratorFrm::OnGenerateClick )
    EVT_UPDATE_UI( ID_GENERATE, wxActiveRecordGeneratorFrm::OnGenerateUpdate )

    EVT_MENU( ID_NEWDATABASE, wxActiveRecordGeneratorFrm::OnNewdatabaseClick )

    EVT_MENU( ID_LOAD, wxActiveRecordGeneratorFrm::OnLoadClick )

    EVT_MENU( ID_SAVE, wxActiveRecordGeneratorFrm::OnSaveClick )

    EVT_MENU( ID_ABOUT, wxActiveRecordGeneratorFrm::OnAboutClick )

////@end wxActiveRecordGeneratorFrm event table entries

END_EVENT_TABLE()

/*!
 * wxActiveRecordGeneratorFrm constructors
 */

wxActiveRecordGeneratorFrm::wxActiveRecordGeneratorFrm( )
{
    Init();
}

wxActiveRecordGeneratorFrm::wxActiveRecordGeneratorFrm( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}

/*!
 * wxActiveRecordGeneratorFrm creator
 */

bool wxActiveRecordGeneratorFrm::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxActiveRecordGeneratorFrm creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    this->SetHelpText(_("Currently non available..."));
    if (ShowToolTips())
        this->SetToolTip(_("Currently non available..."));
    CreateControls();
    SetIcon(GetIconResource(wxT("img/wxarg.ico")));
    Centre();
////@end wxActiveRecordGeneratorFrm creation
    return true;
}

/*!
 * Member initialisation 
 */

void wxActiveRecordGeneratorFrm::Init()
{
////@begin wxActiveRecordGeneratorFrm member initialisation
    mainPanel = NULL;
    nb_tables = NULL;
    lv_tables = NULL;
    btn_addTable = NULL;
    btn_deleteTable = NULL;
    lv_views = NULL;
    btn_addView = NULL;
    btn_deleteView = NULL;
    propertiesPanel = NULL;
    tc_className = NULL;
    cmb_idField = NULL;
    chk_autoIncr = NULL;
    chk_overwrite = NULL;
    chk_readOnly = NULL;
    relationsPanel = NULL;
    btn_hasMany = NULL;
    btn_editHasMany = NULL;
    btn_deleteHasMany = NULL;
    lv_hasMany = NULL;
    btn_editBelongsTo = NULL;
    btn_deleteBelongsTo = NULL;
    lv_belongsTo = NULL;
    tc_outputDir = NULL;
    btn_outputDir = NULL;
    chk_useSrcInclude = NULL;
    btn_generate = NULL;
////@end wxActiveRecordGeneratorFrm member initialisation
	activeRecordGen=NULL;
}
/*!
 * Control creation for wxActiveRecordGeneratorFrm
 */

void wxActiveRecordGeneratorFrm::CreateControls()
{    
////@begin wxActiveRecordGeneratorFrm content construction
    wxActiveRecordGeneratorFrm* itemFrame1 = this;

    wxMenuBar* menuBar = new wxMenuBar;
    wxMenu* itemMenu59 = new wxMenu;
    itemMenu59->Append(ID_NEWDATABASE, _("Connect to database\tCtrl+N"), _T(""), wxITEM_NORMAL);
    itemMenu59->Append(ID_LOAD, _("Load\tCtrl+O"), _T(""), wxITEM_NORMAL);
    itemMenu59->Append(ID_SAVE, _("Save\tCtrl+S"), _T(""), wxITEM_NORMAL);
    menuBar->Append(itemMenu59, _("&File"));
    wxMenu* itemMenu63 = new wxMenu;
    itemMenu63->Append(ID_ABOUT, _("About"), _T(""), wxITEM_NORMAL);
    menuBar->Append(itemMenu63, _("&Help"));
    itemFrame1->SetMenuBar(menuBar);

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    itemFrame1->SetSizer(itemBoxSizer2);

    mainPanel = new wxPanel( itemFrame1, ID_MAINPANEL, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    itemBoxSizer2->Add(mainPanel, 1, wxGROW|wxALL, 0);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    mainPanel->SetSizer(itemBoxSizer4);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer5, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer5->Add(itemBoxSizer6, 1, wxGROW|wxALL, 0);

    nb_tables = new wxNotebook( mainPanel, ID_NBTABLES, wxDefaultPosition, wxDefaultSize, wxNB_DEFAULT|wxNB_TOP );

    wxPanel* itemPanel8 = new wxPanel( nb_tables, ID_TABLES, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxVERTICAL);
    itemPanel8->SetSizer(itemBoxSizer9);

    lv_tables = new wxListView( itemPanel8, ID_LVTABLES, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT|wxLC_SINGLE_SEL );
    itemBoxSizer9->Add(lv_tables, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer9->Add(itemBoxSizer11, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    btn_addTable = new wxButton( itemPanel8, ID_ADDTABLE, _("Add"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(btn_addTable, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_deleteTable = new wxButton( itemPanel8, ID_DELETETABLE, _("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(btn_deleteTable, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    nb_tables->AddPage(itemPanel8, _("Tables"));

    wxPanel* itemPanel14 = new wxPanel( nb_tables, ID_VIEWS, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxVERTICAL);
    itemPanel14->SetSizer(itemBoxSizer15);

    lv_views = new wxListView( itemPanel14, ID_LVVIEWS, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT|wxLC_SINGLE_SEL );
    itemBoxSizer15->Add(lv_views, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer17 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer15->Add(itemBoxSizer17, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    btn_addView = new wxButton( itemPanel14, ID_ADDVIEW, _("Add"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer17->Add(btn_addView, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_deleteView = new wxButton( itemPanel14, ID_DELETEVIEW, _("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer17->Add(btn_deleteView, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    nb_tables->AddPage(itemPanel14, _("Views"));

    itemBoxSizer6->Add(nb_tables, 1, wxGROW|wxRIGHT|wxTOP|wxBOTTOM, 0);

    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer5->Add(itemBoxSizer20, 2, wxGROW|wxALL, 0);

    wxNotebook* itemNotebook21 = new wxNotebook( mainPanel, ID_NOTEBOOK1, wxDefaultPosition, wxDefaultSize, wxNB_DEFAULT|wxNB_TOP );

    propertiesPanel = new wxPanel( itemNotebook21, ID_PROPERTIESPANEL, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer23 = new wxBoxSizer(wxVERTICAL);
    propertiesPanel->SetSizer(itemBoxSizer23);

    wxBoxSizer* itemBoxSizer24 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer23->Add(itemBoxSizer24, 0, wxGROW|wxALL, 5);
    wxStaticText* itemStaticText25 = new wxStaticText( propertiesPanel, wxID_STATIC, _("Class Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(itemStaticText25, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    tc_className = new wxTextCtrl( propertiesPanel, ID_TCCLASSNAME, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(tc_className, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer27 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer23->Add(itemBoxSizer27, 0, wxGROW|wxALL, 5);
    wxStaticText* itemStaticText28 = new wxStaticText( propertiesPanel, wxID_STATIC, _("ID field:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer27->Add(itemStaticText28, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    wxArrayString cmb_idFieldStrings;
    cmb_idField = new wxComboBox( propertiesPanel, ID_CMBIDFIELD, _T(""), wxDefaultPosition, wxDefaultSize, cmb_idFieldStrings, wxCB_READONLY );
    itemBoxSizer27->Add(cmb_idField, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    chk_autoIncr = new wxCheckBox( propertiesPanel, ID_CHKAUTOINCR, _("Has auto_increment or serial type (won't be used in INSERT)"), wxDefaultPosition, wxDefaultSize, 0 );
    chk_autoIncr->SetValue(true);
    itemBoxSizer27->Add(chk_autoIncr, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer31 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer23->Add(itemBoxSizer31, 0, wxGROW|wxALL, 5);
    chk_overwrite = new wxCheckBox( propertiesPanel, ID_CHKOVERWRITE, _("Overwrite (delete custom stuff)"), wxDefaultPosition, wxDefaultSize, 0 );
    chk_overwrite->SetValue(false);
    chk_overwrite->Enable(false);
    itemBoxSizer31->Add(chk_overwrite, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    chk_readOnly = new wxCheckBox( propertiesPanel, ID_READONLY, _("Read-only (default for views)"), wxDefaultPosition, wxDefaultSize, 0 );
    chk_readOnly->SetValue(false);
    itemBoxSizer31->Add(chk_readOnly, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemNotebook21->AddPage(propertiesPanel, _("Properties"));

    relationsPanel = new wxPanel( itemNotebook21, ID_RELATIONSPANEL, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer35 = new wxBoxSizer(wxVERTICAL);
    relationsPanel->SetSizer(itemBoxSizer35);

    wxBoxSizer* itemBoxSizer36 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer35->Add(itemBoxSizer36, 0, wxGROW|wxALL, 5);
    btn_hasMany = new wxButton( relationsPanel, ID_HASMANY, _("Has Many"), wxDefaultPosition, wxSize(65, -1), 0 );
    itemBoxSizer36->Add(btn_hasMany, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer36->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_editHasMany = new wxButton( relationsPanel, ID_EDITHASMANY, _("Edit"), wxDefaultPosition, wxSize(45, -1), 0 );
    btn_editHasMany->SetDefault();
    itemBoxSizer36->Add(btn_editHasMany, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_deleteHasMany = new wxButton( relationsPanel, ID_DELHASMANY, _("Delete"), wxDefaultPosition, wxSize(45, -1), 0 );
    itemBoxSizer36->Add(btn_deleteHasMany, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer41 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer35->Add(itemBoxSizer41, 1, wxGROW|wxALL, 5);
    lv_hasMany = new wxListView( relationsPanel, ID_LVHASMANY, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_HRULES|wxLC_VRULES );
    itemBoxSizer41->Add(lv_hasMany, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer43 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer35->Add(itemBoxSizer43, 0, wxGROW|wxALL, 0);
    wxStaticLine* itemStaticLine44 = new wxStaticLine( relationsPanel, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer43->Add(itemStaticLine44, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer45 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer35->Add(itemBoxSizer45, 0, wxGROW|wxALL, 5);
    wxButton* itemButton46 = new wxButton( relationsPanel, ID_BELONGSTO, _("Belongs To"), wxDefaultPosition, wxSize(65, -1), 0 );
    itemBoxSizer45->Add(itemButton46, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer45->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_editBelongsTo = new wxButton( relationsPanel, ID_EDITBELONGSTO, _("Edit"), wxDefaultPosition, wxSize(45, -1), 0 );
    itemBoxSizer45->Add(btn_editBelongsTo, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_deleteBelongsTo = new wxButton( relationsPanel, ID_DELBELONGSTO, _("Delete"), wxDefaultPosition, wxSize(45, -1), 0 );
    itemBoxSizer45->Add(btn_deleteBelongsTo, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer50 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer35->Add(itemBoxSizer50, 1, wxGROW|wxALL, 5);
    lv_belongsTo = new wxListView( relationsPanel, ID_LVBELONGSTO, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_HRULES|wxLC_VRULES );
    itemBoxSizer50->Add(lv_belongsTo, 1, wxGROW|wxALL, 5);

    itemNotebook21->AddPage(relationsPanel, _("Relations"));

    itemBoxSizer20->Add(itemNotebook21, 1, wxGROW|wxALL, 0);

    wxBoxSizer* itemBoxSizer52 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer52, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText53 = new wxStaticText( mainPanel, wxID_STATIC, _("Output Dir:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer52->Add(itemStaticText53, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    tc_outputDir = new wxTextCtrl( mainPanel, ID_TCOUTPUTDIR, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer52->Add(tc_outputDir, 2, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_outputDir = new wxButton( mainPanel, ID_BTNOUTPUTDIR, _("..."), wxDefaultPosition, wxSize(20, -1), 0 );
    itemBoxSizer52->Add(btn_outputDir, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    chk_useSrcInclude = new wxCheckBox( mainPanel, ID_CHECKBOX1, _("Use src/include dirs."), wxDefaultPosition, wxDefaultSize, 0 );
    chk_useSrcInclude->SetValue(false);
    itemBoxSizer52->Add(chk_useSrcInclude, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    btn_generate = new wxButton( mainPanel, ID_GENERATE, _("Generate"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer52->Add(btn_generate, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end wxActiveRecordGeneratorFrm content construction
	lv_tables->InsertColumn(0,wxT("Table name"));
	lv_tables->SetColumnWidth(0,220);
	lv_views->InsertColumn(0,wxT("View name"));
	lv_views->SetColumnWidth(0,220);

	lv_belongsTo->InsertColumn(0,wxT("Table"));
	lv_belongsTo->InsertColumn(1,wxT("Item name"));
	lv_belongsTo->InsertColumn(2,wxT("Foreign ID"));
	lv_belongsTo->InsertColumn(3,wxT("Class name"));

	lv_hasMany->InsertColumn(0,wxT("Table"));
	lv_hasMany->InsertColumn(1,wxT("Item name"));
	lv_hasMany->InsertColumn(2,wxT("Foreign ID"));
	lv_hasMany->InsertColumn(3,wxT("Class name"));

	lv_hasMany->SetColumnWidth(0,115);
	lv_hasMany->SetColumnWidth(1,115);
	lv_hasMany->SetColumnWidth(2,115);
	lv_hasMany->SetColumnWidth(3,115);

	lv_belongsTo->SetColumnWidth(0,115);
	lv_belongsTo->SetColumnWidth(1,115);
	lv_belongsTo->SetColumnWidth(2,115);
	lv_belongsTo->SetColumnWidth(3,115);
	m_connected=false;
	connectionDlg=new DatabaseConnectionDlg(this);

	wxFileConfig cfg(wxT("wxARG"));
	long dbtype=-1;
	cfg.Read(wxT("/dbConfig/dbType"),&dbtype);
	wxString server=wxT("");
	cfg.Read(wxT("/dbConfig/server"),&server);
	wxString database=wxT("");
	cfg.Read(wxT("/dbConfig/database"),&database);
	wxString user=wxT("");
	cfg.Read(wxT("/dbConfig/user"),&user);

	connectionDlg->cmb_type->SetSelection(dbtype);
	connectionDlg->tc_server->SetValue(server);
	connectionDlg->tc_database->SetValue(database);
	connectionDlg->tc_user->SetValue(user);
}

/*!
 * wxEVT_CLOSE_WINDOW event handler for ID_FRAME
 */

void wxActiveRecordGeneratorFrm::OnCloseWindow( wxCloseEvent& event )
{
	if(activeRecordGen!=NULL)
		delete activeRecordGen;
	ArNodeHash::iterator it;
	for(it=nodeHash.begin();it!=nodeHash.end();++it){
		wxString str=it->first;
		arNode* toDel=nodeHash[it->first];
		delete toDel;
	}
	nodeHash.clear();

	wxFileConfig cfg(wxT("wxARG"));
	cfg.Write(wxT("/dbConfig/dbType"),connectionDlg->cmb_type->GetSelection());
	cfg.Write(wxT("/dbConfig/server"),connectionDlg->tc_server->GetValue());
	cfg.Write(wxT("/dbConfig/database"),connectionDlg->tc_database->GetValue());
	cfg.Write(wxT("/dbConfig/user"),connectionDlg->tc_user->GetValue());

////@begin wxEVT_CLOSE_WINDOW event handler for ID_FRAME in wxActiveRecordGeneratorFrm.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_CLOSE_WINDOW event handler for ID_FRAME in wxActiveRecordGeneratorFrm. 
}

/*!
 * wxEVT_UPDATE_UI event handler for ID_MAINPANEL
 */

void wxActiveRecordGeneratorFrm::OnMainpanelUpdate( wxUpdateUIEvent& event )
{	
	if(m_connected)
		mainPanel->Enable(true);
	else
		mainPanel->Enable(false);
}

/*!
 * wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED event handler for ID_NBTABLES
 */

void wxActiveRecordGeneratorFrm::OnNbtablesPageChanged( wxNotebookEvent& event )
{
	if(lv_views==NULL || lv_tables==NULL)
		return;
	if(event.GetSelection()==0){
		int index=lv_tables->GetFirstSelected();
		if(index<0)
			return;
		wxString table=lv_tables->GetItemText(index);
		LoadNode(table);
	}
	else if(event.GetSelection()==1){
		int index=lv_views->GetFirstSelected();
		if(index<0)
			return;
		wxString table=lv_views->GetItemText(index);
		LoadNode(table);
	}
}

/*!
 * wxEVT_COMMAND_LIST_ITEM_SELECTED event handler for ID_LVTABLES
 */

void wxActiveRecordGeneratorFrm::OnLvtablesSelected( wxListEvent& event )
{
	int index=lv_tables->GetFirstSelected();
	wxString table=lv_tables->GetItemText(index);
	LoadNode(table);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ADDTABLE
 */

void wxActiveRecordGeneratorFrm::OnAddtableClick( wxCommandEvent& event )
{
	wxMultiChoiceDialog dlg(this,wxT("Select the table(s)"),wxT("Tables"),m_tables);

	if(dlg.ShowModal()==wxID_OK){
		wxArrayInt selections=dlg.GetSelections();
		for(int i=selections.Count()-1;i>=0;--i){
			int index=selections[i];
			wxString a=m_tables[index];
			lv_tables->InsertItem(lv_tables->GetItemCount(),m_tables[index]);
			nodeHash[m_tables[index]]=new arNode(m_tables[index]);

		}
		lv_tables->Select(lv_tables->GetItemCount()-1);
	}
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELETETABLE
 */

void wxActiveRecordGeneratorFrm::OnDeletetableClick( wxCommandEvent& event )
{
	int index=lv_tables->GetFirstSelected();
	wxString table=lv_tables->GetItemText(index);
	arNode* toDel=nodeHash[table];
	nodeHash.erase(table);
	delete toDel;

	lv_tables->DeleteItem(index);
}

/*!
 * wxEVT_UPDATE_UI event handler for ID_DELETETABLE
 */

void wxActiveRecordGeneratorFrm::OnDeletetableUpdate( wxUpdateUIEvent& event )
{
	if(lv_tables->GetFirstSelected()<0)
		btn_deleteTable->Enable(false);
	else
		btn_deleteTable->Enable(true);
}

/*!
 * wxEVT_COMMAND_LIST_ITEM_SELECTED event handler for ID_LVVIEWS
 */

void wxActiveRecordGeneratorFrm::OnLvviewsSelected( wxListEvent& event )
{
	int index=lv_views->GetFirstSelected();
	wxString table=lv_views->GetItemText(index);
	LoadNode(table);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ADDVIEW
 */

void wxActiveRecordGeneratorFrm::OnAddviewClick( wxCommandEvent& event )
{
	wxMultiChoiceDialog dlg(this,wxT("Select the view(s)"),wxT("Views"),m_views);

	if(dlg.ShowModal()==wxID_OK){
		wxArrayInt selections=dlg.GetSelections();
		for(int i=selections.Count()-1;i>=0;--i){
			int index=selections[i];
			lv_views->InsertItem(lv_views->GetItemCount(),m_views[index]);
			arNode* toAdd=new arNode(m_views[index]);
			toAdd->m_readOnly=true;
			toAdd->m_type=wxT("view");
			nodeHash[m_views[index]]=toAdd;


		}
		lv_views->Select(lv_views->GetItemCount()-1);
	}
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELETEVIEW
 */

void wxActiveRecordGeneratorFrm::OnDeleteviewClick( wxCommandEvent& event )
{
	int index=lv_views->GetFirstSelected();
	wxString table=lv_views->GetItemText(index);
	arNode* toDel=nodeHash[table];
	nodeHash.erase(table);
	delete toDel;

	lv_views->DeleteItem(index);
}

/*!
 * wxEVT_UPDATE_UI event handler for ID_DELETEVIEW
 */

void wxActiveRecordGeneratorFrm::OnDeleteviewUpdate( wxUpdateUIEvent& event )
{
	if(lv_views->GetFirstSelected()<0)
		btn_deleteView->Enable(false);
	else
		btn_deleteView->Enable(true);
}

/*!
 * wxEVT_UPDATE_UI event handler for ID_PROPERTIESPANEL
 */

void wxActiveRecordGeneratorFrm::OnPropertiespanelUpdate( wxUpdateUIEvent& event )
{
	if(nb_tables->GetSelection()==0&&lv_tables->GetFirstSelected()<0){
		propertiesPanel->Enable(false);
		relationsPanel->Enable(false);
	}
	else if(nb_tables->GetSelection()==1&&lv_views->GetFirstSelected()<0){
		propertiesPanel->Enable(false);
		relationsPanel->Enable(false);
	}
	else{
		propertiesPanel->Enable(true);
		relationsPanel->Enable(true);
	}
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TCCLASSNAME
 */

void wxActiveRecordGeneratorFrm::OnTcclassnameUpdated( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	nodeHash[table]->m_className=tc_className->GetValue();
}

/*!
 * wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_CMBIDFIELD
 */

void wxActiveRecordGeneratorFrm::OnCmbidfieldSelected( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	nodeHash[table]->m_idField=cmb_idField->GetValue();
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHKAUTOINCR
 */

void wxActiveRecordGeneratorFrm::OnChkautoincrClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	nodeHash[table]->m_autoIncr=event.IsChecked();
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHKOVERWRITE
 */

void wxActiveRecordGeneratorFrm::OnChkoverwriteClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	nodeHash[table]->m_overwrite=event.IsChecked();
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_READONLY
 */

void wxActiveRecordGeneratorFrm::OnReadonlyClick( wxCommandEvent& event )
{
	int index;
	wxString table_view;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table_view=lv_tables->GetItemText(index);
			nodeHash[table_view]->m_readOnly=event.IsChecked();
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table_view=lv_views->GetItemText(index);
			if(!event.IsChecked()){
				wxMessageDialog dlg(this,wxT("This is a View, not a table. Not all views support insert or update.\n Are you sure you want to make this read-write?"),wxT("Warning!"),wxYES_NO);
				if(dlg.ShowModal()==wxID_NO){
					chk_readOnly->SetValue(true);
					return;
				}
			}
		}
		else
			return;
	}
	else
		return;

	nodeHash[table_view]->m_readOnly=event.IsChecked();
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_HASMANY
 */

void wxActiveRecordGeneratorFrm::OnHasmanyClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;


	RelationPropertiesDlg dlg(this);
	dlg.activeRecordGen=activeRecordGen;
	dlg.p_nodeHash=&nodeHash;
	dlg.thisTable=table;
	dlg.relation.relationType=AR_HAS_MANY;
	
	if(dlg.ShowModal()==wxID_OK){
		arRelation* rel=new arRelation(dlg.relation);

		nodeHash[table]->m_hasManyRelations.Add(rel);

		if(!nodeHash.count(rel->table)){
			wxMessageDialog askDlg(this,wxString::Format(wxT("The %s table will not be generated.\nDo you want to create this active record?"),rel->table.c_str()),wxT("Generate new active record?"),wxYES_DEFAULT|wxYES_NO|wxICON_INFORMATION);

			if(askDlg.ShowModal()==wxID_YES){

				arNode* newNode=new arNode();
				newNode->m_tableName=rel->table;
				newNode->m_className=rel->arClassName;

				nodeHash[rel->table]=newNode;
				lv_tables->InsertItem(lv_tables->GetItemCount(),rel->table);
			}
		}

		LoadNode(table);
	}
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_EDITHASMANY
 */

void wxActiveRecordGeneratorFrm::OnEdithasmanyClick( wxCommandEvent& event )
{	
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	RelationPropertiesDlg dlg(this);
	dlg.activeRecordGen=activeRecordGen;
	dlg.p_nodeHash=&nodeHash;
	dlg.thisTable=table;
	arRelation* rel=nodeHash[table]->m_hasManyRelations.Item(lv_hasMany->GetFirstSelected());
	dlg.relation=*rel;
	
	if(dlg.ShowModal()==wxID_OK){

		*rel=dlg.relation;

		if(!nodeHash.count(rel->table)){
			wxMessageDialog askDlg(this,wxString::Format(wxT("The %s table will not be generated.\nDo you wnat to create this active record?"),rel->table.c_str()),wxT("Generate new active record?"),wxYES_DEFAULT|wxYES_NO|wxICON_INFORMATION);

			if(askDlg.ShowModal()==wxID_YES){
				arNode* newNode=new arNode();
				newNode->m_tableName=rel->table;
				newNode->m_className=rel->arClassName;

				nodeHash[rel->table]=newNode;
				lv_tables->InsertItem(lv_tables->GetItemCount(),rel->table);
			}
		}

		LoadNode(table);
	}
}

/*!
 * wxEVT_UPDATE_UI event handler for ID_EDITHASMANY
 */

void wxActiveRecordGeneratorFrm::OnEdithasmanyUpdate( wxUpdateUIEvent& event )
{
	if(lv_hasMany->GetFirstSelected()<0){
		btn_editHasMany->Enable(false);
		btn_deleteHasMany->Enable(false);
	}
	else{
		btn_editHasMany->Enable(true);
		btn_deleteHasMany->Enable(true);
	}
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELHASMANY
 */

void wxActiveRecordGeneratorFrm::OnDelhasmanyClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	arRelation* rel=nodeHash[table]->m_hasManyRelations.Item(lv_hasMany->GetFirstSelected());
	delete rel;
	nodeHash[table]->m_hasManyRelations.RemoveAt(lv_hasMany->GetFirstSelected());

	LoadNode(table);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BELONGSTO
 */

void wxActiveRecordGeneratorFrm::OnBelongstoClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	RelationPropertiesDlg dlg(this);
	dlg.activeRecordGen=activeRecordGen;
	dlg.p_nodeHash=&nodeHash;
	dlg.thisTable=table;
	dlg.relation.relationType=AR_BELONGS_TO;

	if(dlg.ShowModal()==wxID_OK){
		arRelation* rel=new arRelation(dlg.relation);

		nodeHash[table]->m_belongsToRelations.Add(rel);

		if(!nodeHash.count(rel->table)){
			wxMessageDialog askDlg(this,wxString::Format(wxT("The %s table will not be generated.\nDo you wnat to create this active record?"),rel->table.c_str()),wxT("Generate new active record?"),wxYES_DEFAULT|wxYES_NO|wxICON_INFORMATION);

			if(askDlg.ShowModal()==wxID_YES){
				arNode* newNode=new arNode();
				newNode->m_tableName=rel->table;
				newNode->m_className=rel->arClassName;

				nodeHash[rel->table]=newNode;
				lv_tables->InsertItem(lv_tables->GetItemCount(),rel->table);
			}
		}

		LoadNode(table);
	}

}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_EDITBELONGSTO
 */

void wxActiveRecordGeneratorFrm::OnEditbelongstoClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	RelationPropertiesDlg dlg(this);
	dlg.activeRecordGen=activeRecordGen;
	dlg.p_nodeHash=&nodeHash;
	dlg.thisTable=table;
	arRelation* rel=nodeHash[table]->m_belongsToRelations.Item(lv_belongsTo->GetFirstSelected());
	dlg.relation=*rel;

	if(dlg.ShowModal()==wxID_OK){

		*rel=dlg.relation;

		if(!nodeHash.count(rel->table)){
			wxMessageDialog askDlg(this,wxString::Format(wxT("The %s table will not be generated.\nDo you wnat to create this active record?"),rel->table.c_str()),wxT("Generate new active record?"),wxYES_DEFAULT|wxYES_NO|wxICON_INFORMATION);

			if(askDlg.ShowModal()==wxID_YES){
				arNode* newNode=new arNode();
				newNode->m_tableName=rel->table;
				newNode->m_className=rel->arClassName;

				nodeHash[rel->table]=newNode;
				lv_tables->InsertItem(lv_tables->GetItemCount(),rel->table);
			}
		}

		LoadNode(table);
	}

}

/*!
 * wxEVT_UPDATE_UI event handler for ID_EDITBELONGSTO
 */

void wxActiveRecordGeneratorFrm::OnEditbelongstoUpdate( wxUpdateUIEvent& event )
{
	if(lv_belongsTo->GetFirstSelected()<0){
		btn_editBelongsTo->Enable(false);
		btn_deleteBelongsTo->Enable(false);
	}
	else{
		btn_editBelongsTo->Enable(true);
		btn_deleteBelongsTo->Enable(true);
	}
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DELBELONGSTO
 */

void wxActiveRecordGeneratorFrm::OnDelbelongstoClick( wxCommandEvent& event )
{
	int index;
	wxString table;
	if(nb_tables->GetSelection()==0){
		index=lv_tables->GetFirstSelected();
		if(index>-1){
			table=lv_tables->GetItemText(index);
		}
	}
	else if(nb_tables->GetSelection()==1){
		index=lv_views->GetFirstSelected();
		if(index>-1){
			table=lv_views->GetItemText(index);
		}
		else
			return;
	}
	else
		return;

	arRelation* rel=nodeHash[table]->m_belongsToRelations.Item(lv_belongsTo->GetFirstSelected());
	delete rel;
	nodeHash[table]->m_belongsToRelations.RemoveAt(lv_belongsTo->GetFirstSelected());

	LoadNode(table);

}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTNOUTPUTDIR
 */

void wxActiveRecordGeneratorFrm::OnBtnoutputdirClick( wxCommandEvent& event )
{
	wxDirDialog dlg(this,wxT("Select Output Directory"),wxT(""), wxDD_NEW_DIR_BUTTON);

	if (dlg.ShowModal() == wxID_OK)
		tc_outputDir->SetValue(dlg.GetPath());
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GENERATE
 */

void wxActiveRecordGeneratorFrm::OnGenerateClick( wxCommandEvent& event )
{
	ArNodeHash::iterator it;

	bool success=true;
	wxString ErrorMsg=wxT("");
	for(it=nodeHash.begin();it!=nodeHash.end();++it){
		arNode* node=it->second;
		wxString str=node->m_idField;
		if(node->m_idField.IsEmpty()){
			ErrorMsg+=node->m_tableName+wxT(" table has no id field defined.\n");
			success=false;
		}

	}
	if(!success){
		wxMessageBox(ErrorMsg,wxT("Id fields missing"));
		return;
	}
	
	wxFileName dirCpp = wxFileName::DirName(tc_outputDir->GetValue());
	wxFileName dirH = wxFileName::DirName(tc_outputDir->GetValue());
	
	if(chk_useSrcInclude->IsChecked()){
		dirCpp.AppendDir(wxT("src"));
		dirH.AppendDir(wxT("include"));
	}
	
	if(!dirCpp.DirExists() || !dirH.DirExists()){
		wxMessageBox(wxT("You have to create the \"src\" and \"include\" directories in the output directory"),wxT("Error"));
		return;
	}
	
	int prgMax=nodeHash.size();
	int pgrIndex=1;
	wxProgressDialog prgDlg(wxT("Generating the code"),wxT(""),prgMax,this);
	
 	for(it=nodeHash.begin();it!=nodeHash.end() && success;++it,++pgrIndex){
		prgDlg.Update(pgrIndex,(*it->second).m_tableName+wxT(" active record"));
		try{
			if(!activeRecordGen->Prepare(*it->second)){
				success=false;
				continue;
			}
			if(!activeRecordGen->GenerateH((*it->second).m_overwrite,dirH.GetPath())){
				success=false;
				continue;
			}
			if(!activeRecordGen->GenerateCpp((*it->second).m_overwrite,dirCpp.GetPath())){
				success=false;
				continue;
			}
			success=true;
		}
		catch(DatabaseLayerException& e){
			wxMessageBox(wxString::Format(wxT("%d: %s"),e.GetErrorCode(),e.GetErrorMessage().c_str()),wxT("DatabaseLayer Exception"));
			success=false;
		}
	}
	if(success){
		wxMessageBox(wxT("The code was generated!"),wxT("Success"));
		for(it=nodeHash.begin();it!=nodeHash.end();++it){
			it->second->m_overwrite=false;
		}
		int index=lv_tables->GetFirstSelected();
		if(index>-1){
			wxString table=lv_tables->GetItemText(index);
			LoadNode(table);
		}
	}
	else{
		wxMessageBox(wxT("There was a problem."),wxT("Warning"));

	}
}

/*!
 * wxEVT_UPDATE_UI event handler for ID_GENERATE
 */

void wxActiveRecordGeneratorFrm::OnGenerateUpdate( wxUpdateUIEvent& event )
{
	if(!lv_tables->GetItemCount()&&!lv_views->GetItemCount())
		btn_generate->Enable(false);
	else
		btn_generate->Enable(true);
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_NEWDATABASE
 */

void wxActiveRecordGeneratorFrm::OnNewdatabaseClick( wxCommandEvent& event )
{
	if(connectionDlg->ShowModal()==wxID_OK){
		if(activeRecordGen!=NULL)
			delete activeRecordGen;
		activeRecordGen=connectionDlg->GetActiveRecordGen();
		activeRecordGen->SetVersion(GetVersion());
		
		ArNodeHash::iterator it;
		for(it=nodeHash.begin();it!=nodeHash.end();++it){
			wxString str=it->first;
			arNode* toDel=nodeHash[it->first];
			delete toDel;
		}
		nodeHash.clear();
		lv_tables->DeleteAllItems();
		m_tables.Empty();
		m_tables=activeRecordGen->GetTables();
		lv_views->DeleteAllItems();
		m_views.Empty();
		m_views=activeRecordGen->GetViews();
		m_connected=true;
		wxCommandEvent event;
		OnAddtableClick(event);
	}
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_LOAD
 */

void wxActiveRecordGeneratorFrm::OnLoadClick( wxCommandEvent& event )
{
	wxString path;
	wxFileDialog dialog(this, wxT("Open File"), wxT(""),wxT(""),wxT("*.wxarg"), wxOPEN);
	if (dialog.ShowModal() == wxID_OK)
	{
	    path = dialog.GetPath();
	}
	else
		return;
	
	LoadFromXml(path);

	if(connectionDlg->ShowModal()==wxID_OK){
		activeRecordGen=connectionDlg->GetActiveRecordGen();
		activeRecordGen->SetVersion(GetVersion());

		m_tables.Empty();
		m_views.Empty();
		m_tables=activeRecordGen->GetTables();
		m_views=activeRecordGen->GetViews();
		m_connected=true;

	}
	else
		m_connected=false;
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_SAVE
 */

void wxActiveRecordGeneratorFrm::OnSaveClick( wxCommandEvent& event )
{
	wxString path;
	wxFileDialog dialog(this, wxT("Save File"), wxT(""),wxT(""),wxT("*.wxarg"), wxSAVE|wxOVERWRITE_PROMPT);
	if (dialog.ShowModal() == wxID_OK)
	{
	    path = dialog.GetPath();
	}
	else
		return;

	SaveToXml(path);
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_ABOUT
 */

void wxActiveRecordGeneratorFrm::OnAboutClick( wxCommandEvent& event )
{
	AboutDlg dlg(this);
	dlg.SetVersion(GetVersion());
	dlg.ShowModal();
}

/*!
 * Should we show tooltips?
 */

bool wxActiveRecordGeneratorFrm::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxActiveRecordGeneratorFrm::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxActiveRecordGeneratorFrm bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end wxActiveRecordGeneratorFrm bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxActiveRecordGeneratorFrm::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxActiveRecordGeneratorFrm icon retrieval
    wxUnusedVar(name);
    if (name == _T("img/wxarg.ico"))
    {
        wxIcon icon(_T("img/wxarg.ico"), wxBITMAP_TYPE_ICO);
        return icon;
    }
    return wxNullIcon;
////@end wxActiveRecordGeneratorFrm icon retrieval
}

bool wxActiveRecordGeneratorFrm::LoadNode(const wxString& strNode){
	if(!nodeHash.count(strNode))
		return false;

	lv_hasMany->DeleteAllItems();
	lv_belongsTo->DeleteAllItems();

	arNode* node=nodeHash[strNode];

	tc_className->SetValue(node->m_className);

	wxArrayString arrStr=activeRecordGen->GetColumns(strNode);
	cmb_idField->Clear();
	for(unsigned int i=0;i<arrStr.Count();i++)
			cmb_idField->Append(arrStr.Item(i));
	cmb_idField->SetValue(node->m_idField);
	chk_autoIncr->SetValue(node->m_autoIncr);
	chk_overwrite->SetValue(node->m_overwrite);
	chk_readOnly->SetValue(node->m_readOnly);

	for(unsigned int i=0;i<node->m_hasManyRelations.Count();i++){
		arRelation* rel=node->m_hasManyRelations.Item(i);
		int index=lv_hasMany->GetItemCount();
		lv_hasMany->InsertItem(index,rel->table);
		lv_hasMany->SetItem(index,1,rel->itemName);
		lv_hasMany->SetItem(index,2,rel->foreignId);
		lv_hasMany->SetItem(index,3,rel->arClassName);
	}
	for(unsigned int i=0;i<node->m_belongsToRelations.Count();i++){
		arRelation* rel=node->m_belongsToRelations.Item(i);
		int index=lv_belongsTo->GetItemCount();
		lv_belongsTo->InsertItem(index,rel->table);
		lv_belongsTo->SetItem(index,1,rel->itemName);
		lv_belongsTo->SetItem(index,2,rel->foreignId);
		lv_belongsTo->SetItem(index,3,rel->arClassName);
	}

	return true;
}

bool wxActiveRecordGeneratorFrm::LoadFromXml(const wxString& file){
	wxXmlDocument XMLDoc(file);
	if(!XMLDoc.IsOk()){
		wxMessageBox(wxT("Error loading ")+file,wxT("Error"));
		return false;
	}

	if(activeRecordGen!=NULL)
			delete activeRecordGen;
	m_tables.Empty();
	lv_tables->DeleteAllItems();
	lv_views->DeleteAllItems();

	ArNodeHash::iterator it;
	for(it=nodeHash.begin();it!=nodeHash.end();++it){
		wxString str=it->first;
		arNode* toDel=nodeHash[it->first];
		delete toDel;
	}
	nodeHash.clear();

	wxXmlNode* root=XMLDoc.GetRoot();

	connectionDlg->cmb_type->SetSelection(wxActiveRecordGenerator::StrToType(root->GetPropVal(wxT("type"),wxT(""))));
	connectionDlg->tc_server->SetValue(root->GetPropVal(wxT("server"),wxT("")));
	connectionDlg->tc_database->SetValue(root->GetPropVal(wxT("name"),wxT("")));
	connectionDlg->tc_user->SetValue(root->GetPropVal(wxT("user"),wxT("")));
	tc_outputDir->SetValue(root->GetPropVal(wxT("output_dir"),wxT("")));
	wxString strUseSrcInclude=root->GetPropVal(wxT("use_src_include"),wxT("false"));
	if(strUseSrcInclude.CmpNoCase(wxT("false"))==0)
		chk_useSrcInclude->SetValue(false);
	else
		chk_useSrcInclude->SetValue(true);

	wxXmlNode* tableNodes=root->GetChildren();

	while(tableNodes){
		arNode* toAdd=new arNode();

		toAdd->m_tableName=tableNodes->GetPropVal(wxT("table"),wxT(""));
		toAdd->m_type=tableNodes->GetPropVal(wxT("type"),wxT("table"));
		toAdd->m_className=tableNodes->GetPropVal(wxT("class"),wxT(""));
		toAdd->m_idField=tableNodes->GetPropVal(wxT("id_field"),wxT("id"));
		wxString autoIncr=tableNodes->GetPropVal(wxT("auto_incr"),wxT("true"));
		if(autoIncr.CmpNoCase(wxT("false"))==0)
			toAdd->m_autoIncr=false;
		else
			toAdd->m_autoIncr=true;
		wxString readOnly=tableNodes->GetPropVal(wxT("read_only"),wxT("true"));
		if(readOnly.CmpNoCase(wxT("false"))==0)
			toAdd->m_readOnly=false;
		else
			toAdd->m_readOnly=true;

		wxXmlNode* relNodes=tableNodes->GetChildren();
		while(relNodes){

			wxString relType;
			relType=relNodes->GetPropVal(wxT("type"),wxT(""));
			arRelation* rel=new arRelation();
			if(relType.CmpNoCase(wxT("belongs_to"))==0){
				rel->relationType=AR_BELONGS_TO;
				rel->itemName=relNodes->GetPropVal(wxT("item"),wxT(""));
				rel->table=relNodes->GetPropVal(wxT("table"),wxT(""));
				rel->foreignId=relNodes->GetPropVal(wxT("foreign_id"),wxT(""));
				rel->arClassName=relNodes->GetPropVal(wxT("ar_class"),wxT(""));
				rel->keyId=relNodes->GetPropVal(wxT("key_id"),wxT(""));

				toAdd->m_belongsToRelations.Add(rel);
			}
			else if(relType.CmpNoCase(wxT("has_many"))==0){
				rel->relationType=AR_HAS_MANY;

				rel->itemName=relNodes->GetPropVal(wxT("item"),wxT(""));
				rel->table=relNodes->GetPropVal(wxT("table"),wxT(""));
				rel->foreignId=relNodes->GetPropVal(wxT("foreign_id"),wxT(""));
				rel->arClassName=relNodes->GetPropVal(wxT("ar_class"),wxT(""));
				rel->keyId=relNodes->GetPropVal(wxT("key_id"),wxT(""));

				toAdd->m_hasManyRelations.Add(rel);
			}
			relNodes=relNodes->GetNext();
		}
		nodeHash[toAdd->m_tableName]=toAdd;
		if(toAdd->m_type.CmpNoCase(wxT("view"))==0)
			lv_views->InsertItem(lv_views->GetItemCount(),toAdd->m_tableName);
		else
			lv_tables->InsertItem(lv_tables->GetItemCount(),toAdd->m_tableName);

		tableNodes=tableNodes->GetNext();
	}
	return true;
	
}


bool wxActiveRecordGeneratorFrm::SaveToXml(const wxString& file){
	wxXmlDocument XMLDoc;

	wxXmlNode* root=new wxXmlNode();
	root->SetType(wxXML_ELEMENT_NODE);
	root->SetName(wxT("database"));
	root->AddProperty(wxT("type"),activeRecordGen->GetTypeStr());
	root->AddProperty(wxT("server"),connectionDlg->tc_server->GetValue());
	root->AddProperty(wxT("name"),connectionDlg->tc_database->GetValue());
	root->AddProperty(wxT("user"),connectionDlg->tc_user->GetValue());
	root->AddProperty(wxT("output_dir"),tc_outputDir->GetValue());
	if(chk_useSrcInclude->GetValue())
		root->AddProperty(wxT("use_src_include"),wxT("true"));
	else
		root->AddProperty(wxT("use_src_include"),wxT("false"));

	XMLDoc.SetRoot(root);

	ArNodeHash::iterator it;
	for(it=nodeHash.begin();it!=nodeHash.end();++it){
		arNode* node=it->second;
		wxXmlNode* table=new wxXmlNode();
		table->SetType(wxXML_ELEMENT_NODE);
		table->SetName(wxT("node"));
		table->AddProperty(wxT("type"),node->m_type);
		table->AddProperty(wxT("table"),node->m_tableName);
		table->AddProperty(wxT("class"),node->m_className);
		table->AddProperty(wxT("id_field"),node->m_idField);
		if(node->m_autoIncr)
			table->AddProperty(wxT("auto_incr"),wxT("true"));
		else
			table->AddProperty(wxT("auto_incr"),wxT("false"));
		if(node->m_readOnly)
			table->AddProperty(wxT("read_only"),wxT("true"));
		else
			table->AddProperty(wxT("read_only"),wxT("false"));


		for(long i=0;i<node->m_hasManyRelations.Count();++i){
			/*
			int relationType;
			wxString itemName;
			wxString table;
			wxString foreignId;
			wxString arClassName;
			*/
			wxXmlNode* relation=new wxXmlNode();
			relation->SetType(wxXML_ELEMENT_NODE);
			relation->SetName(wxT("relation"));

			arRelation* rel=node->m_hasManyRelations.Item(i);

			relation->AddProperty(wxT("type"),wxT("has_many"));
			relation->AddProperty(wxT("item"),rel->itemName);
			relation->AddProperty(wxT("table"),rel->table);
			relation->AddProperty(wxT("foreign_id"),rel->foreignId);
			relation->AddProperty(wxT("ar_class"),rel->arClassName);
			relation->AddProperty(wxT("key_id"),rel->keyId);

			table->AddChild(relation);
		}
		for(long i=0;i<node->m_belongsToRelations.Count();++i){
			/*
			int relationType;
			wxString itemName;
			wxString table;
			wxString foreignId;
			wxString arClassName;
			*/
			wxXmlNode* relation=new wxXmlNode();
			relation->SetType(wxXML_ELEMENT_NODE);
			relation->SetName(wxT("relation"));

			arRelation* rel=node->m_belongsToRelations.Item(i);

			relation->AddProperty(wxT("type"),wxT("belongs_to"));
			relation->AddProperty(wxT("item"),rel->itemName);
			relation->AddProperty(wxT("table"),rel->table);
			relation->AddProperty(wxT("foreign_id"),rel->foreignId);
			relation->AddProperty(wxT("ar_class"),rel->arClassName);
			relation->AddProperty(wxT("key_id"),rel->keyId);

			table->AddChild(relation);
		}
		root->AddChild(table);
	}

	XMLDoc.Save(file);

	return true;
}

bool wxActiveRecordGeneratorFrm::LoadOnInit(const wxString& file){
	if(!LoadFromXml(file))
		return false;

	if(connectionDlg->ShowModal()==wxID_OK){
		activeRecordGen=connectionDlg->GetActiveRecordGen();
		activeRecordGen->SetVersion(GetVersion());

		m_tables.Empty();
		m_views.Empty();
		m_tables=activeRecordGen->GetTables();
		m_views=activeRecordGen->GetViews();
		m_connected=true;

	}
	else
		m_connected=false;

	return true;
}
