--- include/drivers.h	Wed Sep 01 14:25:12 1999
+++ drivers.h	Wed Sep 01 14:25:03 1999
@@ -1,6 +1,9 @@
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
  * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:45  fhuebner
+ * Revision 1.1.1.1  1999/09/01 14:01:40  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.24  1996/10/08  18:37:46  furnish
@@ -266,6 +269,16 @@
 void plD_tidy_null		(PLStream *);
 void plD_state_null		(PLStream *, PLINT);
 void plD_esc_null		(PLStream *, PLINT, void *);
+
+void plD_init_wxwin		(PLStream *);
+void plD_line_wxwin		(PLStream *, short, short, short, short);
+void plD_polyline_wxwin		(PLStream *, short *, short *, PLINT);
+void plD_eop_wxwin		(PLStream *);
+void plD_bop_wxwin		(PLStream *);
+void plD_tidy_wxwin		(PLStream *);
+void plD_state_wxwin		(PLStream *, PLINT);
+void plD_esc_wxwin		(PLStream *, PLINT, void *);
+
 
 /* Prototypes for plot buffer calls. */
 
--- include/plcore.h	Wed Sep 01 14:25:12 1999
+++ plcore.h	Wed Sep 01 14:25:04 1999
@@ -1,6 +1,12 @@
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
  * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:45  fhuebner
+ * Revision 1.1.1.1  1999/09/01 14:01:40  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.2  1999/09/01 13:48:35  fhuebner
+ * #if -> #ifdef
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.30  1996/10/08  18:37:47  furnish
@@ -772,6 +778,22 @@
 	plD_tidy_null,
 	plD_state_null,
 	plD_esc_null
+    }
+#endif
+
+#ifdef PLD_wxwin
+    {
+	"wxWindows driver",
+	"wxwin",
+	0,
+	plD_init_wxwin,
+	plD_line_wxwin,
+	plD_polyline_wxwin,
+	plD_eop_wxwin,
+	plD_bop_wxwin,
+	plD_tidy_wxwin,
+	plD_state_wxwin,
+	plD_esc_wxwin
     }
 #endif
 };
--- include/plplot.h	Wed Sep 01 14:25:12 1999
+++ plplot.h	Wed Sep 01 14:25:05 1999
@@ -1,6 +1,9 @@
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
  * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:45  fhuebner
+ * Revision 1.1.1.1  1999/09/01 14:01:40  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.87  1998/12/01  20:46:15  furnish
@@ -693,8 +696,8 @@
 #define    plpage	plbop
 #define    plcol	plcol0
 #define    plcontf	plfcont
-#define	   Alloc2dGrid	plAlloc2dGrid
-#define	   Free2dGrid	plFree2dGrid
+/*  #define	   Alloc2dGrid	plAlloc2dGrid */
+/*  #define	   Free2dGrid	plFree2dGrid */
 
 #endif /* __PLSTUBS_H__ */
 
--- cf/plConfig.h.in	Wed Sep 01 14:25:10 1999
+++ plConfig.h	Wed Sep 01 14:46:06 1999
@@ -1,7 +1,14 @@
+/* plConfig.h.  Generated automatically by configure.  */
 /* -*-C-*- */
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
- * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:44  fhuebner
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+ * $Log: not supported by cvs2svn $
+ * Revision 1.2  1999/09/01 14:25:51  fhuebner
+ * changed install directories
+ *
+ * Revision 1.1.1.1  1999/09/01 14:01:40  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.9  1996/04/30  23:10:32  furnish
@@ -54,51 +61,50 @@
 #define __PLCONFIG_H__
 
 /* Define if on a POSIX.1 compliant system.  */
-#undef _POSIX_SOURCE
+#define _POSIX_SOURCE 0
 
 /* Define HAVE_UNISTD_H if unistd.h is available. */
-#undef HAVE_UNISTD_H
+#define HAVE_UNISTD_H 1
 
 /* Define if you have vfork.h.  */
-#undef HAVE_VFORK_H
+/* #undef HAVE_VFORK_H */
 
 /* Define to `int' if <sys/types.h> doesn't define.  */
-#undef pid_t
+/* #undef pid_t */
 
 /* Define to `char *' if <sys/types.h> doesn't define.  */
-#undef caddr_t
+/* #undef caddr_t */
 
 /* Define as the return type of signal handlers (int or void).  */
-#undef RETSIGTYPE
+/* #undef RETSIGTYPE */
 
 /* Define if you have the ANSI C header files.  */
-#undef STDC_HEADERS
+#define STDC_HEADERS 1
 
 /* Define vfork as fork if vfork does not work.  */
-#undef vfork
+/* #undef vfork */
 
 /* Define if popen is available.  */
-#undef HAVE_POPEN
+#define HAVE_POPEN 1
 
 /* Define if we're using a debugging malloc */
-#undef DEBUGGING_MALLOC
+/* #undef DEBUGGING_MALLOC */
 
 /* If you don't know what this is for, you shouldn't be using it */
-#undef NOBRAINDEAD
+/* #undef NOBRAINDEAD */
 
 /* Define if fgetpos/fsetpos is busted */
-#undef USE_FSEEK
+/* #undef USE_FSEEK */
 
 /* Define if [incr Tcl] is available */
-#undef HAVE_ITCL
+/* #undef HAVE_ITCL */
 
 /* Define if [incr Tk] is available */
-#undef HAVE_ITK
+/* #undef HAVE_ITK */
 
 /* Install directories. */
 
-#undef LIB_DIR
-#undef BIN_DIR
-#undef TCL_DIR
-
+#define LIB_DIR "/usr/local/plplot/lib"
+#define BIN_DIR "/usr/local/plplot/bin"
+#define TCL_DIR "/usr/local/plplot/tcl"
 #endif	/* __PLCONFIG_H__ */
--- cf/plDevs.h.in	Wed Sep 01 14:25:10 1999
+++ plDevs.h	Wed Sep 01 14:25:03 1999
@@ -1,7 +1,14 @@
+/* plDevs.h.  Generated automatically by configure.  */
 /* -*-C-*- */
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
- * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:44  fhuebner
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+ * $Log: not supported by cvs2svn $
+ * Revision 1.1.1.1  1999/09/01 14:01:40  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.2  1999/09/01 13:48:34  fhuebner
+ * #if -> #ifdef
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.6  1996/10/08  18:38:44  furnish
@@ -42,27 +49,7 @@
 #ifndef __PLDEVS_H__
 #define __PLDEVS_H__
 
-#undef PLD_plmeta
-#undef PLD_null
-#undef PLD_xterm
-#undef PLD_tek4010
-#undef PLD_tek4107
-#undef PLD_mskermit
-#undef PLD_vlt
-#undef PLD_versaterm
-#undef PLD_conex
-#undef PLD_linuxvga
-#undef PLD_dg300
-#undef PLD_ps
-#undef PLD_xfig
-#undef PLD_ljii
-#undef PLD_lj_hpgl
-#undef PLD_hp7470
-#undef PLD_hp7580
-#undef PLD_imp
-#undef PLD_xwin
-#undef PLD_tk
-#undef PLD_dp
-#undef PLD_pbm
+/* All device driver defines (except wxwin) thrown out */
+#define PLD_wxwin 1
 
 #endif	/* __PLDEVS_H__ */
E:\bin\diff.exe: bindings/c++/wxPlot.h: No such file or directory
--- bindings/c++/plstream.cc	Wed Sep 01 14:25:06 1999
+++ wxPlot.cpp	Wed Sep 01 14:25:05 1999
@@ -1,80 +1,51 @@
+
 //----------------------------------*-C++-*----------------------------------//
-// plstream.cc
-// Geoffrey Furnish
-// 21 September 1994
+// wxPlot.cc
+// Frank Huebner
+// 24 August 1998
+// Derived from plstream.cc
 //---------------------------------------------------------------------------//
-// @> Source file plstream.
 //
-// $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+// $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
 //
-// $Log: not supported by cvs2svn $
+// $Log: not supported by cvs2svn $
 // Revision 1.1.1.1  1999/09/01 14:01:41  fhuebner
 // Start of wxPlot
 //
-// Revision 1.4  1995/10/23  07:22:32  mjl
-// Added glevel() accessor.
-//
-// Revision 1.3  1995/10/16  18:22:57  mjl
-// Added support for plgdev API function in C++ bindings.
-//
-// Revision 1.2  1995/06/22  18:52:59  furnish
-// Bare pointer elimination, api collapsing, and removal of features
-// intended for use from Fortran.  Still muuuuuch work to be done on this
-// class.
-//
-// Revision 1.1  1995/05/30  07:34:46  mjl
-// Changed to a more natural naming scheme.
-//
-//
-// Old log entries (as stream.cc):
-//
-// Revision 1.5  1995/05/08  20:52:05  furnish
-// Mostly formatting improvements, but also some overloading resolutions
-// and some C++ style considerations.
-//
-// Revision 1.4  1995/03/17  07:53:17  mjl
-// Added new interface methods to the parsing functions.  Eliminated old
-// ones that were obsolete.
-//
-// Revision 1.3  1995/01/16  19:24:19  mjl
-// Fixed arglists for scmap1l and plscmap1l.
-//
-// Revision 1.2  1994/10/18  16:12:39  furnish
-// Beginnings of 2-d abstraction for contouring and shading.  Better
-// constructors.  Names for colors.  Other minor stuff.  Still need to do
-// major hacking on the 2-d abstraction, and also need to remove large
-// numbers of unnecessary methods.
+// Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
+// Start of wxPlot
 //
-// Revision 1.1  1994/10/06  07:24:47  furnish
-// New C++ wrapper around the PLplot API.  Needs much work.
 //
 //---------------------------------------------------------------------------//
 
 #include "plplot.h"
-#include "plstream.h"
+#include "wxPlot.h"
 
+#include "plstrm.h"
 #include <iostream.h>
 
+extern PLStream	*plsc;
+
 PLFLT Contourable_Data_evaluator( PLINT i, PLINT j, PLPointer p )
 {
-    const Contourable_Data& d = *(Contourable_Data *) p;
+  const Contourable_Data& d = *(Contourable_Data *) p;
 
-    return d(i,j);
+  return d(i,j);
 }
 
 void Coord_Xform_evaluator( PLFLT ox, PLFLT oy,
 			    PLFLT *nx, PLFLT *ny, PLPointer p )
 {
-    const Coord_Xformer& xf = *(Coord_Xformer *) p;
+  const Coord_Xformer& xf = *(Coord_Xformer *) p;
 
-    xf.xform( ox, oy, *nx, *ny );
+  xf.xform( ox, oy, *nx, *ny );
 }
 
 // A specific case for handling transformation defined by 2-d grid vertex
 // specification matricies.
 
 cxx_pltr2::cxx_pltr2( Coord_2d& cx, Coord_2d& cy )
-    : xg(cx), yg(cy)
+  : xg(cx), yg(cy)
 {}
 
 // Next routine copied and modified for C++ from PLPLOT 4.99d.
@@ -94,316 +65,321 @@
 
 void cxx_pltr2::xform( PLFLT x, PLFLT y, PLFLT& tx, PLFLT& ty ) const
 {
-    int nx, ny;
-    xg.elements( nx, ny );
+  int nx, ny;
+  xg.elements( nx, ny );
 
-    int ul, ur, vl, vr;
-    float du, dv;
+  int ul, ur, vl, vr;
+  float du, dv;
 
-    float xll, xlr, xrl, xrr;
-    float yll, ylr, yrl, yrr;
-    float xmin, xmax, ymin, ymax;
-
-    ul = (int) x;
-    ur = ul + 1;
-    du = x - ul;
-
-    vl = (int) y;
-    vr = vl + 1;
-    dv = y - vl;
-
-    xmin = 0;
-    xmax = nx - 1;
-    ymin = 0;
-    ymax = ny - 1;
+  float xll, xlr, xrl, xrr;
+  float yll, ylr, yrl, yrr;
+  float xmin, xmax, ymin, ymax;
+
+  ul = (int) x;
+  ur = ul + 1;
+  du = x - ul;
+
+  vl = (int) y;
+  vr = vl + 1;
+  dv = y - vl;
+
+  xmin = 0;
+  xmax = nx - 1;
+  ymin = 0;
+  ymax = ny - 1;
 
-    if (x < xmin || x > xmax || y < ymin || y > ymax) {
-	cerr << "cxx_pltr2::xform, Invalid coordinates\n";
+  if (x < xmin || x > xmax || y < ymin || y > ymax) {
+    cerr << "cxx_pltr2::xform, Invalid coordinates\n";
 	
-	if (x < xmin) {
+    if (x < xmin) {
 
-	    if (y < ymin) {
-		tx = xg(0,0);
-		ty = yg(0,0);
-	    }
-	    else if (y > ymax) {
-		tx = xg(0, ny-1);
-		ty = yg(0, ny-1);
-	    }
-	    else {
-		xll = xg(0, vl);
-		yll = yg(0, vl);
-		xlr = xg(0, vr);
-		ylr = yg(0, vr);
-
-		tx = xll * (1 - dv) + xlr * (dv);
-		ty = yll * (1 - dv) + ylr * (dv);
-	    }
-	}
-	else if (x > xmax) {
-
-	    if (y < ymin) {
-		tx = xg(nx-1, 0);
-		ty = yg(nx-1, 0);
-	    }
-	    else if (y > ymax) {
-		tx = xg(nx-1, ny-1);
-		ty = yg(nx-1, ny-1);
-	    }
-	    else {
-		xll = xg(nx-1, vl);
-		yll = yg(nx-1, vl);
-		xlr = xg(nx-1, vr);
-		ylr = yg(nx-1, vr);
-
-		tx = xll * (1 - dv) + xlr * (dv);
-		ty = yll * (1 - dv) + ylr * (dv);
-	    }
-	}
-	else {
-	    if (y < ymin) {
-		xll = xg(ul, 0);
-		xrl = xg(ur, 0);
-		yll = yg(ul, 0);
-		yrl = yg(ur, 0);
-
-		tx = xll * (1 - du) + xrl * (du);
-		ty = yll * (1 - du) + yrl * (du);
-	    }
-	    else if (y > ymax) {
-		xlr = xg(ul, ny-1);
-		xrr = xg(ur, ny-1);
-		ylr = yg(ul, ny-1);
-		yrr = yg(ur, ny-1);
-
-		tx = xlr * (1 - du) + xrr * (du);
-		ty = ylr * (1 - du) + yrr * (du);
-	    }
-	}
+      if (y < ymin) {
+	tx = xg(0,0);
+	ty = yg(0,0);
+      }
+      else if (y > ymax) {
+	tx = xg(0, ny-1);
+	ty = yg(0, ny-1);
+      }
+      else {
+	xll = xg(0, vl);
+	yll = yg(0, vl);
+	xlr = xg(0, vr);
+	ylr = yg(0, vr);
+
+	tx = xll * (1 - dv) + xlr * (dv);
+	ty = yll * (1 - dv) + ylr * (dv);
+      }
     }
+    else if (x > xmax) {
 
-/* Normal case.
-   Look up coordinates in row-dominant array.
-   Have to handle right boundary specially -- if at the edge, we'd
-   better not reference the out of bounds point. */
-
+      if (y < ymin) {
+	tx = xg(nx-1, 0);
+	ty = yg(nx-1, 0);
+      }
+      else if (y > ymax) {
+	tx = xg(nx-1, ny-1);
+	ty = yg(nx-1, ny-1);
+      }
+      else {
+	xll = xg(nx-1, vl);
+	yll = yg(nx-1, vl);
+	xlr = xg(nx-1, vr);
+	ylr = yg(nx-1, vr);
+
+	tx = xll * (1 - dv) + xlr * (dv);
+	ty = yll * (1 - dv) + ylr * (dv);
+      }
+    }
     else {
+      if (y < ymin) {
+	xll = xg(ul, 0);
+	xrl = xg(ur, 0);
+	yll = yg(ul, 0);
+	yrl = yg(ur, 0);
+
+	tx = xll * (1 - du) + xrl * (du);
+	ty = yll * (1 - du) + yrl * (du);
+      }
+      else if (y > ymax) {
+	xlr = xg(ul, ny-1);
+	xrr = xg(ur, ny-1);
+	ylr = yg(ul, ny-1);
+	yrr = yg(ur, ny-1);
+
+	tx = xlr * (1 - du) + xrr * (du);
+	ty = ylr * (1 - du) + yrr * (du);
+      }
+    }
+  }
 
-	xll = xg(ul, vl);
-	yll = yg(ul, vl);
+  /* Normal case.
+     Look up coordinates in row-dominant array.
+     Have to handle right boundary specially -- if at the edge, we'd
+     better not reference the out of bounds point. */
 
-/* ur is out of bounds */
+  else {
 
-	if (ur == nx && vr < ny) {
+    xll = xg(ul, vl);
+    yll = yg(ul, vl);
 
-	    xlr = xg(ul, vr);
-	    ylr = yg(ul, vr);
+    /* ur is out of bounds */
 
-	    tx = xll * (1 - dv) + xlr * (dv);
-	    ty = yll * (1 - dv) + ylr * (dv);
-	}
+    if (ur == nx && vr < ny) {
 
-/* vr is out of bounds */
+      xlr = xg(ul, vr);
+      ylr = yg(ul, vr);
 
-	else if (ur < nx && vr == ny) {
+      tx = xll * (1 - dv) + xlr * (dv);
+      ty = yll * (1 - dv) + ylr * (dv);
+    }
+
+    /* vr is out of bounds */
 
-	    xrl = xg(ur, vl);
-	    yrl = yg(ur, vl);
+    else if (ur < nx && vr == ny) {
 
-	    tx = xll * (1 - du) + xrl * (du);
-	    ty = yll * (1 - du) + yrl * (du);
-	}
+      xrl = xg(ur, vl);
+      yrl = yg(ur, vl);
 
-/* both ur and vr are out of bounds */
+      tx = xll * (1 - du) + xrl * (du);
+      ty = yll * (1 - du) + yrl * (du);
+    }
 
-	else if (ur == nx && vr == ny) {
+    /* both ur and vr are out of bounds */
 
-	    tx = xll;
-	    ty = yll;
-	}
+    else if (ur == nx && vr == ny) {
 
-/* everything in bounds */
+      tx = xll;
+      ty = yll;
+    }
 
-	else {
+    /* everything in bounds */
 
-	    xrl = xg(ur, vl);
-	    xlr = xg(ul, vr);
-	    xrr = xg(ur, vr);
+    else {
 
-	    yrl = yg(ur, vl);
-	    ylr = yg(ul, vr);
-	    yrr = yg(ur, vr);
+      xrl = xg(ur, vl);
+      xlr = xg(ul, vr);
+      xrr = xg(ur, vr);
+
+      yrl = yg(ur, vl);
+      ylr = yg(ul, vr);
+      yrr = yg(ur, vr);
 
-	    tx = xll * (1 - du) * (1 - dv) + xlr * (1 - du) * (dv) +
-		xrl * (du) * (1 - dv) + xrr * (du) * (dv);
+      tx = xll * (1 - du) * (1 - dv) + xlr * (1 - du) * (dv) +
+	xrl * (du) * (1 - dv) + xrr * (du) * (dv);
 
-	    ty = yll * (1 - du) * (1 - dv) + ylr * (1 - du) * (dv) +
-		yrl * (du) * (1 - dv) + yrr * (du) * (dv);
-	}
+      ty = yll * (1 - du) * (1 - dv) + ylr * (1 - du) * (dv) +
+	yrl * (du) * (1 - dv) + yrr * (du) * (dv);
     }
+  }
 }
 
-int plstream::next_stream = 0;
-int plstream::active_streams = 0;
+int wxPlot::next_stream = 0;
+int wxPlot::active_streams = 0;
 
-plstream::plstream()
+wxPlot::wxPlot(wxDC *dc, int w, int h)
 {
-    ::c_plinit();
-    ::c_plgstrm( &stream );
+  //  wxplot_init(dc);
+  plsdev("wxwin");
+  plsc->dc =dc;
+  plsc->xlength=w;
+  plsc->ylength=h;
+  ::c_plinit();
+  ::c_plgstrm(&stream);
 }
 
-plstream::plstream( PLS::stream_id sid, int strm /*=0*/ )
-{
-    switch(sid) {
-    case PLS::Next:
-//	throw( "plstream ctor option not implemented." );
-	break;
+//  wxPlot::wxPlot( PLS::stream_id sid, int strm /*=0*/ )
+//  {
+//      switch(sid) {
+//      case PLS::Next:
+//  //	throw( "wxPlot ctor option not implemented." );
+//  	break;
 
-    case PLS::Current:
-	::c_plgstrm( &stream );
-	break;
+//      case PLS::Current:
+//  	::c_plgstrm( &stream );
+//  	break;
 
-    case PLS::Specific:
-	stream = strm;
-	break;
+//      case PLS::Specific:
+//  	stream = strm;
+//  	break;
 
-    default:
-//	throw( "plstream ctor option not implemented." );
-	break;
-    }
-}
+//      default:
+//  //	throw( "wxPlot ctor option not implemented." );
+//  	break;
+//      }
+//  }
 
-plstream::plstream( int nx, int ny, const char *driver )
-{
-    ::c_plsstrm(next_stream++);
+//  wxPlot::wxPlot( int nx, int ny, const char *driver )
+//  {
+//      ::c_plsstrm(next_stream++);
 
-    if (driver)
-	::c_plsdev(driver);
-    ::c_plssub( nx, ny );
-    ::c_plinit();
+//      if (driver)
+//  	::c_plsdev(driver);
+//      ::c_plssub( nx, ny );
+//      ::c_plinit();
 
-    ::c_plgstrm( &stream );
+//      ::c_plgstrm( &stream );
 
-    active_streams++;
-}
+//      active_streams++;
+//  }
 
-plstream::~plstream()
+wxPlot::~wxPlot()
 {
-    ::c_plsstrm(stream);
-    ::c_plend1();
+  ::c_plsstrm(stream);
+  ::c_plend1();
 
-    active_streams--;
-    if (!active_streams)
-	::c_plend();
+  active_streams--;
+  if (!active_streams)
+    ::c_plend();
 }
 
-#define BONZAI { throw "plstream method not implemented."; }
+#define BONZAI { throw "wxPlot method not implemented."; }
 
-	/* C routines callable from stub routines come first */
+/* C routines callable from stub routines come first */
 
 // Advance to subpage "page", or to the next one if "page" = 0.
 
 void
-plstream::adv( PLINT page )
+wxPlot::adv( PLINT page )
 {
-    set_stream();
+  set_stream();
 
-    pladv(page);
+  pladv(page);
 }
 
 // This functions similarly to plbox() except that the origin of the axes is
 // placed at the user-specified point (x0, y0).
 
 void
-plstream::axes( PLFLT x0, PLFLT y0, const char *xopt, PLFLT xtick, PLINT nxsub,
-		const char *yopt, PLFLT ytick, PLINT nysub )
+wxPlot::axes( PLFLT x0, PLFLT y0, const char *xopt, PLFLT xtick, PLINT nxsub,
+	      const char *yopt, PLFLT ytick, PLINT nysub )
 {
-    set_stream();
+  set_stream();
 
-    plaxes( x0, y0, xopt, xtick, nxsub, yopt, ytick, nysub );
+  plaxes( x0, y0, xopt, xtick, nxsub, yopt, ytick, nysub );
 }
 
 // Plot a histogram using x to store data values and y to store frequencies.
 
-void plstream::bin( PLINT nbin, PLFLT *x, PLFLT *y, PLINT center )
+void wxPlot::bin( PLINT nbin, PLFLT *x, PLFLT *y, PLINT center )
 {
-    set_stream();
+  set_stream();
 
-    plbin(nbin, x, y, center);
+  plbin(nbin, x, y, center);
 }
 
 // Start new page.  Should only be used with pleop().
 
-void plstream::bop()
+void wxPlot::bop()
 {
-    set_stream();
+  set_stream();
 
-    plbop();
+  plbop();
 }
 
 // This draws a box around the current viewport.
 
-void plstream::box( const char *xopt, PLFLT xtick, PLINT nxsub,
-		    const char *yopt, PLFLT ytick, PLINT nysub )
+void wxPlot::box( const char *xopt, PLFLT xtick, PLINT nxsub,
+		  const char *yopt, PLFLT ytick, PLINT nysub )
 {
-    set_stream();
+  set_stream();
 
-    plbox( xopt, xtick, nxsub, yopt, ytick, nysub );
+  plbox( xopt, xtick, nxsub, yopt, ytick, nysub );
 }
 
 // This is the 3-d analogue of plbox().
 
 void
-plstream::box3( const char *xopt, const char *xlabel, PLFLT xtick, PLINT nsubx,
-		const char *yopt, const char *ylabel, PLFLT ytick, PLINT nsuby,
-		const char *zopt, const char *zlabel, PLFLT ztick, PLINT nsubz )
-{
-    set_stream();
-
-    plbox3( xopt, xlabel, xtick, nsubx,
-	    yopt, ylabel, ytick, nsuby,
-	    zopt, zlabel, ztick, nsubz );
+wxPlot::box3( const char *xopt, const char *xlabel, PLFLT xtick, PLINT nsubx,
+	      const char *yopt, const char *ylabel, PLFLT ytick, PLINT nsuby,
+	      const char *zopt, const char *zlabel, PLFLT ztick, PLINT nsubz )
+{
+  set_stream();
+
+  plbox3( xopt, xlabel, xtick, nsubx,
+	  yopt, ylabel, ytick, nsuby,
+	  zopt, zlabel, ztick, nsubz );
 }
 
 // Set color, map 0.  Argument is integer between 0 and 15.
 
-void plstream::col0( PLINT icol0 )
+void wxPlot::col0( PLINT icol0 )
 {
-    set_stream();
+  set_stream();
 
-    plcol0( icol0 );
+  plcol0( icol0 );
 }
 
 // Set the color using a descriptive name.  Replaces plcol0().
 
-void plstream::col( PLcolor c )
+void wxPlot::col( PLcolor c )
 {
-    set_stream();
+  set_stream();
 
-    plcol0( (int) c );
+  plcol0( (int) c );
 }
 
 // Set color, map 1.  Argument is a float between 0. and 1.
 
-void plstream::col( PLFLT c )
+void wxPlot::col( PLFLT c )
 {
-    set_stream();
+  set_stream();
 
-    plcol1( c );
+  plcol1( c );
 }
 
 // Draws a contour plot from data in f(nx,ny).  Is just a front-end to
 // plfcont, with a particular choice for f2eval and f2eval_data.
 
-void plstream::cont( PLFLT **f, PLINT nx, PLINT ny, PLINT kx, PLINT lx,
-		     PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
-		     void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		     PLPointer pltr_data )
+void wxPlot::cont( PLFLT **f, PLINT nx, PLINT ny, PLINT kx, PLINT lx,
+		   PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
+		   void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+		   PLPointer pltr_data )
 {
-    set_stream();
+  set_stream();
 
-    plcont( f, nx, ny, kx, lx, ky, ly, clevel, nlevel,
-	    pltr, pltr_data );
+  plcont( f, nx, ny, kx, lx, ky, ly, clevel, nlevel,
+	  pltr, pltr_data );
 }
 
 /* Draws a contour plot using the function evaluator f2eval and data stored
@@ -411,23 +387,23 @@
  * of 2d array data to be used. 
  */
 
-void plstream::fcont( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
-		      PLPointer f2eval_data,
-		      PLINT nx, PLINT ny, PLINT kx, PLINT lx,
-		      PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
-		      void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		      PLPointer pltr_data )
-{
-    set_stream();
-
-    plfcont( f2eval, f2eval_data,
-	     nx, ny, kx, lx, ky, ly, clevel, nlevel,
-	     pltr, pltr_data );
+void wxPlot::fcont( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
+		    PLPointer f2eval_data,
+		    PLINT nx, PLINT ny, PLINT kx, PLINT lx,
+		    PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
+		    void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+		    PLPointer pltr_data )
+{
+  set_stream();
+
+  plfcont( f2eval, f2eval_data,
+	   nx, ny, kx, lx, ky, ly, clevel, nlevel,
+	   pltr, pltr_data );
 }
 
 // /* Copies state parameters from the reference stream to the current stream. */
 
-// void plstream::cpstrm( PLINT iplsr, PLINT flags )
+// void wxPlot::cpstrm( PLINT iplsr, PLINT flags )
 // {
 //     set_stream();
 
@@ -437,29 +413,29 @@
 // Converts input values from relative device coordinates to relative plot
 // coordinates.
 
-void plstream::did2pc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax )
+void wxPlot::did2pc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax )
 {
-    set_stream();
+  set_stream();
 
-    pldid2pc( &xmin, &ymin, &xmax, &ymax );
+  pldid2pc( &xmin, &ymin, &xmax, &ymax );
 }
 
 // Converts input values from relative plot coordinates to relative device
 // coordinates.
 
-void plstream::dip2dc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax )
+void wxPlot::dip2dc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax )
 {
-    set_stream();
+  set_stream();
 
-    pldip2dc( &xmin, &ymin, &xmax, &ymax );
+  pldip2dc( &xmin, &ymin, &xmax, &ymax );
 }
 
 // These shouldn't be needed, are supposed to be handled by ctor/dtor
-// semantics of the plstream object.
+// semantics of the wxPlot object.
 
 // /* End a plotting session for all open streams. */
 
-// void plstream::end()
+// void wxPlot::end()
 // {
 //     set_stream();
 
@@ -468,7 +444,7 @@
 
 // /* End a plotting session for the current stream only. */
 
-// void plstream::end1()
+// void wxPlot::end1()
 // {
 //     set_stream();
 
@@ -477,201 +453,201 @@
 
 // Simple interface for defining viewport and window.
 
-void plstream::env( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
-		    PLINT just, PLINT axis )
+void wxPlot::env( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
+		  PLINT just, PLINT axis )
 {
-    set_stream();
+  set_stream();
 
-    plenv(xmin, xmax, ymin, ymax, just, axis);
+  plenv(xmin, xmax, ymin, ymax, just, axis);
 }
 
 // End current page.  Should only be used with plbop().
 
-void plstream::eop()
+void wxPlot::eop()
 {
-    set_stream();
+  set_stream();
 
-    pleop();
+  pleop();
 }
 
 // Plot horizontal error bars (xmin(i),y(i)) to (xmax(i),y(i)).
 
-void plstream::errx( PLINT n, PLFLT *xmin, PLFLT *xmax, PLFLT *y )
+void wxPlot::errx( PLINT n, PLFLT *xmin, PLFLT *xmax, PLFLT *y )
 {
-    set_stream();
+  set_stream();
 
-    plerrx(n, xmin, xmax, y);
+  plerrx(n, xmin, xmax, y);
 }
 
 // Plot vertical error bars (x,ymin(i)) to (x(i),ymax(i)).
 
-void plstream::erry( PLINT n, PLFLT *x, PLFLT *ymin, PLFLT *ymax )
+void wxPlot::erry( PLINT n, PLFLT *x, PLFLT *ymin, PLFLT *ymax )
 {
-    set_stream();
+  set_stream();
 
-    plerry(n, x, ymin, ymax);
+  plerry(n, x, ymin, ymax);
 }
 
 // Advance to the next family file on the next new page.
 
-void plstream::famadv()
+void wxPlot::famadv()
 {
-    set_stream();
+  set_stream();
 
-    plfamadv();
+  plfamadv();
 }
 
 // Pattern fills the polygon bounded by the input points.
 
-void plstream::fill( PLINT n, PLFLT *x, PLFLT *y )
+void wxPlot::fill( PLINT n, PLFLT *x, PLFLT *y )
 {
-    set_stream();
+  set_stream();
 
-    plfill(n, x, y);
+  plfill(n, x, y);
 }
 
 // Flushes the output stream.  Use sparingly, if at all.
 
-void plstream::plflush()
+void wxPlot::plflush()
 {
-    set_stream();
+  set_stream();
 
-    ::c_plflush();
+  ::c_plflush();
 }
 
 // Sets the global font flag to 'ifont'.
 
-void plstream::font( PLINT ifont )
+void wxPlot::font( PLINT ifont )
 {
-    set_stream();
+  set_stream();
 
-    plfont(ifont);
+  plfont(ifont);
 }
 
 // Load specified font set.
 
-void plstream::fontld( PLINT fnt )
+void wxPlot::fontld( PLINT fnt )
 {
-    set_stream();
+  set_stream();
 
-    plfontld(fnt);
+  plfontld(fnt);
 }
 
 // Get character default height and current (scaled) height.
 
-void plstream::gchr( PLFLT& p_def, PLFLT& p_ht )
+void wxPlot::gchr( PLFLT& p_def, PLFLT& p_ht )
 {
-    set_stream();
+  set_stream();
 
-    plgchr( &p_def, &p_ht );
+  plgchr( &p_def, &p_ht );
 }
 
 // Returns 8 bit RGB values for given color from color map 0.
 
-void plstream::gcol0( PLINT icol0, PLINT& r, PLINT& g, PLINT& b )
+void wxPlot::gcol0( PLINT icol0, PLINT& r, PLINT& g, PLINT& b )
 {
-    set_stream();
+  set_stream();
 
-    plgcol0( icol0, &r, &g, &b );
+  plgcol0( icol0, &r, &g, &b );
 }
 
 // Returns the background color by 8 bit RGB value/
 
-void plstream::gcolbg( PLINT& r, PLINT& g, PLINT& b )
+void wxPlot::gcolbg( PLINT& r, PLINT& g, PLINT& b )
 {
-    set_stream();
+  set_stream();
 
-    plgcolbg( &r, &g, &b );
+  plgcolbg( &r, &g, &b );
 }
 
 // Retrieve current window into device space.
 
-void plstream::gdidev( PLFLT& mar, PLFLT& aspect, PLFLT& jx,
-		       PLFLT& jy )
+void wxPlot::gdidev( PLFLT& mar, PLFLT& aspect, PLFLT& jx,
+		     PLFLT& jy )
 {
-    set_stream();
+  set_stream();
 
-    plgdidev( &mar, &aspect, &jx, &jy );
+  plgdidev( &mar, &aspect, &jx, &jy );
 }
 
 // Get plot orientation.
 
-void plstream::gdiori( PLFLT& rot )
+void wxPlot::gdiori( PLFLT& rot )
 {
-    set_stream();
+  set_stream();
 
-    plgdiori( &rot );
+  plgdiori( &rot );
 }
 
 // Retrieve current window into plot space.
 
-void plstream::gdiplt( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax )
+void wxPlot::gdiplt( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax )
 {
-    set_stream();
+  set_stream();
 
-    plgdiplt( &xmin, &ymin, &xmax, &ymax );
+  plgdiplt( &xmin, &ymin, &xmax, &ymax );
 }
 
 // Get family file parameters.
 
-void plstream::gfam( PLINT& fam, PLINT& num, PLINT& bmax )
+void wxPlot::gfam( PLINT& fam, PLINT& num, PLINT& bmax )
 {
-    set_stream();
+  set_stream();
 
-    plgfam( &fam, &num, &bmax );
+  plgfam( &fam, &num, &bmax );
 }
 
 // Get the (current) output file name.  Must be preallocated to >80 bytes.
 
-void plstream::gfnam( char *fnam )
+void wxPlot::gfnam( char *fnam )
 {
-    set_stream();
+  set_stream();
 
-    plgfnam(fnam);
+  plgfnam(fnam);
 }
 
 // Get current run level.
 
-void plstream::glevel(PLINT& level)
+void wxPlot::glevel(PLINT& level)
 {
-    set_stream();
+  set_stream();
 
-    plglevel( &level );
+  plglevel( &level );
 }
 
 // Get output device parameters.
 
-void plstream::gpage(PLFLT& xp, PLFLT& yp, PLINT& xleng, PLINT& yleng,
-		     PLINT& xoff, PLINT& yoff )
+void wxPlot::gpage(PLFLT& xp, PLFLT& yp, PLINT& xleng, PLINT& yleng,
+		   PLINT& xoff, PLINT& yoff )
 {
-    set_stream();
+  set_stream();
 
-    plgpage( &xp, &yp, &xleng, &yleng, &xoff, &yoff );
+  plgpage( &xp, &yp, &xleng, &yleng, &xoff, &yoff );
 }
 
 // Switches to graphics screen.
 
-void plstream::gra()
+void wxPlot::gra()
 {
-    set_stream();
+  set_stream();
 
-    plgra();
+  plgra();
 }
 
 // Get subpage boundaries in absolute coordinates.
 
-void plstream::gspa( PLFLT& xmin, PLFLT& xmax, PLFLT& ymin, PLFLT& ymax )
+void wxPlot::gspa( PLFLT& xmin, PLFLT& xmax, PLFLT& ymin, PLFLT& ymax )
 {
-    set_stream();
+  set_stream();
 
-    plgspa( &xmin, &xmax, &ymin, &ymax );
+  plgspa( &xmin, &xmax, &ymin, &ymax );
 }
 
 // This shouldn't be needed in this model.
 
 // /* Get current stream number. */
 
-// void plstream::gstrm( PLINT *p_strm )
+// void wxPlot::gstrm( PLINT *p_strm )
 // {
 //     set_stream();
 
@@ -680,150 +656,150 @@
 
 // Get the current library version number.
 
-void plstream::gver( char *p_ver )
+void wxPlot::gver( char *p_ver )
 {
-    set_stream();
+  set_stream();
 
-    plgver(p_ver);
+  plgver(p_ver);
 }
 
 // Get x axis labeling parameters.
 
-void plstream::gxax( PLINT& digmax, PLINT& digits )
+void wxPlot::gxax( PLINT& digmax, PLINT& digits )
 {
-    set_stream();
+  set_stream();
 
-    plgxax( &digmax, &digits );
+  plgxax( &digmax, &digits );
 }
 
 // Get y axis labeling parameters.
 
-void plstream::gyax( PLINT& digmax, PLINT& digits )
+void wxPlot::gyax( PLINT& digmax, PLINT& digits )
 {
-    set_stream();
+  set_stream();
 
-    plgyax( &digmax, &digits );
+  plgyax( &digmax, &digits );
 }
 
 /* Get z axis labeling parameters */
 
-void plstream::gzax( PLINT *p_digmax, PLINT *p_digits )
+void wxPlot::gzax( PLINT *p_digmax, PLINT *p_digits )
 {
-    set_stream();
+  set_stream();
 
-    plgzax(p_digmax, p_digits);
+  plgzax(p_digmax, p_digits);
 }
 
 /* Draws a histogram of n values of a variable in array data[0..n-1] */
 
-void plstream::hist( PLINT n, PLFLT *data, PLFLT datmin, PLFLT datmax,
-		     PLINT nbin, PLINT oldwin )
+void wxPlot::hist( PLINT n, PLFLT *data, PLFLT datmin, PLFLT datmax,
+		   PLINT nbin, PLINT oldwin )
 {
-    set_stream();
+  set_stream();
 
-    plhist(n, data, datmin, datmax, nbin, oldwin);
+  plhist(n, data, datmin, datmax, nbin, oldwin);
 }
 
 /* Set current color (map 0) by hue, lightness, and saturation. */
 
-void plstream::hls( PLFLT h, PLFLT l, PLFLT s )
+void wxPlot::hls( PLFLT h, PLFLT l, PLFLT s )
 {
-    set_stream();
+  set_stream();
 
-    plhls(h,l,s);
+  plhls(h,l,s);
 }
 
 /* Initializes PLplot, using preset or default options */
 
-void plstream::init()
+void wxPlot::init()
 {
-    set_stream();
+  set_stream();
 
-    plinit();
+  plinit();
 }
 
 /* Draws a line segment from (x1, y1) to (x2, y2). */
 
-void plstream::join( PLFLT x1, PLFLT y1, PLFLT x2, PLFLT y2 )
+void wxPlot::join( PLFLT x1, PLFLT y1, PLFLT x2, PLFLT y2 )
 {
-    set_stream();
+  set_stream();
 
-    pljoin(x1,y1,x2,y2);
+  pljoin(x1,y1,x2,y2);
 }
 
 /* Simple routine for labelling graphs. */
 
-void plstream::lab( const char *xlabel, const char *ylabel,
-		    const char *tlabel )
+void wxPlot::lab( const char *xlabel, const char *ylabel,
+		  const char *tlabel )
 {
-    set_stream();
+  set_stream();
 
-    pllab(xlabel, ylabel, tlabel);
+  pllab(xlabel, ylabel, tlabel);
 }
 
 /* Draws line segments connecting a series of points. */
 
-void plstream::line( PLINT n, PLFLT *x, PLFLT *y )
+void wxPlot::line( PLINT n, PLFLT *x, PLFLT *y )
 {
-    set_stream();
+  set_stream();
 
-    plline(n,x,y);
+  plline(n,x,y);
 }
 
 /* Draws a line in 3 space.  */
 
-void plstream::line3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z )
+void wxPlot::line3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z )
 {
-    set_stream();
+  set_stream();
 
-    plline3(n,x,y,z);
+  plline3(n,x,y,z);
 }
 
 /* Set line style. */
 
-void plstream::lsty( PLINT lin )
+void wxPlot::lsty( PLINT lin )
 {
-    set_stream();
+  set_stream();
 
-    pllsty(lin);
+  pllsty(lin);
 }
 
 /* plot continental outline in world coordinates */
 
-void plstream::map( void (*mapform)(PLINT, PLFLT *, PLFLT *), char *type,
-		    PLFLT minlong, PLFLT maxlong, PLFLT minlat, PLFLT maxlat )
+void wxPlot::map( void (*mapform)(PLINT, PLFLT *, PLFLT *), char *type,
+		  PLFLT minlong, PLFLT maxlong, PLFLT minlat, PLFLT maxlat )
 {
-    set_stream();
+  set_stream();
 
-    plmap( mapform, type, minlong, maxlong, minlat, maxlat );
+  plmap( mapform, type, minlong, maxlong, minlat, maxlat );
 }
 
 /* Plot the latitudes and longitudes on the background. */
 
-void  plstream::meridians( void (*mapform)(PLINT, PLFLT *, PLFLT *), 
-			   PLFLT dlong, PLFLT dlat,
-			   PLFLT minlong, PLFLT maxlong,
-			   PLFLT minlat, PLFLT maxlat)
+void  wxPlot::meridians( void (*mapform)(PLINT, PLFLT *, PLFLT *), 
+			 PLFLT dlong, PLFLT dlat,
+			 PLFLT minlong, PLFLT maxlong,
+			 PLFLT minlat, PLFLT maxlat)
 {
-    set_stream();
+  set_stream();
 
-    plmeridians( mapform, dlong, dlat, minlong, maxlong, minlat,
-		 maxlat );
+  plmeridians( mapform, dlong, dlat, minlong, maxlong, minlat,
+	       maxlat );
 }
 
 /* Plots a mesh representation of the function z[x][y]. */
 
-void plstream::mesh( PLFLT *x, PLFLT *y, PLFLT **z, PLINT nx, PLINT ny,
-		     PLINT opt)
+void wxPlot::mesh( PLFLT *x, PLFLT *y, PLFLT **z, PLINT nx, PLINT ny,
+		   PLINT opt)
 {
-    set_stream();
+  set_stream();
 
-    plmesh(x, y, z, nx, ny, opt );
+  plmesh(x, y, z, nx, ny, opt );
 }
 
 // /* Creates a new stream and makes it the default.  */
 
-// void plstream::mkstrm( PLINT *p_strm )
+// void wxPlot::mkstrm( PLINT *p_strm )
 // {
 //     set_stream();
 
@@ -832,696 +808,696 @@
 
 /* Prints out "text" at specified position relative to viewport */
 
-void plstream::mtex( const char *side, PLFLT disp, PLFLT pos, PLFLT just,
-		     const char *text )
+void wxPlot::mtex( const char *side, PLFLT disp, PLFLT pos, PLFLT just,
+		   const char *text )
 {
-    set_stream();
+  set_stream();
 
-    plmtex(side,disp,pos,just,text);
+  plmtex(side,disp,pos,just,text);
 }
 
 /* Plots a 3-d representation of the function z[x][y]. */
 
-void plstream::plot3d( PLFLT *x, PLFLT *y, PLFLT **z,
-		       PLINT nx, PLINT ny, PLINT opt, PLINT side )
+void wxPlot::plot3d( PLFLT *x, PLFLT *y, PLFLT **z,
+		     PLINT nx, PLINT ny, PLINT opt, PLINT side )
 {
-    set_stream();
+  set_stream();
 
-    ::plot3d(x,y,z,nx,ny,opt,side);
+  ::plot3d(x,y,z,nx,ny,opt,side);
 }
 
 /* Set fill pattern directly. */
 
-void plstream::pat( PLINT nlin, PLINT *inc, PLINT *del )
+void wxPlot::pat( PLINT nlin, PLINT *inc, PLINT *del )
 {
-    set_stream();
+  set_stream();
 
-    plpat(nlin,inc,del);
+  plpat(nlin,inc,del);
 }
 
 /* Plots array y against x for n points using ASCII code "code".*/
 
-void plstream::poin( PLINT n, PLFLT *x, PLFLT *y, PLINT code )
+void wxPlot::poin( PLINT n, PLFLT *x, PLFLT *y, PLINT code )
 {
-    set_stream();
+  set_stream();
 
-    plpoin(n,x,y,code);
+  plpoin(n,x,y,code);
 }
 
 /* Draws a series of points in 3 space. */
 
-void plstream::poin3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT code )
+void wxPlot::poin3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT code )
 {
-    set_stream();
+  set_stream();
 
-    plpoin3(n,x,y,z,code);
+  plpoin3(n,x,y,z,code);
 }
 
 /* Draws a polygon in 3 space.  */
 
-void plstream::poly3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT *draw )
+void wxPlot::poly3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT *draw )
 {
-    set_stream();
+  set_stream();
 
-    plpoly3(n,x,y,z,draw);
+  plpoly3(n,x,y,z,draw);
 }
 
 /* Set the floating point precision (in number of places) in numeric labels. */
 
-void plstream::prec( PLINT setp, PLINT prec )
+void wxPlot::prec( PLINT setp, PLINT prec )
 {
-    set_stream();
+  set_stream();
 
-    plprec(setp,prec);
+  plprec(setp,prec);
 }
 
 /* Set fill pattern, using one of the predefined patterns.*/
 
-void plstream::psty( PLINT patt )
+void wxPlot::psty( PLINT patt )
 {
-    set_stream();
+  set_stream();
 
-    plpsty(patt);
+  plpsty(patt);
 }
 
 /* Prints out "text" at world cooordinate (x,y). */
 
-void plstream::ptex( PLFLT x, PLFLT y, PLFLT dx, PLFLT dy, PLFLT just,
-		     const char *text)
+void wxPlot::ptex( PLFLT x, PLFLT y, PLFLT dx, PLFLT dy, PLFLT just,
+		   const char *text)
 {
-    set_stream();
+  set_stream();
 
-    plptex(x,y,dx,dy,just,text);
+  plptex(x,y,dx,dy,just,text);
 }
 
 /* Replays contents of plot buffer to current device/file. */
 
-void plstream::replot()
+void wxPlot::replot()
 {
-    set_stream();
+  set_stream();
 
-    plreplot();
+  plreplot();
 }
 
 /* Set line color by red, green, blue from  0. to 1. */
 
-void plstream::rgb( PLFLT r, PLFLT g, PLFLT b )
+void wxPlot::rgb( PLFLT r, PLFLT g, PLFLT b )
 {
-    set_stream();
+  set_stream();
 
-    plrgb(r,g,b);
+  plrgb(r,g,b);
 }
 
 /* Set line color by 8 bit RGB values. */
 
-void plstream::rgb( PLINT r, PLINT g, PLINT b )
+void wxPlot::rgb( PLINT r, PLINT g, PLINT b )
 {
-    set_stream();
+  set_stream();
 
-    plrgb1(r,g,b);
+  plrgb1(r,g,b);
 }
 
 /* Set character height. */
 
-void plstream::schr( PLFLT def, PLFLT scale )
+void wxPlot::schr( PLFLT def, PLFLT scale )
 {
-    set_stream();
+  set_stream();
 
-    plschr(def,scale);
+  plschr(def,scale);
 }
 
 /* Set number of colors in cmap 0 */
 
-void plstream::scmap0n( PLINT ncol0 )
+void wxPlot::scmap0n( PLINT ncol0 )
 {
-    set_stream();
+  set_stream();
 
-    plscmap0n(ncol0);
+  plscmap0n(ncol0);
 }
 
 /* Set number of colors in cmap 1 */
 
-void plstream::scmap1n( PLINT ncol1 )
+void wxPlot::scmap1n( PLINT ncol1 )
 {
-    set_stream();
+  set_stream();
 
-    plscmap1n(ncol1);
+  plscmap1n(ncol1);
 }
 
 /* Set color map 0 colors by 8 bit RGB values */
 
-void plstream::scmap0( PLINT *r, PLINT *g, PLINT *b, PLINT ncol0 )
+void wxPlot::scmap0( PLINT *r, PLINT *g, PLINT *b, PLINT ncol0 )
 {
-    set_stream();
+  set_stream();
 
-    plscmap0(r,g,b,ncol0);
+  plscmap0(r,g,b,ncol0);
 }
 
 /* Set color map 1 colors by 8 bit RGB values */
 
-void plstream::scmap1( PLINT *r, PLINT *g, PLINT *b, PLINT ncol1 )
+void wxPlot::scmap1( PLINT *r, PLINT *g, PLINT *b, PLINT ncol1 )
 {
-    set_stream();
+  set_stream();
 
-    plscmap1(r,g,b,ncol1);
+  plscmap1(r,g,b,ncol1);
 }
 
 /* Set color map 1 colors using a piece-wise linear relationship between */
 /* intensity [0,1] (cmap 1 index) and position in HLS or RGB color space. */
 
-void plstream::scmap1l( PLINT itype, PLINT npts, PLFLT *intensity,
-			PLFLT *coord1, PLFLT *coord2, PLFLT *coord3,
-			PLINT *rev )
+void wxPlot::scmap1l( PLINT itype, PLINT npts, PLFLT *intensity,
+		      PLFLT *coord1, PLFLT *coord2, PLFLT *coord3,
+		      PLINT *rev )
 {
-    set_stream();
+  set_stream();
 
-    plscmap1l(itype,npts,intensity,coord1,coord2,coord3,rev);
+  plscmap1l(itype,npts,intensity,coord1,coord2,coord3,rev);
 }
 
 /* Set a given color from color map 0 by 8 bit RGB value */
 
-void plstream::scol0( PLINT icol0, PLINT r, PLINT g, PLINT b )
+void wxPlot::scol0( PLINT icol0, PLINT r, PLINT g, PLINT b )
 {
-    set_stream();
+  set_stream();
 
-    plscol0(icol0,r,g,b);
+  plscol0(icol0,r,g,b);
 }
 
 /* Set the background color by 8 bit RGB value */
 
-void plstream::scolbg( PLINT r, PLINT g, PLINT b )
+void wxPlot::scolbg( PLINT r, PLINT g, PLINT b )
 {
-    set_stream();
+  set_stream();
 
-    plscolbg(r,g,b);
+  plscolbg(r,g,b);
 }
 
 /* Used to globally turn color output on/off */
 
-void plstream::scolor( PLINT color )
+void wxPlot::scolor( PLINT color )
 {
-    set_stream();
+  set_stream();
 
-    plscolor(color);
+  plscolor(color);
 }
 
 /* Set the device (keyword) name */
 
-void plstream::sdev( const char *devname )
+void wxPlot::sdev( const char *devname )
 {
-    set_stream();
+  set_stream();
 
-    plsdev(devname);
+  plsdev(devname);
 }
 
 /* Get the device (keyword) name */
 
-void plstream::gdev( char *devname )
+void wxPlot::gdev( char *devname )
 {
-    set_stream();
+  set_stream();
 
-    plgdev(devname);
+  plgdev(devname);
 }
 
 /* Set window into device space using margin, aspect ratio, and */
 /* justification */
 
-void plstream::sdidev( PLFLT mar, PLFLT aspect, PLFLT jx, PLFLT jy )
+void wxPlot::sdidev( PLFLT mar, PLFLT aspect, PLFLT jx, PLFLT jy )
 {
-    set_stream();
+  set_stream();
 
-    plsdidev(mar,aspect,jx,jy);
+  plsdidev(mar,aspect,jx,jy);
 }
 
 /* Set up transformation from metafile coordinates. */
 
-void plstream::sdimap( PLINT dimxmin, PLINT dimxmax,
-		       PLINT dimymin, PLINT dimymax,
-		       PLFLT dimxpmm, PLFLT dimypmm)
+void wxPlot::sdimap( PLINT dimxmin, PLINT dimxmax,
+		     PLINT dimymin, PLINT dimymax,
+		     PLFLT dimxpmm, PLFLT dimypmm)
 {
-    set_stream();
+  set_stream();
 
-    plsdimap(dimxmin,dimxmax,dimymin,dimymax,dimxpmm,dimypmm);
+  plsdimap(dimxmin,dimxmax,dimymin,dimymax,dimxpmm,dimypmm);
 }
 
 /* Set plot orientation, specifying rotation in units of pi/2. */
 
-void plstream::sdiori( PLFLT rot )
+void wxPlot::sdiori( PLFLT rot )
 {
-    set_stream();
+  set_stream();
 
-    plsdiori(rot);
+  plsdiori(rot);
 }
 
 /* Set window into plot space */
 
-void plstream::sdiplt( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax )
+void wxPlot::sdiplt( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax )
 {
-    set_stream();
+  set_stream();
 
-    plsdiplt(xmin,ymin,xmax,ymax);
+  plsdiplt(xmin,ymin,xmax,ymax);
 }
 
 /* Set window into plot space incrementally (zoom) */
 
-void plstream::sdiplz( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax )
+void wxPlot::sdiplz( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax )
 {
-    set_stream();
+  set_stream();
 
-    plsdiplz(xmin,ymin,xmax,ymax);
+  plsdiplz(xmin,ymin,xmax,ymax);
 }
 
 /* Set the escape character for text strings. */
 
-void plstream::sesc( char esc )
+void wxPlot::sesc( char esc )
 {
-    set_stream();
+  set_stream();
 
-    plsesc(esc);
+  plsesc(esc);
 }
 
 /* Set family file parameters */
 
-void plstream::sfam( PLINT fam, PLINT num, PLINT bmax )
+void wxPlot::sfam( PLINT fam, PLINT num, PLINT bmax )
 {
-    set_stream();
+  set_stream();
 
-    plsfam(fam,num,bmax);
+  plsfam(fam,num,bmax);
 }
 
 /* Set the output file name. */
 
-void plstream::sfnam( const char *fnam )
+void wxPlot::sfnam( const char *fnam )
 {
-    set_stream();
+  set_stream();
 
-    plsfnam(fnam);
+  plsfnam(fnam);
 }
 
 /* Shade region. */
 
 void 
-plstream::shade( PLFLT **a, PLINT nx, PLINT ny, const char **defined,
-		 PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
-		 PLFLT shade_min, PLFLT shade_max,
-		 PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		 PLINT min_color, PLINT min_width,
-		 PLINT max_color, PLINT max_width,
-		 void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
-		 void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		 PLPointer pltr_data )
-{
-    set_stream();
-
-    plshade( a,nx,ny,defined,left,right,bottom,top,
-	     shade_min, shade_max,
-	     sh_cmap, sh_color, sh_width,
-	     min_color, min_width, max_color, max_width,
-	     fill, rectangular, pltr, pltr_data );
+wxPlot::shade( PLFLT **a, PLINT nx, PLINT ny, const char **defined,
+	       PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
+	       PLFLT shade_min, PLFLT shade_max,
+	       PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+	       PLINT min_color, PLINT min_width,
+	       PLINT max_color, PLINT max_width,
+	       void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
+	       void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+	       PLPointer pltr_data )
+{
+  set_stream();
+
+  plshade( a,nx,ny,defined,left,right,bottom,top,
+	   shade_min, shade_max,
+	   sh_cmap, sh_color, sh_width,
+	   min_color, min_width, max_color, max_width,
+	   fill, rectangular, pltr, pltr_data );
 }
 
 void
-plstream::shade( Contourable_Data& d, PLFLT xmin, PLFLT xmax,
-		 PLFLT ymin, PLFLT ymax, PLFLT shade_min, PLFLT shade_max,
-		 PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		 PLINT min_color, PLINT min_width,
-		 PLINT max_color, PLINT max_width,
-		 PLINT rectangular,
-		 Coord_Xformer *pcxf )
-{
-    set_stream();
-
-    int nx, ny;
-    d.elements( nx, ny );
-
-    ::plfshade( Contourable_Data_evaluator, &d,
-		NULL, NULL,
-		nx, ny,
-		xmin, xmax, ymin, ymax, shade_min, shade_max,
-		sh_cmap, sh_color, sh_width,
-		min_color, min_width, max_color, max_width,
-		::plfill, rectangular,
-		Coord_Xform_evaluator, pcxf );
-}
-
-void 
-plstream::shade1( PLFLT *a, PLINT nx, PLINT ny, const char *defined,
-		  PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
-		  PLFLT shade_min, PLFLT shade_max,
-		  PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		  PLINT min_color, PLINT min_width,
-		  PLINT max_color, PLINT max_width,
-		  void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
-		  void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		  PLPointer pltr_data )
-{
-    set_stream();
-
-    plshade1( a, nx, ny, defined,
-	      left, right, bottom, top,
-	      shade_min, shade_max,
+wxPlot::shade( Contourable_Data& d, PLFLT xmin, PLFLT xmax,
+	       PLFLT ymin, PLFLT ymax, PLFLT shade_min, PLFLT shade_max,
+	       PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+	       PLINT min_color, PLINT min_width,
+	       PLINT max_color, PLINT max_width,
+	       PLINT rectangular,
+	       Coord_Xformer *pcxf )
+{
+  set_stream();
+
+  int nx, ny;
+  d.elements( nx, ny );
+
+  ::plfshade( Contourable_Data_evaluator, &d,
+	      NULL, NULL,
+	      nx, ny,
+	      xmin, xmax, ymin, ymax, shade_min, shade_max,
 	      sh_cmap, sh_color, sh_width,
 	      min_color, min_width, max_color, max_width,
-	      fill, rectangular, pltr, pltr_data );
+	      ::plfill, rectangular,
+	      Coord_Xform_evaluator, pcxf );
 }
 
 void 
-plstream::fshade( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
-		  PLPointer f2eval_data,
-		  PLFLT (*c2eval) (PLINT, PLINT, PLPointer),
-		  PLPointer c2eval_data,
-		  PLINT nx, PLINT ny, 
-		  PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
-		  PLFLT shade_min, PLFLT shade_max,
-		  PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		  PLINT min_color, PLINT min_width,
-		  PLINT max_color, PLINT max_width,
-		  void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
-		  void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		  PLPointer pltr_data )
-{
-    set_stream();
+wxPlot::shade1( PLFLT *a, PLINT nx, PLINT ny, const char *defined,
+		PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
+		PLFLT shade_min, PLFLT shade_max,
+		PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+		PLINT min_color, PLINT min_width,
+		PLINT max_color, PLINT max_width,
+		void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
+		void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+		PLPointer pltr_data )
+{
+  set_stream();
+
+  plshade1( a, nx, ny, defined,
+	    left, right, bottom, top,
+	    shade_min, shade_max,
+	    sh_cmap, sh_color, sh_width,
+	    min_color, min_width, max_color, max_width,
+	    fill, rectangular, pltr, pltr_data );
+}
 
-    plfshade( f2eval, f2eval_data,
-	      c2eval, c2eval_data,
-	      nx, ny, left, right, bottom, top,
-	      shade_min, shade_max,
-	      sh_cmap, sh_color, sh_width,
-	      min_color, min_width, max_color, max_width,
-	      fill, rectangular, pltr, pltr_data );
+void 
+wxPlot::fshade( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
+		PLPointer f2eval_data,
+		PLFLT (*c2eval) (PLINT, PLINT, PLPointer),
+		PLPointer c2eval_data,
+		PLINT nx, PLINT ny, 
+		PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
+		PLFLT shade_min, PLFLT shade_max,
+		PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+		PLINT min_color, PLINT min_width,
+		PLINT max_color, PLINT max_width,
+		void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
+		void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+		PLPointer pltr_data )
+{
+  set_stream();
+
+  plfshade( f2eval, f2eval_data,
+	    c2eval, c2eval_data,
+	    nx, ny, left, right, bottom, top,
+	    shade_min, shade_max,
+	    sh_cmap, sh_color, sh_width,
+	    min_color, min_width, max_color, max_width,
+	    fill, rectangular, pltr, pltr_data );
 }
 
 /* Set up lengths of major tick marks. */
 
-void plstream::smaj( PLFLT def, PLFLT scale )
+void wxPlot::smaj( PLFLT def, PLFLT scale )
 {
-    set_stream();
+  set_stream();
 
-    plsmaj(def,scale);
+  plsmaj(def,scale);
 }
 
 /* Set up lengths of minor tick marks. */
 
-void plstream::smin( PLFLT def, PLFLT scale )
+void wxPlot::smin( PLFLT def, PLFLT scale )
 {
-    set_stream();
+  set_stream();
 
-    plsmin(def, scale);
+  plsmin(def, scale);
 }
 
 /* Set orientation.  Must be done before calling plinit. */
 
-void plstream::sori( PLINT ori )
+void wxPlot::sori( PLINT ori )
 {
-    set_stream();
+  set_stream();
 
-    plsori(ori);
+  plsori(ori);
 }
 
 /* Set output device parameters.  Usually ignored by the driver. */
 
-void plstream::spage( PLFLT xp, PLFLT yp, PLINT xleng, PLINT yleng,
-		      PLINT xoff, PLINT yoff )
+void wxPlot::spage( PLFLT xp, PLFLT yp, PLINT xleng, PLINT yleng,
+		    PLINT xoff, PLINT yoff )
 {
-    set_stream();
+  set_stream();
 
-    plspage(xp,yp,xleng,yleng,xoff,yoff);
+  plspage(xp,yp,xleng,yleng,xoff,yoff);
 }
 
 /* Set the pause (on end-of-page) status */
 
-void plstream::spause( PLINT pause )
+void wxPlot::spause( PLINT pause )
 {
-    set_stream();
+  set_stream();
 
-    plspause(pause);
+  plspause(pause);
 }
 
 /* Set stream number.  */
 
-void plstream::sstrm( PLINT strm )
+void wxPlot::sstrm( PLINT strm )
 {
-    set_stream();
+  set_stream();
 
-    plsstrm(strm);
+  plsstrm(strm);
 }
 
 /* Set the number of subwindows in x and y */
 
-void plstream::ssub( PLINT nx, PLINT ny )
+void wxPlot::ssub( PLINT nx, PLINT ny )
 {
-    set_stream();
+  set_stream();
 
-    plssub(nx,ny);
+  plssub(nx,ny);
 }
 
 /* Set symbol height. */
 
-void plstream::ssym( PLFLT def, PLFLT scale )
+void wxPlot::ssym( PLFLT def, PLFLT scale )
 {
-    set_stream();
+  set_stream();
 
-    plssym(def,scale);
+  plssym(def,scale);
 }
 
 /* Initialize PLplot, passing in the windows/page settings. */
 
-void plstream::star( PLINT nx, PLINT ny )
+void wxPlot::star( PLINT nx, PLINT ny )
 {
-    set_stream();
+  set_stream();
 
-    plstar(nx,ny);
+  plstar(nx,ny);
 }
 
 /* Initialize PLplot, passing the device name and windows/page settings. */
 
-void plstream::start( const char *devname, PLINT nx, PLINT ny )
+void wxPlot::start( const char *devname, PLINT nx, PLINT ny )
 {
-    set_stream();
+  set_stream();
 
-    plstart(devname,nx,ny);
+  plstart(devname,nx,ny);
 }
 
 /* Set up a new line style */
 
-void plstream::styl( PLINT nms, PLINT *mark, PLINT *space )
+void wxPlot::styl( PLINT nms, PLINT *mark, PLINT *space )
 {
-    set_stream();
+  set_stream();
 
-    plstyl(nms, mark, space);
+  plstyl(nms, mark, space);
 }
 
 /* Sets the edges of the viewport to the specified absolute coordinates */
 
-void plstream::svpa( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax )
+void wxPlot::svpa( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax )
 {
-    set_stream();
+  set_stream();
 
-    plsvpa(xmin,xmax,ymin,ymax);
+  plsvpa(xmin,xmax,ymin,ymax);
 }
 
 /* Set x axis labeling parameters */
 
-void plstream::sxax( PLINT digmax, PLINT digits )
+void wxPlot::sxax( PLINT digmax, PLINT digits )
 {
-    set_stream();
+  set_stream();
 
-    plsxax(digmax,digits);
+  plsxax(digmax,digits);
 }
 
 /* Set inferior X window */
 
-void plstream::sxwin( PLINT window_id )
+void wxPlot::sxwin( PLINT window_id )
 {
-    set_stream();
+  set_stream();
 
-    plsxwin(window_id);
+  plsxwin(window_id);
 }
 
 /* Set y axis labeling parameters */
 
-void plstream::syax( PLINT digmax, PLINT digits )
+void wxPlot::syax( PLINT digmax, PLINT digits )
 {
-    set_stream();
+  set_stream();
 
-    plsyax(digmax,digits);
+  plsyax(digmax,digits);
 }
 
 /* Plots array y against x for n points using Hershey symbol "code" */
 
-void plstream::sym( PLINT n, PLFLT *x, PLFLT *y, PLINT code )
+void wxPlot::sym( PLINT n, PLFLT *x, PLFLT *y, PLINT code )
 {
-    set_stream();
+  set_stream();
 
-    plsym(n,x,y,code);
+  plsym(n,x,y,code);
 }
 
 /* Set z axis labeling parameters */
 
-void plstream::szax( PLINT digmax, PLINT digits )
+void wxPlot::szax( PLINT digmax, PLINT digits )
 {
-    set_stream();
+  set_stream();
 
-    plszax(digmax,digits);
+  plszax(digmax,digits);
 }
 
 /* Switches to text screen. */
 
-void plstream::text()
+void wxPlot::text()
 {
-    set_stream();
+  set_stream();
 
-    pltext();
+  pltext();
 }
 
 /* Sets the edges of the viewport with the given aspect ratio, leaving */
 /* room for labels. */
 
-void plstream::vasp( PLFLT aspect )
+void wxPlot::vasp( PLFLT aspect )
 {
-    set_stream();
+  set_stream();
 
-    plvasp(aspect);
+  plvasp(aspect);
 }
 
 /* Creates the largest viewport of the specified aspect ratio that fits */
 /* within the specified normalized subpage coordinates. */
 
-void plstream::vpas( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
-		     PLFLT aspect )
+void wxPlot::vpas( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
+		   PLFLT aspect )
 {
-    set_stream();
+  set_stream();
 
-    plvpas(xmin,xmax,ymin,ymax,aspect);
+  plvpas(xmin,xmax,ymin,ymax,aspect);
 }
 
 /* Creates a viewport with the specified normalized subpage coordinates. */
 
-void plstream::vpor( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax )
+void wxPlot::vpor( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax )
 {
-    set_stream();
+  set_stream();
 
-    plvpor(xmin,xmax,ymin,ymax);
+  plvpor(xmin,xmax,ymin,ymax);
 }
 
 /* Defines a "standard" viewport with seven character heights for */
 /* the left margin and four character heights everywhere else. */
 
-void plstream::vsta()
+void wxPlot::vsta()
 {
-    set_stream();
+  set_stream();
 
-    plvsta();
+  plvsta();
 }
 
 /* Set up a window for three-dimensional plotting. */
 
-void plstream::w3d( PLFLT basex, PLFLT basey, PLFLT height, PLFLT xmin0,
-		    PLFLT xmax0, PLFLT ymin0, PLFLT ymax0, PLFLT zmin0,
-		    PLFLT zmax0, PLFLT alt, PLFLT az )
+void wxPlot::w3d( PLFLT basex, PLFLT basey, PLFLT height, PLFLT xmin0,
+		  PLFLT xmax0, PLFLT ymin0, PLFLT ymax0, PLFLT zmin0,
+		  PLFLT zmax0, PLFLT alt, PLFLT az )
 {
-    set_stream();
+  set_stream();
 
-    plw3d(basex,basey,height,xmin0,xmax0,ymin0,ymax0,zmin0,zmax0,
-	  alt,az);
+  plw3d(basex,basey,height,xmin0,xmax0,ymin0,ymax0,zmin0,zmax0,
+	alt,az);
 }
 
 /* Set pen width. */
 
-void plstream::wid( PLINT width )
+void wxPlot::wid( PLINT width )
 {
-    set_stream();
+  set_stream();
 
-    plwid(width);
+  plwid(width);
 }
 
 /* Set up world coordinates of the viewport boundaries (2d plots). */
 
-void plstream::wind( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax )
+void wxPlot::wind( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax )
 {
-    set_stream();
+  set_stream();
 
-    plwind(xmin,xmax,ymin,ymax);
+  plwind(xmin,xmax,ymin,ymax);
 }
 
-	/* The rest for use from C only */
+/* The rest for use from C only */
 
 /* Returns a list of file-oriented device names and their menu strings */
 
-void plstream::gFileDevs( char ***p_menustr, char ***p_devname, int *p_ndev )
+void wxPlot::gFileDevs( char ***p_menustr, char ***p_devname, int *p_ndev )
 {
-    set_stream();
+  set_stream();
 
-    plgFileDevs(p_menustr,p_devname,p_ndev);
+  plgFileDevs(p_menustr,p_devname,p_ndev);
 }
 
 /* Set the function pointer for the keyboard event handler */
 
-void plstream::sKeyEH( void (*KeyEH) (PLGraphicsIn *, void *, int *),
-		       void *KeyEH_data )
+void wxPlot::sKeyEH( void (*KeyEH) (PLGraphicsIn *, void *, int *),
+		     void *KeyEH_data )
 {
-    set_stream();
+  set_stream();
 
-    plsKeyEH(KeyEH, KeyEH_data);
+  plsKeyEH(KeyEH, KeyEH_data);
 }
 
 /* Sets an optional user exit handler. */
 
-void plstream::sexit( int (*handler) (char *) )
+void wxPlot::sexit( int (*handler) (char *) )
 {
-    set_stream();
+  set_stream();
 
-    plsexit(handler);
+  plsexit(handler);
 }
 
-	/* Transformation routines */
+/* Transformation routines */
 
 /* Identity transformation. */
 
-void plstream::tr0( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
-		    PLPointer pltr_data )
+void wxPlot::tr0( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
+		  PLPointer pltr_data )
 {
-    set_stream();
+  set_stream();
 
-    pltr0(x,y,tx,ty,pltr_data);
+  pltr0(x,y,tx,ty,pltr_data);
 }
 
 /* Does linear interpolation from singly dimensioned coord arrays. */
 
-void plstream::tr1( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
-		    PLPointer pltr_data )
+void wxPlot::tr1( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
+		  PLPointer pltr_data )
 {
-    set_stream();
+  set_stream();
 
-    pltr1(x,y,tx,ty,pltr_data);
+  pltr1(x,y,tx,ty,pltr_data);
 }
 
 /* Does linear interpolation from doubly dimensioned coord arrays */
 /* (column dominant, as per normal C 2d arrays). */
 
-void plstream::tr2( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
-		    PLPointer pltr_data )
+void wxPlot::tr2( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
+		  PLPointer pltr_data )
 {
-    set_stream();
+  set_stream();
 
-    pltr2(x,y,tx,ty,pltr_data);
+  pltr2(x,y,tx,ty,pltr_data);
 }
 
 /* Just like pltr2() but uses pointer arithmetic to get coordinates from */
 /* 2d grid tables.  */
 
-void plstream::tr2p( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
-		     PLPointer pltr_data )
+void wxPlot::tr2p( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty,
+		   PLPointer pltr_data )
 {
-    set_stream();
+  set_stream();
 
-    pltr2p(x,y,tx,ty,pltr_data);
+  pltr2p(x,y,tx,ty,pltr_data);
 }
 
 // We obviously won't be using this object from Fortran...
 // /* Identity transformation for plots from Fortran. */
 
-// void plstream::tr0f(PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data )
+// void wxPlot::tr0f(PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data )
 // {
 //     set_stream();
 
@@ -1531,7 +1507,7 @@
 // /* Does linear interpolation from doubly dimensioned coord arrays */
 // /* (row dominant, i.e. Fortran ordering). */
 
-// void plstream::tr2f( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data )
+// void wxPlot::tr2f( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data )
 // {
 //     set_stream();
 
@@ -1540,243 +1516,245 @@
 
 /* Example linear transformation function for contour plotter. */
 
-void  plstream::xform( PLFLT x, PLFLT y, PLFLT * tx, PLFLT * ty )
+void  wxPlot::xform( PLFLT x, PLFLT y, PLFLT * tx, PLFLT * ty )
 {
-    set_stream();
+  set_stream();
 
-    xform(x,y,tx,ty);
+  xform(x,y,tx,ty);
 }
 
-	/* Function evaluators */
+/* Function evaluators */
 
 /* Does a lookup from a 2d function array.  Array is of type (PLFLT **), */
 /* and is column dominant (normal C ordering). */
 
-PLFLT plstream::f2eval2( PLINT ix, PLINT iy, PLPointer plf2eval_data )
+PLFLT wxPlot::f2eval2( PLINT ix, PLINT iy, PLPointer plf2eval_data )
 {
-    set_stream();
+  set_stream();
 
-    return ::plf2eval2( ix, iy, plf2eval_data );
+  return ::plf2eval2( ix, iy, plf2eval_data );
 }
 
 /* Does a lookup from a 2d function array.  Array is of type (PLFLT *), */
 /* and is column dominant (normal C ordering). */
 
-PLFLT plstream::f2eval( PLINT ix, PLINT iy, PLPointer plf2eval_data )
+PLFLT wxPlot::f2eval( PLINT ix, PLINT iy, PLPointer plf2eval_data )
 {
-    set_stream();
+  set_stream();
 
-    return ::plf2eval( ix, iy, plf2eval_data );
+  return ::plf2eval( ix, iy, plf2eval_data );
 }
 
 /* Does a lookup from a 2d function array.  Array is of type (PLFLT *), */
 /* and is row dominant (Fortran ordering). */
 
-PLFLT plstream::f2evalr( PLINT ix, PLINT iy, PLPointer plf2eval_data )
+PLFLT wxPlot::f2evalr( PLINT ix, PLINT iy, PLPointer plf2eval_data )
 {
-    set_stream();
+  set_stream();
 
-    return ::plf2evalr( ix, iy, plf2eval_data );
+  return ::plf2evalr( ix, iy, plf2eval_data );
 }
 
-	/* Command line parsing utilities */
+/* Command line parsing utilities */
 
 /* Clear internal option table info structure. */
 
-void plstream::ClearOpts()
+void wxPlot::ClearOpts()
 {
-    set_stream();
+  set_stream();
 
-    ::plClearOpts();
+  ::plClearOpts();
 }
 
 /* Reset internal option table info structure. */
 
-void plstream::ResetOpts()
+void wxPlot::ResetOpts()
 {
-    set_stream();
+  set_stream();
 
-    ::plResetOpts();
+  ::plResetOpts();
 }
 
 /* Merge user option table into internal info structure. */
 
-int plstream::MergeOpts( PLOptionTable *options, char *name, char **notes )
+int wxPlot::MergeOpts( PLOptionTable *options, char *name, char **notes )
 {
-    set_stream();
+  set_stream();
 
-    return ::plMergeOpts(options, name, notes);
+  return ::plMergeOpts(options, name, notes);
 }
 
 /* Set the strings used in usage and syntax messages. */
 
-void plstream::SetUsage( char *program_string, char *usage_string )
+void wxPlot::SetUsage( char *program_string, char *usage_string )
 {
-    set_stream();
+  set_stream();
 
-    ::plSetUsage(program_string, usage_string);
+  ::plSetUsage(program_string, usage_string);
 }
 
 /* Process input strings, treating them as an option and argument pair. */
 
-int plstream::SetOpt( char *opt, char *optarg )
+int wxPlot::SetOpt( char *opt, char *optarg )
 {
-    set_stream();
+  set_stream();
 
-    return ::plSetOpt(opt, optarg);
+  return ::plSetOpt(opt, optarg);
 }
 
 /* Process options list using current options info. */
 
-int plstream::ParseOpts( int *p_argc, char **argv, PLINT mode )
+int wxPlot::ParseOpts( int *p_argc, char **argv, PLINT mode )
 {
-    set_stream();
+  set_stream();
 
-    return ::plParseOpts( p_argc, argv, mode );
+  return ::plParseOpts( p_argc, argv, mode );
 }
 
 /* Print usage & syntax message. */
 
-void plstream::OptUsage()
+void wxPlot::OptUsage()
 {
-    set_stream();
+  set_stream();
 
-    ::plOptUsage();
+  ::plOptUsage();
 }
 
-	/* Miscellaneous */
+/* Miscellaneous */
 
 /* Set the output file pointer */
 
-void plstream::gfile(FILE **p_file )
+void wxPlot::gfile(FILE **p_file )
 {
-    set_stream();
+  set_stream();
 
-    ::plgfile(p_file);
+  ::plgfile(p_file);
 }
 
 /* Get the output file pointer */
 
-void plstream::sfile( FILE *file )
+void wxPlot::sfile( FILE *file )
 {
-    set_stream();
+  set_stream();
     
-    ::plsfile(file);
+  ::plsfile(file);
 }
 
 
 /* Get the escape character for text strings. */
 
-void plstream::gesc( char *p_esc )
+void wxPlot::gesc( char *p_esc )
 {
-    set_stream();
+  set_stream();
 
-	::plgesc( p_esc );
+  ::plgesc( p_esc );
 }
 
 /* Front-end to driver escape function. */
 
-void plstream::pl_cmd( PLINT op, void *ptr )
+void wxPlot::pl_cmd( PLINT op, void *ptr )
 {
-    set_stream();
+  set_stream();
 
-	::pl_cmd(op,ptr);
+  ::pl_cmd(op,ptr);
 }
 
 /* Return full pathname for given file if executable */
 
-int  plstream::FindName( char *p )
+int  wxPlot::FindName( char *p )
 {
-    set_stream();
+  set_stream();
 
-    return plFindName(p);
+  return plFindName(p);
 }
 
 /* Looks for the specified executable file according to usual search path. */
 
-char *plstream::FindCommand( char *fn )
+char *wxPlot::FindCommand( char *fn )
 {
-    set_stream();
+  set_stream();
 
-    return plFindCommand(fn);
+  return plFindCommand(fn);
 }
 
 /* Gets search name for file by concatenating the dir, subdir, and file */
 /* name, allocating memory as needed.  */
 
-void plstream::GetName( char *dir, char *subdir, char *filename,
-			char **filespec )
+void wxPlot::GetName( char *dir, char *subdir, char *filename,
+		      char **filespec )
 {
-    set_stream();
+  set_stream();
 
-    plGetName(dir,subdir,filename,filespec);
+  plGetName(dir,subdir,filename,filespec);
 }
 
 /* Prompts human to input an integer in response to given message. */
 
-PLINT plstream::GetInt( char *s )
+PLINT wxPlot::GetInt( char *s )
 {
-    set_stream();
+  set_stream();
 
-    return plGetInt(s);
+  return plGetInt(s);
 }
 
 /* Prompts human to input a float in response to given message. */
 
-PLFLT plstream::GetFlt( char *s )
+PLFLT wxPlot::GetFlt( char *s )
 {
-    set_stream();
+  set_stream();
 
-    return plGetFlt(s);
+  return plGetFlt(s);
 }
 
-	/* Nice way to allocate space for a vectored 2d grid */
+/* Nice way to allocate space for a vectored 2d grid */
 
 /* Allocates a block of memory for use as a 2-d grid of PLFLT's.  */
 
-void plstream::Alloc2dGrid( PLFLT ***f, PLINT nx, PLINT ny )
+void wxPlot::Alloc2dGrid( PLFLT ***f, PLINT nx, PLINT ny )
 {
-    set_stream();
+  set_stream();
 
-    plAlloc2dGrid(f,nx,ny);
+  plAlloc2dGrid(f,nx,ny);
 }
 
 /* Frees a block of memory allocated with plAlloc2dGrid(). */
 
-void plstream::Free2dGrid( PLFLT **f, PLINT nx, PLINT ny )
+void wxPlot::Free2dGrid( PLFLT **f, PLINT nx, PLINT ny )
 {
-    set_stream();
+  set_stream();
 
-    plFree2dGrid(f,nx,ny);
+  plFree2dGrid(f,nx,ny);
 }
 
 /* Functions for converting between HLS and RGB color space */
 
-void plstream::HLS_RGB( PLFLT h, PLFLT l, PLFLT s, PLFLT *p_r, PLFLT *p_g,
-			PLFLT *p_b )
+void wxPlot::HLS_RGB( PLFLT h, PLFLT l, PLFLT s, PLFLT *p_r, PLFLT *p_g,
+		      PLFLT *p_b )
 {
-    set_stream();
+  set_stream();
 
-    plHLS_RGB(h,l,s,p_r,p_g,p_b);
+  plHLS_RGB(h,l,s,p_r,p_g,p_b);
 }
 
-void plstream::RGB_HLS( PLFLT r, PLFLT g, PLFLT b, PLFLT *p_h, PLFLT *p_l,
-			PLFLT *p_s )
+void wxPlot::RGB_HLS( PLFLT r, PLFLT g, PLFLT b, PLFLT *p_h, PLFLT *p_l,
+		      PLFLT *p_s )
 {
-    set_stream();
+  set_stream();
 
-    plRGB_HLS(r,g,b,p_h,p_l,p_s);
+  plRGB_HLS(r,g,b,p_h,p_l,p_s);
 }
 
 /* Wait for right button mouse event and translate to world coordinates */
 
-int plstream::GetCursor( PLGraphicsIn *gin )
+int wxPlot::GetCursor( PLGraphicsIn *gin )
 {
-    set_stream();
+  set_stream();
 
-    return plGetCursor(gin);
+  return plGetCursor(gin);
 }
 
+
 //---------------------------------------------------------------------------//
-//                              end of plstream.cc
+//                              end of wxPlot.cc
 //---------------------------------------------------------------------------//
+
--- src/plargs.c	Wed Sep 01 14:25:12 1999
+++ plargs.cpp	Wed Sep 01 14:25:04 1999
@@ -1,6 +1,9 @@
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
- * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:45  fhuebner
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+ * $Log: not supported by cvs2svn $
+ * Revision 1.1.1.1  1999/09/01 14:01:40  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.37  1998/12/01  20:51:12  furnish
@@ -1809,7 +1812,7 @@
 static int
 opt_plwindow(char *opt, char *optarg, void *client_data)
 {
-    char *strdup();
+  //    char *strdup();
 
 /* jc:    plsc->plwindow = optarg; */
     plsc->plwindow = strdup(optarg);	/* jc: somehow the original string is lost */
--- src/plstripc.c	Wed Sep 01 14:25:13 1999
+++ plstripc.cpp	Wed Sep 01 14:25:05 1999
@@ -4,9 +4,12 @@
  * ToDo: better way of clearing plot. search for `plvsta'.
  */
 
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
- * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:46  fhuebner
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+ * $Log: not supported by cvs2svn $
+ * Revision 1.1.1.1  1999/09/01 14:01:41  fhuebner
+ * Start of wxPlot
+ *
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
  * Start of wxPlot
  *
  * Revision 1.1  1998/12/01  20:46:30  furnish
@@ -70,7 +73,8 @@
 static void
 plstrip_legend(PLStrip *strip, int flag);
 
-char *strdup(char *);
+/*  char *strdup(char *); */
+
 /*--------------------------------------------------------------------------*\
  * plstripc
  *
--- drivers/null.c	Wed Sep 01 14:25:11 1999
+++ wxwin.cpp	Wed Sep 01 14:25:05 1999
@@ -1,48 +1,51 @@
-/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
- * $Log: not supported by cvs2svn $
- * Revision 1.1.1.1  1999/09/01 14:01:44  fhuebner
+/* $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+ * $Log: not supported by cvs2svn $
+ * Revision 1.1.1.1  1999/09/01 14:01:41  fhuebner
  * Start of wxPlot
  *
- * Revision 1.14  1995/10/22  17:40:33  mjl
- * Removed message "Sending output to null device.." being sent to stderr -- a
- * null device should act accordingly.
+ * Revision 1.2  1999/09/01 13:48:36  fhuebner
+ * #if -> #ifdef
  *
- * Revision 1.13  1995/03/11  20:27:12  mjl
- * All drivers: eliminated unnecessary variable initializations, other cleaning
- * up.
+ * Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
+ * Start of wxPlot
  *
- * Revision 1.12  1994/07/19  22:30:25  mjl
- * All device drivers: enabling macro renamed to PLD_<driver>, where <driver>
- * is xwin, ps, etc.  See plDevs.h for more detail.
 */
 
-/*	null.c
+/*	wxwin.cc
 
-	PLplot Null device driver.
+	PLplot wxWindows device driver.
 */
 #include "plDevs.h"
 
-#ifdef PLD_null
-
+#ifdef PLD_wxwin
 #include "plplotP.h"
 #include "drivers.h"
+#include <wx/dc.h>
+
+static void
+fill_polygon(PLStream *pls);
 
 /*--------------------------------------------------------------------------*\
- * plD_init_null()
+ * plD_init_wxwin()
  *
  * Initialize device (terminal).
 \*--------------------------------------------------------------------------*/
 
 void
-plD_init_null(PLStream *pls)
+plD_init_wxwin(PLStream *pls)
 {
+  //********
+    pls->color = 1;		/* Is a color device */
+    pls->dev_fill0 = 1;		/* Handle solid fills */
+    pls->dev_fill1 = 0;		/* Handle pattern fills */
+
     int xmin = 0;
-    int xmax = PIXELS_X - 1;
-    int ymin = 0;
-    int ymax = PIXELS_Y - 1;
+    int xmax = pls->xlength;
+    int ymax = 0;
+    int ymin = - pls->ylength;
 
-    float pxlx = (double) PIXELS_X / (double) LPAGE_X;
-    float pxly = (double) PIXELS_Y / (double) LPAGE_Y;
+    float pxlx = ((float) pls->xlength)/600.;
+    float pxly = ((float) pls->ylength)/600.;
 
 /* Set up device parameters */
 
@@ -51,49 +54,131 @@
 }
 
 /*--------------------------------------------------------------------------*\
- * The remaining driver functions are all null.
+ * The remaining driver functions are to be filled with code.
 \*--------------------------------------------------------------------------*/
 
 void
-plD_line_null(PLStream *pls, short x1a, short y1a, short x2a, short y2a)
+plD_line_wxwin(PLStream *pls, short x1a, short y1a, short x2a, short y2a)
 {
+  pls->dc->DrawLine((long) x1a, -(long) y1a, (long) x2a, -(long) y2a);
 }
 
 void
-plD_polyline_null(PLStream *pls, short *xa, short *ya, PLINT npts)
+plD_polyline_wxwin(PLStream *pls, short *xa, short *ya, PLINT npts)
 {
+  // should be changed to use the wxDC::DrawLines function?
+  int i;
+  wxDC *dc;
+  dc=pls->dc;
+
+  dc->BeginDrawing();
+  for (i=1;i <npts; i++){
+    dc->DrawLine((long) xa[i-1], -(long) ya[i-1], (long) xa[i], -(long) ya[i]);
+  }
+  dc->EndDrawing();
 }
 
 void
-plD_eop_null(PLStream *pls)
+plD_eop_wxwin(PLStream *pls)
 {
+  pls->dc->StartPage();
 }
 
 void
-plD_bop_null(PLStream *pls)
+plD_bop_wxwin(PLStream *pls)
 {
+  pls->dc->Clear();
 }
 
 void
-plD_tidy_null(PLStream *pls)
+plD_tidy_wxwin(PLStream *pls)
 {
 }
 
 void 
-plD_state_null(PLStream *pls, PLINT op)
+plD_state_wxwin(PLStream *pls, PLINT op)
 {
+  wxDC *dc;
+  wxPen *pen;
+  wxBrush *brush;
+  dc=pls->dc;
+  switch (op) {
+
+  case PLSTATE_WIDTH:
+    dc->GetPen().SetWidth(pls->width);
+    break;
+  case PLSTATE_COLOR0:
+    pen=new wxPen(dc->GetPen());
+    pen->SetColour(pls->cmap0[pls->icol0].r,
+		   pls->cmap0[pls->icol0].g,
+		   pls->cmap0[pls->icol0].b);
+    dc->SetPen(*pen);
+    delete pen;
+    brush=new wxBrush(pls->dc->GetBrush());
+    brush->SetStyle(wxSOLID);
+    brush->SetColour(pls->cmap0[pls->icol0].r,
+		     pls->cmap0[pls->icol0].g,
+		     pls->cmap0[pls->icol0].b);
+    pls->dc->SetBrush(*brush);
+    delete brush;
+    break;
+  case PLSTATE_COLOR1:
+    pen=new wxPen(dc->GetPen());
+    pen->SetColour(pls->curcolor.r,
+		   pls->curcolor.g,
+		   pls->curcolor.b);
+    dc->SetPen(*pen);
+    delete pen;
+    brush=new wxBrush(pls->dc->GetBrush());
+    brush->SetStyle(wxSOLID);
+    brush->SetColour(pls->curcolor.r,
+		     pls->curcolor.g,
+		     pls->curcolor.b);
+    pls->dc->SetBrush(*brush);
+    delete brush;
+    break;
+  }
 }
 
 void
-plD_esc_null(PLStream *pls, PLINT op, void *ptr)
-{
+plD_esc_wxwin(PLStream *pls, PLINT op, void *ptr)
+{
+  switch (op) {
+  case PLESC_FILL:
+    fill_polygon(pls);
+    break;
+  }
 }
 
 #else
 int 
-pldummy_null()
+pldummy_wxwin()
 {
     return 0;
 }
 
-#endif				/* PLD_nulldev */
+#endif				/* PLD_wxwin */
+
+
+/*--------------------------------------------------------------------------*\
+ * fill_polygon()
+ *
+ * Fill polygon described in points pls->dev_x[] and pls->dev_y[].
+\*--------------------------------------------------------------------------*/
+
+static void
+fill_polygon(PLStream *pls)
+{
+  int i;
+  wxPoint *points;
+  points = new wxPoint[pls->dev_npts];
+  
+  for (i=0; i < pls->dev_npts; i++)
+    {
+      points[i].x=pls->dev_x[i];
+      points[i].y=-pls->dev_y[i];
+    }
+
+  pls->dc->DrawPolygon(pls->dev_npts, points);
+  delete[] points;
+}
--- bindings/c++/plstream.h	Wed Sep 01 14:25:06 1999
+++ wxPlot.h	Wed Sep 01 14:25:05 1999
@@ -1,59 +1,26 @@
 //----------------------------------*-C++-*----------------------------------//
-// plstream.h
-// Geoffrey Furnish
-// 21 September 1994
+// wxPlot.cc
+// Frank Huebner
+// 24 August 1998
+// Derived from wxPlot.h
 //---------------------------------------------------------------------------//
-// @> Header file plstream.
 //
-// $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
+// $Id: patches,v 1.1.1.1 2003-12-28 21:07:05 wyo Exp $
 //
-// $Log: not supported by cvs2svn $
+// $Log: not supported by cvs2svn $
 // Revision 1.1.1.1  1999/09/01 14:01:41  fhuebner
 // Start of wxPlot
 //
-// Revision 1.3  1995/10/23  07:22:33  mjl
-// Added glevel() accessor.
-//
-// Revision 1.2  1995/10/16  18:22:58  mjl
-// Added support for plgdev API function in C++ bindings.
-//
-// Revision 1.1  1995/06/22  19:01:15  furnish
-// Resubmit file which was broken by apparent RCS foulup.
-//
-// Revision 1.2  1995/06/01  21:18:16  mjl
-// Fixed include file semantics.
-//
-// Revision 1.1  1995/05/30  07:34:47  mjl
-// Changed to a more natural naming scheme.
-//
-//
-// Old Log entries (as stream.h):
-//
-// Revision 1.5  1995/05/08  20:52:02  furnish
-// Mostly formatting improvements, but also some overloading resolutions
-// and some C++ style considerations.
-//
-// Revision 1.4  1995/03/17  07:51:59  mjl
-// Fixed return codes for new interface routines.
-//
-// Revision 1.3  1995/01/16  19:23:29  mjl
-// Fixed prototype for scmap1.
-//
-// Revision 1.2  1994/10/18  16:12:36  furnish
-// Beginnings of 2-d abstraction for contouring and shading.  Better
-// constructors.  Names for colors.  Other minor stuff.  Still need to do
-// major hacking on the 2-d abstraction, and also need to remove large
-// numbers of unnecessary methods.
-//
-// Revision 1.1  1994/10/06  07:24:44  furnish
-// New C++ wrapper around the PLplot API.  Needs much work.
+// Revision 1.1.1.1  1999/09/01 12:55:12  fhuebner
+// Start of wxPlot
 //
 //---------------------------------------------------------------------------//
 
-#ifndef __plstream_h__
-#define __plstream_h__
+#ifndef __wxPlot_h__
+#define __wxPlot_h__
 
 #include "plplot.h"
+#include <wx/dc.h>
 
 class PLS {
   public:
@@ -101,421 +68,441 @@
 };
 
 //===========================================================================//
-// class plstream - C++ class for encapsulating PLplot streams
-
-// Cool stuff.
+// class wxPlot - C++ class for encapsulating PLplot streams
 //===========================================================================//
 
-class plstream {
+class wxPlot {
 
-    int stream;
+  int stream;
 
-    static int next_stream;
-    static int active_streams;
+  static int next_stream;
+  static int active_streams;
 
-  private:
-    // These have to be disabled till we implement reference counting.
+private:
+  // These have to be disabled till we implement reference counting.
 
-    plstream( const plstream& );
-    plstream& operator=( const plstream& );
+  wxPlot( const wxPlot& );
+  wxPlot& operator=( const wxPlot& );
+  
+  void set_stream() { ::c_plsstrm(stream); }
 
-    void set_stream() { ::c_plsstrm(stream); }
+public:
+  wxPlot::wxPlot(wxDC *dc, int w, int h);
+//    wxPlot( PLS::stream_id sid, int strm =0 );
+//    wxPlot( int _stream ) : stream(_stream) {}
+//    wxPlot( int nx /*=1*/, int ny /*=1*/, const char *driver =NULL );
 
-  public:
-    plstream();
-    plstream( PLS::stream_id sid, int strm =0 );
-    plstream( int _stream ) : stream(_stream) {}
-    plstream( int nx /*=1*/, int ny /*=1*/, const char *driver =NULL );
+  ~wxPlot();
 
-    ~plstream();
+  // Now start miroring the wxPlot C API.
 
-// Now start miroring the PLplot C API.
+  /* C routines callable from stub routines come first */
 
-	/* C routines callable from stub routines come first */
+  // Advance to subpage "page", or to the next one if "page" = 0.
 
-// Advance to subpage "page", or to the next one if "page" = 0.
+  void adv( PLINT page );
 
-    void adv( PLINT page );
+  // This functions similarly to plbox() except that the origin of the axes is
+  // placed at the user-specified point (x0, y0).
 
-// This functions similarly to plbox() except that the origin of the axes is
-// placed at the user-specified point (x0, y0).
+  void axes( PLFLT x0, PLFLT y0, const char *xopt, PLFLT xtick, PLINT nxsub,
+	     const char *yopt, PLFLT ytick, PLINT nysub );
 
-    void axes( PLFLT x0, PLFLT y0, const char *xopt, PLFLT xtick, PLINT nxsub,
-	       const char *yopt, PLFLT ytick, PLINT nysub );
+  // Plot a histogram using x to store data values and y to store frequencies.
 
-// Plot a histogram using x to store data values and y to store frequencies.
+  void bin( PLINT nbin, PLFLT *x, PLFLT *y, PLINT center );
 
-    void bin( PLINT nbin, PLFLT *x, PLFLT *y, PLINT center );
+  // Start new page.  Should only be used with pleop().
 
-// Start new page.  Should only be used with pleop().
+  void bop();
 
-    void bop();
+  // This draws a box around the current viewport.
 
-// This draws a box around the current viewport.
+  void box( const char *xopt, PLFLT xtick, PLINT nxsub,
+	    const char *yopt, PLFLT ytick, PLINT nysub );
 
-    void box( const char *xopt, PLFLT xtick, PLINT nxsub,
-	      const char *yopt, PLFLT ytick, PLINT nysub );
+  // This is the 3-d analogue of plbox().
 
-// This is the 3-d analogue of plbox().
+  void box3( const char *xopt, const char *xlabel, PLFLT xtick, PLINT nsubx,
+	     const char *yopt, const char *ylabel, PLFLT ytick, PLINT nsuby,
+	     const char *zopt, const char *zlabel, PLFLT ztick, PLINT nsubz );
 
-    void box3( const char *xopt, const char *xlabel, PLFLT xtick, PLINT nsubx,
-	       const char *yopt, const char *ylabel, PLFLT ytick, PLINT nsuby,
-	       const char *zopt, const char *zlabel, PLFLT ztick, PLINT nsubz );
+  // Set color, map 0.  Argument is integer between 0 and 15.
 
-// Set color, map 0.  Argument is integer between 0 and 15.
+  void col0( PLINT icol0 );
 
-    void col0( PLINT icol0 );
+  // Set the color using a descriptive name.  Replaces plcol0().  (Except that
+  // col0 won't die.)
 
-// Set the color using a descriptive name.  Replaces plcol0().  (Except that
-// col0 won't die.)
+  void col( PLcolor c );
 
-    void col( PLcolor c );
+  // Set color, map 1.  Argument is a float between 0. and 1.
 
-// Set color, map 1.  Argument is a float between 0. and 1.
+  void col( PLFLT c );
 
-    void col( PLFLT c );
+  // Draws a contour plot from data in f(nx,ny).  Is just a front-end to
+  // plfcont, with a particular choice for f2eval and f2eval_data.
 
-// Draws a contour plot from data in f(nx,ny).  Is just a front-end to
-// plfcont, with a particular choice for f2eval and f2eval_data.
+  void cont( PLFLT **f, PLINT nx, PLINT ny, PLINT kx, PLINT lx,
+	     PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
+	     void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+	     PLPointer pltr_data );
 
-    void cont( PLFLT **f, PLINT nx, PLINT ny, PLINT kx, PLINT lx,
-	       PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
-	       void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-	       PLPointer pltr_data );
+  /* Draws a contour plot using the function evaluator f2eval and data stored
+   * by way of the f2eval_data pointer.  This allows arbitrary organizations
+   * of 2d array data to be used. 
+   */
 
-/* Draws a contour plot using the function evaluator f2eval and data stored
- * by way of the f2eval_data pointer.  This allows arbitrary organizations
- * of 2d array data to be used. 
- */
-
-    void fcont( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
-		PLPointer f2eval_data,
-		PLINT nx, PLINT ny, PLINT kx, PLINT lx,
-		PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
-		void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		PLPointer pltr_data );
+  void fcont( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
+	      PLPointer f2eval_data,
+	      PLINT nx, PLINT ny, PLINT kx, PLINT lx,
+	      PLINT ky, PLINT ly, PLFLT *clevel, PLINT nlevel,
+	      void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+	      PLPointer pltr_data );
+
+  // /* Copies state parameters from the reference stream to the current stream. */
 
-// /* Copies state parameters from the reference stream to the current stream. */
+  //     void cpstrm( PLINT iplsr, PLINT flags );
 
-//     void cpstrm( PLINT iplsr, PLINT flags );
+  // Converts input values from relative device coordinates to relative plot
+  // coordinates.
 
-// Converts input values from relative device coordinates to relative plot
-// coordinates.
+  void did2pc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax );
 
-    void did2pc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax );
+  // Converts input values from relative plot coordinates to relative device
+  // coordinates.
 
-// Converts input values from relative plot coordinates to relative device
-// coordinates.
+  void dip2dc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax );
 
-    void dip2dc( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax );
+  // These shouldn't be needed, are supposed to be handled by ctor/dtor
+  // semantics of the wxPlot object.
 
-// These shouldn't be needed, are supposed to be handled by ctor/dtor
-// semantics of the plstream object.
+  // /* End a plotting session for all open streams. */
 
-// /* End a plotting session for all open streams. */
+  //     void end();
 
-//     void end();
+  // /* End a plotting session for the current stream only. */
 
-// /* End a plotting session for the current stream only. */
+  //     void end1();
 
-//     void end1();
+  // Simple interface for defining viewport and window.
 
-// Simple interface for defining viewport and window.
+  void env( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
+	    PLINT just, PLINT axis );
 
-    void env( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
-	      PLINT just, PLINT axis );
+  // End current page.  Should only be used with plbop().
 
-// End current page.  Should only be used with plbop().
+  void eop();
 
-    void eop();
+  // Plot horizontal error bars (xmin(i),y(i)) to (xmax(i),y(i)).
 
-// Plot horizontal error bars (xmin(i),y(i)) to (xmax(i),y(i)).
+  void errx( PLINT n, PLFLT *xmin, PLFLT *xmax, PLFLT *y );
 
-    void errx( PLINT n, PLFLT *xmin, PLFLT *xmax, PLFLT *y );
+  // Plot vertical error bars (x,ymin(i)) to (x(i),ymax(i)).
 
-// Plot vertical error bars (x,ymin(i)) to (x(i),ymax(i)).
+  void erry( PLINT n, PLFLT *x, PLFLT *ymin, PLFLT *ymax );
 
-    void erry( PLINT n, PLFLT *x, PLFLT *ymin, PLFLT *ymax );
+  // Advance to the next family file on the next new page.
 
-// Advance to the next family file on the next new page.
+  void famadv();
 
-    void famadv();
+  // Pattern fills the polygon bounded by the input points.
 
-// Pattern fills the polygon bounded by the input points.
+  void fill( PLINT n, PLFLT *x, PLFLT *y );
 
-    void fill( PLINT n, PLFLT *x, PLFLT *y );
+  // Flushes the output stream.  Use sparingly, if at all.
 
-// Flushes the output stream.  Use sparingly, if at all.
+  void plflush();
 
-    void plflush();
+  // Sets the global font flag to 'ifont'.
 
-// Sets the global font flag to 'ifont'.
+  void font( PLINT ifont );
 
-    void font( PLINT ifont );
+  // Load specified font set.
 
-// Load specified font set.
+  void fontld( PLINT fnt );
 
-    void fontld( PLINT fnt );
+  // Get character default height and current (scaled) height.
 
-// Get character default height and current (scaled) height.
+  void gchr( PLFLT& p_def, PLFLT& p_ht );
 
-    void gchr( PLFLT& p_def, PLFLT& p_ht );
+  // Returns 8 bit RGB values for given color from color map 0.
 
-// Returns 8 bit RGB values for given color from color map 0.
+  void gcol0( PLINT icol0, PLINT& r, PLINT& g, PLINT& b );
 
-    void gcol0( PLINT icol0, PLINT& r, PLINT& g, PLINT& b );
+  // Returns the background color by 8 bit RGB value.
 
-// Returns the background color by 8 bit RGB value.
+  void gcolbg( PLINT& r, PLINT& g, PLINT& b );
 
-    void gcolbg( PLINT& r, PLINT& g, PLINT& b );
+  // Retrieve current window into device space.
 
-// Retrieve current window into device space.
+  void gdidev( PLFLT& mar, PLFLT& aspect, PLFLT& jx, PLFLT& jy );
 
-    void gdidev( PLFLT& mar, PLFLT& aspect, PLFLT& jx, PLFLT& jy );
+  // Get plot orientation.
 
-// Get plot orientation.
+  void gdiori( PLFLT& rot );
 
-    void gdiori( PLFLT& rot );
+  // Retrieve current window into plot space.
 
-// Retrieve current window into plot space.
+  void gdiplt( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax );
 
-    void gdiplt( PLFLT& xmin, PLFLT& ymin, PLFLT& xmax, PLFLT& ymax );
+  // Get family file parameters.
 
-// Get family file parameters.
+  void gfam( PLINT& fam, PLINT& num, PLINT& bmax );
 
-    void gfam( PLINT& fam, PLINT& num, PLINT& bmax );
+  // Get the (current) output file name.  Must be preallocated to >80 bytes.
 
-// Get the (current) output file name.  Must be preallocated to >80 bytes.
+  void gfnam( char *fnam );
 
-    void gfnam( char *fnam );
+  /* Get the (current) run level.  */
 
-/* Get the (current) run level.  */
+  void glevel( PLINT &p_level );
 
-    void glevel( PLINT &p_level );
+  // Get output device parameters.
 
-// Get output device parameters.
+  void gpage( PLFLT& xp, PLFLT& yp, PLINT& xleng, PLINT& yleng,
+	      PLINT& xoff, PLINT& yoff );
 
-    void gpage( PLFLT& xp, PLFLT& yp, PLINT& xleng, PLINT& yleng,
-		PLINT& xoff, PLINT& yoff );
+  // Switches to graphics screen.
 
-// Switches to graphics screen.
+  void gra();
 
-    void gra();
+  // Get subpage boundaries in absolute coordinates.
 
-// Get subpage boundaries in absolute coordinates.
+  void gspa( PLFLT& xmin, PLFLT& xmax, PLFLT& ymin, PLFLT& ymax );
 
-    void gspa( PLFLT& xmin, PLFLT& xmax, PLFLT& ymin, PLFLT& ymax );
+  // This shouldn't be needed in this model.
 
-// This shouldn't be needed in this model.
+  // /* Get current stream number. */
 
-// /* Get current stream number. */
+  //     void gstrm( PLINT *p_strm );
 
-//     void gstrm( PLINT *p_strm );
+  // Get the current library version number.
 
-// Get the current library version number.
+  void gver( char *p_ver );
 
-    void gver( char *p_ver );
+  // Get x axis labeling parameters.
 
-// Get x axis labeling parameters.
+  void gxax( PLINT& digmax, PLINT& digits );
 
-    void gxax( PLINT& digmax, PLINT& digits );
+  // Get y axis labeling parameters.
 
-// Get y axis labeling parameters.
+  void gyax( PLINT& digmax, PLINT& digits );
 
-    void gyax( PLINT& digmax, PLINT& digits );
+  /* Get z axis labeling parameters */
 
-/* Get z axis labeling parameters */
+  void gzax( PLINT *p_digmax, PLINT *p_digits );
 
-    void gzax( PLINT *p_digmax, PLINT *p_digits );
+  /* Draws a histogram of n values of a variable in array data[0..n-1] */
 
-/* Draws a histogram of n values of a variable in array data[0..n-1] */
+  void hist(PLINT n, PLFLT *data, PLFLT datmin, PLFLT datmax,
+	    PLINT nbin, PLINT oldwin);
 
-    void hist(PLINT n, PLFLT *data, PLFLT datmin, PLFLT datmax,
-	      PLINT nbin, PLINT oldwin);
+  /* Set current color (map 0) by hue, lightness, and saturation. */
 
-/* Set current color (map 0) by hue, lightness, and saturation. */
+  void hls( PLFLT h, PLFLT l, PLFLT s );
 
-    void hls( PLFLT h, PLFLT l, PLFLT s );
+  /* Initializes PLplot, using preset or default options */
 
-/* Initializes PLplot, using preset or default options */
+  void init();
 
-    void init();
+  /* Draws a line segment from (x1, y1) to (x2, y2). */
 
-/* Draws a line segment from (x1, y1) to (x2, y2). */
+  void join( PLFLT x1, PLFLT y1, PLFLT x2, PLFLT y2 );
 
-    void join( PLFLT x1, PLFLT y1, PLFLT x2, PLFLT y2 );
+  /* Simple routine for labelling graphs. */
 
-/* Simple routine for labelling graphs. */
+  void lab( const char *xlabel, const char *ylabel, const char *tlabel );
 
-    void lab( const char *xlabel, const char *ylabel, const char *tlabel );
+  /* Draws line segments connecting a series of points. */
 
-/* Draws line segments connecting a series of points. */
+  void line( PLINT n, PLFLT *x, PLFLT *y );
 
-    void line( PLINT n, PLFLT *x, PLFLT *y );
+  /* Draws a line in 3 space.  */
 
-/* Draws a line in 3 space.  */
+  void line3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z );
 
-    void line3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z );
+  /* Set line style. */
 
-/* Set line style. */
+  void lsty( PLINT lin );
 
-    void lsty( PLINT lin );
+  /* plot continental outline in world coordinates */
 
-/* plot continental outline in world coordinates */
+  void map( void (*mapform)(PLINT, PLFLT *, PLFLT *), char *type,
+	    PLFLT minlong, PLFLT maxlong, PLFLT minlat, PLFLT maxlat );
 
-    void map( void (*mapform)(PLINT, PLFLT *, PLFLT *), char *type,
-	      PLFLT minlong, PLFLT maxlong, PLFLT minlat, PLFLT maxlat );
+  /* Plot the latitudes and longitudes on the background. */
 
-/* Plot the latitudes and longitudes on the background. */
+  void  meridians( void (*mapform)(PLINT, PLFLT *, PLFLT *), 
+		   PLFLT dlong, PLFLT dlat, PLFLT minlong, PLFLT maxlong, 
+		   PLFLT minlat, PLFLT maxlat );
 
-    void  meridians( void (*mapform)(PLINT, PLFLT *, PLFLT *), 
-		     PLFLT dlong, PLFLT dlat, PLFLT minlong, PLFLT maxlong, 
-		     PLFLT minlat, PLFLT maxlat );
+  /* Plots a mesh representation of the function z[x][y]. */
 
-/* Plots a mesh representation of the function z[x][y]. */
+  void mesh( PLFLT *x, PLFLT *y, PLFLT **z, PLINT nx, PLINT ny, PLINT opt );
 
-    void mesh( PLFLT *x, PLFLT *y, PLFLT **z, PLINT nx, PLINT ny, PLINT opt );
+  // /* Creates a new stream and makes it the default.  */
 
-// /* Creates a new stream and makes it the default.  */
+  // void
+  // mkstrm(PLINT *p_strm);
 
-// void
-// mkstrm(PLINT *p_strm);
+  /* Prints out "text" at specified position relative to viewport */
 
-/* Prints out "text" at specified position relative to viewport */
+  void mtex( const char *side, PLFLT disp, PLFLT pos, PLFLT just,
+	     const char *text );
 
-    void mtex( const char *side, PLFLT disp, PLFLT pos, PLFLT just,
-	       const char *text );
+  /* Plots a 3-d representation of the function z[x][y]. */
 
-/* Plots a 3-d representation of the function z[x][y]. */
+  void plot3d( PLFLT *x, PLFLT *y, PLFLT **z,
+	       PLINT nx, PLINT ny, PLINT opt, PLINT side );
 
-    void plot3d( PLFLT *x, PLFLT *y, PLFLT **z,
-		 PLINT nx, PLINT ny, PLINT opt, PLINT side );
+  /* Set fill pattern directly. */
 
-/* Set fill pattern directly. */
+  void pat( PLINT nlin, PLINT *inc, PLINT *del );
 
-    void pat( PLINT nlin, PLINT *inc, PLINT *del );
+  /* Plots array y against x for n points using ASCII code "code".*/
 
-/* Plots array y against x for n points using ASCII code "code".*/
+  void poin( PLINT n, PLFLT *x, PLFLT *y, PLINT code );
 
-    void poin( PLINT n, PLFLT *x, PLFLT *y, PLINT code );
+  /* Draws a series of points in 3 space. */
 
-/* Draws a series of points in 3 space. */
+  void poin3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT code );
 
-    void poin3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT code );
+  /* Draws a polygon in 3 space.  */
 
-/* Draws a polygon in 3 space.  */
+  void poly3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT *draw );
 
-    void poly3( PLINT n, PLFLT *x, PLFLT *y, PLFLT *z, PLINT *draw );
+  /* Set the floating point precision (in number of places) in numeric labels. */
 
-/* Set the floating point precision (in number of places) in numeric labels. */
+  void prec( PLINT setp, PLINT prec );
 
-    void prec( PLINT setp, PLINT prec );
+  /* Set fill pattern, using one of the predefined patterns.*/
 
-/* Set fill pattern, using one of the predefined patterns.*/
+  void psty( PLINT patt );
 
-    void psty( PLINT patt );
+  /* Prints out "text" at world cooordinate (x,y). */
 
-/* Prints out "text" at world cooordinate (x,y). */
+  void ptex( PLFLT x, PLFLT y, PLFLT dx, PLFLT dy, PLFLT just,
+	     const char *text );
 
-    void ptex( PLFLT x, PLFLT y, PLFLT dx, PLFLT dy, PLFLT just,
-	       const char *text );
+  /* Replays contents of plot buffer to current device/file. */
 
-/* Replays contents of plot buffer to current device/file. */
+  void replot();
 
-    void replot();
+  /* Set line color by red, green, blue from  0. to 1. */
 
-/* Set line color by red, green, blue from  0. to 1. */
+  void rgb( PLFLT r, PLFLT g, PLFLT b );
 
-    void rgb( PLFLT r, PLFLT g, PLFLT b );
+  /* Set line color by 8 bit RGB values. */
 
-/* Set line color by 8 bit RGB values. */
+  void rgb( PLINT r, PLINT g, PLINT b );
 
-    void rgb( PLINT r, PLINT g, PLINT b );
+  /* Set character height. */
 
-/* Set character height. */
+  void schr( PLFLT def, PLFLT scale );
 
-    void schr( PLFLT def, PLFLT scale );
+  /* Set number of colors in cmap 0 */
 
-/* Set number of colors in cmap 0 */
+  void scmap0n( PLINT ncol0 );
 
-    void scmap0n( PLINT ncol0 );
+  /* Set number of colors in cmap 1 */
 
-/* Set number of colors in cmap 1 */
+  void scmap1n( PLINT ncol1 );
 
-    void scmap1n( PLINT ncol1 );
+  /* Set color map 0 colors by 8 bit RGB values */
 
-/* Set color map 0 colors by 8 bit RGB values */
+  void scmap0( PLINT *r, PLINT *g, PLINT *b, PLINT ncol0 );
 
-    void scmap0( PLINT *r, PLINT *g, PLINT *b, PLINT ncol0 );
+  /* Set color map 1 colors by 8 bit RGB values */
 
-/* Set color map 1 colors by 8 bit RGB values */
+  void scmap1( PLINT *r, PLINT *g, PLINT *b, PLINT ncol1 );
 
-    void scmap1( PLINT *r, PLINT *g, PLINT *b, PLINT ncol1 );
+  /* Set color map 1 colors using a piece-wise linear relationship between */
+  /* intensity [0,1] (cmap 1 index) and position in HLS or RGB color space. */
 
-/* Set color map 1 colors using a piece-wise linear relationship between */
-/* intensity [0,1] (cmap 1 index) and position in HLS or RGB color space. */
+  void scmap1l( PLINT itype, PLINT npts, PLFLT *intensity,
+		PLFLT *coord1, PLFLT *coord2, PLFLT *coord3, PLINT *rev );
 
-    void scmap1l( PLINT itype, PLINT npts, PLFLT *intensity,
-		  PLFLT *coord1, PLFLT *coord2, PLFLT *coord3, PLINT *rev );
+  /* Set a given color from color map 0 by 8 bit RGB value */
 
-/* Set a given color from color map 0 by 8 bit RGB value */
+  void scol0( PLINT icol0, PLINT r, PLINT g, PLINT b );
 
-    void scol0( PLINT icol0, PLINT r, PLINT g, PLINT b );
+  /* Set the background color by 8 bit RGB value */
 
-/* Set the background color by 8 bit RGB value */
+  void scolbg( PLINT r, PLINT g, PLINT b );
 
-    void scolbg( PLINT r, PLINT g, PLINT b );
+  /* Used to globally turn color output on/off */
 
-/* Used to globally turn color output on/off */
+  void scolor( PLINT color );
 
-    void scolor( PLINT color );
+  /* Set the device (keyword) name */
 
-/* Set the device (keyword) name */
+  void sdev( const char *devname );
 
-    void sdev( const char *devname );
+  /* Get the device (keyword) name */
 
-/* Get the device (keyword) name */
+  void gdev( char *devname );
 
-    void gdev( char *devname );
+  /* Set window into device space using margin, aspect ratio, and */
+  /* justification */
 
-/* Set window into device space using margin, aspect ratio, and */
-/* justification */
+  void sdidev( PLFLT mar, PLFLT aspect, PLFLT jx, PLFLT jy );
 
-    void sdidev( PLFLT mar, PLFLT aspect, PLFLT jx, PLFLT jy );
+  /* Set up transformation from metafile coordinates. */
 
-/* Set up transformation from metafile coordinates. */
+  void sdimap( PLINT dimxmin, PLINT dimxmax,
+	       PLINT dimymin, PLINT dimymax,
+	       PLFLT dimxpmm, PLFLT dimypmm);
 
-    void sdimap( PLINT dimxmin, PLINT dimxmax,
-		 PLINT dimymin, PLINT dimymax,
-		 PLFLT dimxpmm, PLFLT dimypmm);
+  /* Set plot orientation, specifying rotation in units of pi/2. */
 
-/* Set plot orientation, specifying rotation in units of pi/2. */
+  void sdiori( PLFLT rot );
 
-    void sdiori( PLFLT rot );
+  /* Set window into plot space */
 
-/* Set window into plot space */
+  void sdiplt( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax );
 
-    void sdiplt( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax );
+  /* Set window into plot space incrementally (zoom) */
 
-/* Set window into plot space incrementally (zoom) */
+  void sdiplz( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax );
 
-    void sdiplz( PLFLT xmin, PLFLT ymin, PLFLT xmax, PLFLT ymax );
+  /* Set the escape character for text strings. */
 
-/* Set the escape character for text strings. */
+  void sesc( char esc );
 
-    void sesc( char esc );
+  /* Set family file parameters */
 
-/* Set family file parameters */
+  void sfam( PLINT fam, PLINT num, PLINT bmax );
 
-    void sfam( PLINT fam, PLINT num, PLINT bmax );
+  /* Set the output file name. */
 
-/* Set the output file name. */
+  void sfnam( const char *fnam );
 
-    void sfnam( const char *fnam );
+  /* Shade region. */
 
-/* Shade region. */
+  void shade( PLFLT **a, PLINT nx, PLINT ny, const char **defined,
+	      PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
+	      PLFLT shade_min, PLFLT shade_max,
+	      PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+	      PLINT min_color, PLINT min_width,
+	      PLINT max_color, PLINT max_width,
+	      void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
+	      void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+	      PLPointer pltr_data );
 
-    void shade( PLFLT **a, PLINT nx, PLINT ny, const char **defined,
+  // Would be nice to fix this even more, say by stuffing xmin, xmax,
+  // ymin, ymax, rectangular, and pcxf all into the contourable data
+  // class.  Have to think more on that.  Or maybe the coordinate info.
+
+  void shade( Contourable_Data& d, PLFLT xmin, PLFLT xmax,
+	      PLFLT ymin, PLFLT ymax, PLFLT shade_min, PLFLT shade_max,
+	      PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+	      PLINT min_color, PLINT min_width,
+	      PLINT max_color, PLINT max_width,
+	      PLINT rectangular,
+	      Coord_Xformer *pcxf );
+
+  void  shade1( PLFLT *a, PLINT nx, PLINT ny, const char *defined,
 		PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
 		PLFLT shade_min, PLFLT shade_max,
 		PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
@@ -523,311 +510,289 @@
 		PLINT max_color, PLINT max_width,
 		void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
 		void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		PLPointer pltr_data );
-
-// Would be nice to fix this even more, say by stuffing xmin, xmax,
-// ymin, ymax, rectangular, and pcxf all into the contourable data
-// class.  Have to think more on that.  Or maybe the coordinate info.
+		PLPointer pltr_data);
 
-    void shade( Contourable_Data& d, PLFLT xmin, PLFLT xmax,
-		PLFLT ymin, PLFLT ymax, PLFLT shade_min, PLFLT shade_max,
-		PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		PLINT min_color, PLINT min_width,
-		PLINT max_color, PLINT max_width,
-		PLINT rectangular,
-		Coord_Xformer *pcxf );
-
-    void  shade1( PLFLT *a, PLINT nx, PLINT ny, const char *defined,
-		  PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
-		  PLFLT shade_min, PLFLT shade_max,
-		  PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		  PLINT min_color, PLINT min_width,
-		  PLINT max_color, PLINT max_width,
-		  void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
-		  void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		  PLPointer pltr_data);
-
-    void fshade( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
-		 PLPointer f2eval_data,
-		 PLFLT (*c2eval) (PLINT, PLINT, PLPointer),
-		 PLPointer c2eval_data,
-		 PLINT nx, PLINT ny, 
-		 PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
-		 PLFLT shade_min, PLFLT shade_max,
-		 PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
-		 PLINT min_color, PLINT min_width,
-		 PLINT max_color, PLINT max_width,
-		 void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
-		 void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
-		 PLPointer pltr_data );
+  void fshade( PLFLT (*f2eval) (PLINT, PLINT, PLPointer),
+	       PLPointer f2eval_data,
+	       PLFLT (*c2eval) (PLINT, PLINT, PLPointer),
+	       PLPointer c2eval_data,
+	       PLINT nx, PLINT ny, 
+	       PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
+	       PLFLT shade_min, PLFLT shade_max,
+	       PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
+	       PLINT min_color, PLINT min_width,
+	       PLINT max_color, PLINT max_width,
+	       void (*fill) (PLINT, PLFLT *, PLFLT *), PLINT rectangular,
+	       void (*pltr) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer),
+	       PLPointer pltr_data );
 
-/* Set up lengths of major tick marks. */
+  /* Set up lengths of major tick marks. */
 
-    void smaj( PLFLT def, PLFLT scale );
+  void smaj( PLFLT def, PLFLT scale );
 
-/* Set up lengths of minor tick marks. */
+  /* Set up lengths of minor tick marks. */
 
-    void smin( PLFLT def, PLFLT scale );
+  void smin( PLFLT def, PLFLT scale );
 
-/* Set orientation.  Must be done before calling plinit. */
+  /* Set orientation.  Must be done before calling plinit. */
 
-    void sori( PLINT ori );
+  void sori( PLINT ori );
 
-/* Set output device parameters.  Usually ignored by the driver. */
+  /* Set output device parameters.  Usually ignored by the driver. */
 
-void spage( PLFLT xp, PLFLT yp, PLINT xleng, PLINT yleng,
-	    PLINT xoff, PLINT yoff );
+  void spage( PLFLT xp, PLFLT yp, PLINT xleng, PLINT yleng,
+	      PLINT xoff, PLINT yoff );
 
-/* Set the pause (on end-of-page) status */
+  /* Set the pause (on end-of-page) status */
 
-    void spause( PLINT pause );
+  void spause( PLINT pause );
 
-/* Set stream number.  */
+  /* Set stream number.  */
 
-    void sstrm( PLINT strm );
+  void sstrm( PLINT strm );
 
-/* Set the number of subwindows in x and y */
+  /* Set the number of subwindows in x and y */
 
-    void ssub( PLINT nx, PLINT ny );
+  void ssub( PLINT nx, PLINT ny );
 
-/* Set symbol height. */
+  /* Set symbol height. */
 
-    void ssym( PLFLT def, PLFLT scale );
+  void ssym( PLFLT def, PLFLT scale );
 
-/* Initialize PLplot, passing in the windows/page settings. */
+  /* Initialize PLplot, passing in the windows/page settings. */
 
-    void star( PLINT nx, PLINT ny );
+  void star( PLINT nx, PLINT ny );
 
-/* Initialize PLplot, passing the device name and windows/page settings. */
+  /* Initialize PLplot, passing the device name and windows/page settings. */
 
-    void start( const char *devname, PLINT nx, PLINT ny );
+  void start( const char *devname, PLINT nx, PLINT ny );
 
-/* Set up a new line style */
+  /* Set up a new line style */
 
-    void styl( PLINT nms, PLINT *mark, PLINT *space );
+  void styl( PLINT nms, PLINT *mark, PLINT *space );
 
-/* Sets the edges of the viewport to the specified absolute coordinates */
+  /* Sets the edges of the viewport to the specified absolute coordinates */
 
-    void svpa( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax );
+  void svpa( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax );
 
-/* Set x axis labeling parameters */
+  /* Set x axis labeling parameters */
 
-    void sxax( PLINT digmax, PLINT digits );
+  void sxax( PLINT digmax, PLINT digits );
 
-/* Set inferior X window */
+  /* Set inferior X window */
 
-    void sxwin( PLINT window_id );
+  void sxwin( PLINT window_id );
 
-/* Set y axis labeling parameters */
+  /* Set y axis labeling parameters */
 
-    void syax( PLINT digmax, PLINT digits );
+  void syax( PLINT digmax, PLINT digits );
 
-/* Plots array y against x for n points using Hershey symbol "code" */
+  /* Plots array y against x for n points using Hershey symbol "code" */
 
-    void sym( PLINT n, PLFLT *x, PLFLT *y, PLINT code );
+  void sym( PLINT n, PLFLT *x, PLFLT *y, PLINT code );
 
-/* Set z axis labeling parameters */
+  /* Set z axis labeling parameters */
 
-    void szax( PLINT digmax, PLINT digits );
+  void szax( PLINT digmax, PLINT digits );
 
-/* Switches to text screen. */
+  /* Switches to text screen. */
 
-    void text();
+  void text();
 
-/* Sets the edges of the viewport with the given aspect ratio, leaving */
-/* room for labels. */
+  /* Sets the edges of the viewport with the given aspect ratio, leaving */
+  /* room for labels. */
 
-    void vasp( PLFLT aspect );
+  void vasp( PLFLT aspect );
 
-/* Creates the largest viewport of the specified aspect ratio that fits */
-/* within the specified normalized subpage coordinates. */
+  /* Creates the largest viewport of the specified aspect ratio that fits */
+  /* within the specified normalized subpage coordinates. */
 
-    void vpas( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax, PLFLT aspect );
+  void vpas( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax, PLFLT aspect );
 
-/* Creates a viewport with the specified normalized subpage coordinates. */
+  /* Creates a viewport with the specified normalized subpage coordinates. */
 
-    void vpor( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax );
+  void vpor( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax );
 
-/* Defines a "standard" viewport with seven character heights for */
-/* the left margin and four character heights everywhere else. */
+  /* Defines a "standard" viewport with seven character heights for */
+  /* the left margin and four character heights everywhere else. */
 
-    void vsta();
+  void vsta();
 
-/* Set up a window for three-dimensional plotting. */
+  /* Set up a window for three-dimensional plotting. */
 
-    void w3d( PLFLT basex, PLFLT basey, PLFLT height, PLFLT xmin0,
-	      PLFLT xmax0, PLFLT ymin0, PLFLT ymax0, PLFLT zmin0,
-	      PLFLT zmax0, PLFLT alt, PLFLT az);
+  void w3d( PLFLT basex, PLFLT basey, PLFLT height, PLFLT xmin0,
+	    PLFLT xmax0, PLFLT ymin0, PLFLT ymax0, PLFLT zmin0,
+	    PLFLT zmax0, PLFLT alt, PLFLT az);
 
-/* Set pen width. */
+  /* Set pen width. */
 
-    void wid( PLINT width );
+  void wid( PLINT width );
 
-/* Set up world coordinates of the viewport boundaries (2d plots). */
+  /* Set up world coordinates of the viewport boundaries (2d plots). */
 
-    void wind( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax );
+  void wind( PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax );
 
-	/* The rest for use from C only */
+  /* The rest for use from C only */
 
-/* Returns a list of file-oriented device names and their menu strings */
+  /* Returns a list of file-oriented device names and their menu strings */
 
-    void gFileDevs( char ***p_menustr, char ***p_devname, int *p_ndev );
+  void gFileDevs( char ***p_menustr, char ***p_devname, int *p_ndev );
 
-/* Set the function pointer for the keyboard event handler */
+  /* Set the function pointer for the keyboard event handler */
 
-    void sKeyEH( void (*KeyEH) (PLGraphicsIn *, void *, int *),
-		 void *KeyEH_data );
+  void sKeyEH( void (*KeyEH) (PLGraphicsIn *, void *, int *),
+	       void *KeyEH_data );
 
-/* Sets an optional user exit handler. */
+  /* Sets an optional user exit handler. */
 
-    void sexit( int (*handler) (char *) );
+  void sexit( int (*handler) (char *) );
 
-	/* Transformation routines */
+  /* Transformation routines */
 
-/* Identity transformation. */
+  /* Identity transformation. */
 
-    void tr0( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
+  void tr0( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
 
-/* Does linear interpolation from singly dimensioned coord arrays. */
+  /* Does linear interpolation from singly dimensioned coord arrays. */
 
-    void tr1( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
+  void tr1( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
 
-/* Does linear interpolation from doubly dimensioned coord arrays */
-/* (column dominant, as per normal C 2d arrays). */
+  /* Does linear interpolation from doubly dimensioned coord arrays */
+  /* (column dominant, as per normal C 2d arrays). */
 
-    void tr2( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
+  void tr2( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
 
-/* Just like pltr2() but uses pointer arithmetic to get coordinates from */
-/* 2d grid tables.  */
+  /* Just like pltr2() but uses pointer arithmetic to get coordinates from */
+  /* 2d grid tables.  */
 
-    void tr2p( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
+  void tr2p( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, PLPointer pltr_data );
 
-// We obviously won't be using this object from Fortran...
+  // We obviously won't be using this object from Fortran...
 
-// /* Identity transformation for plots from Fortran. */
+  // /* Identity transformation for plots from Fortran. */
 
-//     void tr0f( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data );
+  //     void tr0f( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data );
 
-// /* Does linear interpolation from doubly dimensioned coord arrays */
-// /* (row dominant, i.e. Fortran ordering). */
+  // /* Does linear interpolation from doubly dimensioned coord arrays */
+  // /* (row dominant, i.e. Fortran ordering). */
 
-//     void tr2f( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data );
+  //     void tr2f( PLFLT x, PLFLT y, PLFLT *tx, PLFLT *ty, void *pltr_data );
 
-/* Example linear transformation function for contour plotter. */
+  /* Example linear transformation function for contour plotter. */
 
-    void  xform( PLFLT x, PLFLT y, PLFLT * tx, PLFLT * ty );
+  void  xform( PLFLT x, PLFLT y, PLFLT * tx, PLFLT * ty );
 
-	/* Function evaluators */
+  /* Function evaluators */
 
-/* Does a lookup from a 2d function array.  Array is of type (PLFLT **), */
-/* and is column dominant (normal C ordering). */
+  /* Does a lookup from a 2d function array.  Array is of type (PLFLT **), */
+  /* and is column dominant (normal C ordering). */
 
-    PLFLT f2eval2( PLINT ix, PLINT iy, PLPointer plf2eval_data );
+  PLFLT f2eval2( PLINT ix, PLINT iy, PLPointer plf2eval_data );
 
-/* Does a lookup from a 2d function array.  Array is of type (PLFLT *), */
-/* and is column dominant (normal C ordering). */
+  /* Does a lookup from a 2d function array.  Array is of type (PLFLT *), */
+  /* and is column dominant (normal C ordering). */
 
-    PLFLT f2eval( PLINT ix, PLINT iy, PLPointer plf2eval_data );
+  PLFLT f2eval( PLINT ix, PLINT iy, PLPointer plf2eval_data );
 
-/* Does a lookup from a 2d function array.  Array is of type (PLFLT *), */
-/* and is row dominant (Fortran ordering). */
+  /* Does a lookup from a 2d function array.  Array is of type (PLFLT *), */
+  /* and is row dominant (Fortran ordering). */
 
-    PLFLT f2evalr( PLINT ix, PLINT iy, PLPointer plf2eval_data );
+  PLFLT f2evalr( PLINT ix, PLINT iy, PLPointer plf2eval_data );
 
-	/* Command line parsing utilities */
+  /* Command line parsing utilities */
 
-/* Clear internal option table info structure. */
+  /* Clear internal option table info structure. */
 
-    void ClearOpts();
+  void ClearOpts();
 
-/* Reset internal option table info structure. */
+  /* Reset internal option table info structure. */
 
-    void ResetOpts();
+  void ResetOpts();
 
-/* Merge user option table into internal info structure. */
+  /* Merge user option table into internal info structure. */
 
-    int MergeOpts( PLOptionTable *options, char *name, char **notes );
+  int MergeOpts( PLOptionTable *options, char *name, char **notes );
 
-/* Set the strings used in usage and syntax messages. */
+  /* Set the strings used in usage and syntax messages. */
 
-    void SetUsage( char *program_string, char *usage_string );
+  void SetUsage( char *program_string, char *usage_string );
 
-/* Process input strings, treating them as an option and argument pair. */
+  /* Process input strings, treating them as an option and argument pair. */
 
-    int SetOpt( char *opt, char *optarg );
+  int SetOpt( char *opt, char *optarg );
 
-/* Process options list using current options info. */
+  /* Process options list using current options info. */
 
-    int ParseOpts( int *p_argc, char **argv, PLINT mode );
+  int ParseOpts( int *p_argc, char **argv, PLINT mode );
 
-/* Print usage & syntax message. */
+  /* Print usage & syntax message. */
 
-    void OptUsage();
+  void OptUsage();
 
-	/* Miscellaneous */
+  /* Miscellaneous */
 
-/* Set the output file pointer */
+  /* Set the output file pointer */
 
-    void gfile( FILE **p_file );
+  void gfile( FILE **p_file );
 
-/* Get the output file pointer */
+  /* Get the output file pointer */
 
-    void sfile( FILE *file );
+  void sfile( FILE *file );
 
-/* Get the escape character for text strings. */
+  /* Get the escape character for text strings. */
 
-    void gesc( char *p_esc );
+  void gesc( char *p_esc );
 
-/* Front-end to driver escape function. */
+  /* Front-end to driver escape function. */
 
-    void pl_cmd( PLINT op, void *ptr );
+  void pl_cmd( PLINT op, void *ptr );
 
-/* Return full pathname for given file if executable */
+  /* Return full pathname for given file if executable */
 
-    int  FindName( char *p );
+  int  FindName( char *p );
 
-/* Looks for the specified executable file according to usual search path. */
+  /* Looks for the specified executable file according to usual search path. */
 
-    char *FindCommand( char *fn );
+  char *FindCommand( char *fn );
 
-/* Gets search name for file by concatenating the dir, subdir, and file */
-/* name, allocating memory as needed.  */
+  /* Gets search name for file by concatenating the dir, subdir, and file */
+  /* name, allocating memory as needed.  */
 
-    void GetName( char *dir, char *subdir, char *filename, char **filespec );
+  void GetName( char *dir, char *subdir, char *filename, char **filespec );
 
-/* Prompts human to input an integer in response to given message. */
+  /* Prompts human to input an integer in response to given message. */
 
-    PLINT GetInt( char *s );
+  PLINT GetInt( char *s );
 
-/* Prompts human to input a float in response to given message. */
+  /* Prompts human to input a float in response to given message. */
 
-    PLFLT GetFlt( char *s );
+  PLFLT GetFlt( char *s );
 
-	/* Nice way to allocate space for a vectored 2d grid */
+  /* Nice way to allocate space for a vectored 2d grid */
 
-/* Allocates a block of memory for use as a 2-d grid of PLFLT's.  */
+  /* Allocates a block of memory for use as a 2-d grid of PLFLT's.  */
 
-    void Alloc2dGrid( PLFLT ***f, PLINT nx, PLINT ny );
+  void Alloc2dGrid( PLFLT ***f, PLINT nx, PLINT ny );
 
-/* Frees a block of memory allocated with plAlloc2dGrid(). */
+  /* Frees a block of memory allocated with plAlloc2dGrid(). */
 
-    void Free2dGrid( PLFLT **f, PLINT nx, PLINT ny );
+  void Free2dGrid( PLFLT **f, PLINT nx, PLINT ny );
 
-/* Functions for converting between HLS and RGB color space */
+  /* Functions for converting between HLS and RGB color space */
 
-    void HLS_RGB( PLFLT h, PLFLT l, PLFLT s,
-		  PLFLT *p_r, PLFLT *p_g, PLFLT *p_b );
+  void HLS_RGB( PLFLT h, PLFLT l, PLFLT s,
+		PLFLT *p_r, PLFLT *p_g, PLFLT *p_b );
 
-    void RGB_HLS( PLFLT r, PLFLT g, PLFLT b,
-		  PLFLT *p_h, PLFLT *p_l, PLFLT *p_s );
+  void RGB_HLS( PLFLT r, PLFLT g, PLFLT b,
+		PLFLT *p_h, PLFLT *p_l, PLFLT *p_s );
 
-/* Wait for graphics input event and translate to world coordinates */
+  /* Wait for graphics input event and translate to world coordinates */
 
-    int GetCursor( PLGraphicsIn *plg );
+  int GetCursor( PLGraphicsIn *plg );
 };
 
-#endif                          // __plstream_h__
+#endif                          // __wxPlot_h__
 
 //---------------------------------------------------------------------------//
-//                              end of plstream.h
+//                              end of wxPlot.h
 //---------------------------------------------------------------------------//
