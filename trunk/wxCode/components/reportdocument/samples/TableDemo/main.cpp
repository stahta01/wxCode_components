/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
	// prepares an arrays from which the table will be filled
	for(int c=0; c<5; ++c)
	{
		sar1.Add(wxString::Format(wxT("C1.%d"), c));
		sar2.Add(wxString::Format(wxT("C2.%d"), c));
		sar3.Add(wxString::Format(wxT("C3.%d"), c));
		sar4.Add(wxString::Format(wxT("C4.%d"), c));
	}
	
	// create a new table with name 'Table'
	wxReportTableItem table(wxT("Table"));
	
	// create a new style for the cells inside the table
	wxReportTextStyle style;
	style.SetBorder(wxRP_ALLBORDER, *wxBLACK, 0.3);
	style.SetFont(wxFont (12,wxFONTFAMILY_ROMAN,wxFONTSTYLE_NORMAL,wxFONTWEIGHT_BOLD,false,wxT("Times New Roman")));
	// apply created style for the cells inside the table
	table.SetCellsStyle(style);
	// sets the position of the table at page
	table.SetPosition(wxRP_CENTER, 0);
	
	// inserts array int the table as new columns
	table.AddColumn(sar1, wxT("Header1"), wxRP_AT_LAST, true);
	table.AddColumn(sar2, wxT("Header2"), wxRP_AT_LAST, true);
	table.AddColumn(sar3, wxT("Header3"), wxRP_AT_LAST, true);
	table.AddColumn(sar4, wxT("Header4"), wxRP_AT_LAST, true);
		
	// sets style for columns headers - styles is inserted to the items as a copy so we can use the previously
	// created style and just change parameters of them as we need
	style.SetBackgroundColor(wxColour(200, 200, 200));
	style.SetFont(wxFont (14,wxFONTFAMILY_ROMAN,wxFONTSTYLE_ITALIC,wxFONTWEIGHT_BOLD,false,wxT("Times New Roman")));
	table.SetColumnsHeadersStyle(style);
	
	this->ChangeCount();
	
	// create a new line-shape item
	wxReportLineShape line(10, 15, 200, 15);
	
	// create a new text item
	wxReportTextItem text;
	text.SetPosition(10, 7);
	text.AddText(wxT("wxReportDocument Table Demo"));
	// inserts created line and text item to the header of the page
	// items in the header or footer parts will be automatically inserted to all existed pages
	// and to pages which will be created later
	prt.AddItemToHeader(text);
	prt.AddItemToHeader(line);
	
	// change the parameters of the previously created line-shape
	// also the items are inserted to the page as a copy - we can still work with the same object
	line.SetPoints(10, 282, 200, 282);
	prt.AddItemToFooter(line);
	
	// inserts the page numbering
	wxReportTextStyle nstyle;
	nstyle.SetFont(wxFont (12,wxFONTFAMILY_ROMAN,wxFONTSTYLE_NORMAL,wxFONTWEIGHT_BOLD,false,wxT("Times New Roman")));
	// instead of '%d' will be inserted the number of the page
	prt.InsertPageNumbering(wxT("-%d-"), nstyle, wxRP_CENTER, 285);
	
	// defines the style of the page
	wxReportPageStyle pgStyle;
	// defines the page's margins
	// the origin of the items positions in the body part of the page started from the margins
	// the origin of the items positions in the header and footer parts of the page started from the edge of the page
	pgStyle.SetMargins(20, 20, 20, 20);
	//table.SetIfVariable(true);
	prt.SetPageStyle(pgStyle);
	prt.AddItem(table);
}

MainFrame::~MainFrame()
{	
}

void MainFrame::ChangeCount()
{
	int cnt1 = this->m_spinCtrl1->GetValue();
	int cnt2 = this->m_spinCtrl11->GetValue();
	int cnt3 = this->m_spinCtrl12->GetValue();
	int cnt4 = this->m_spinCtrl13->GetValue();
	wxString cell1 = this->m_textCtrl2->GetValue();
	wxString cell2 = this->m_textCtrl21->GetValue();
	wxString cell3 = this->m_textCtrl22->GetValue();
	wxString cell4 = this->m_textCtrl23->GetValue();
	
	sar1.Clear();
	sar2.Clear();
	sar3.Clear();
	sar4.Clear();
	
	for(int c=0; c<cnt1; ++c)
		sar1.Add(wxString::Format(cell1+wxT(".%d"), c+1));
	
	for(int c=0; c<cnt2; ++c)
		sar2.Add(wxString::Format(cell2+wxT(".%d"), c+1));
		
	for(int c=0; c<cnt3; ++c)
		sar3.Add(wxString::Format(cell3+wxT(".%d"), c+1));
		
	for(int c=0; c<cnt4; ++c)
		sar4.Add(wxString::Format(cell4+wxT(".%d"), c+1));
}

void MainFrame::DoChangeCount(wxCommandEvent& event)
{
	this->ChangeCount();
}

void MainFrame::Print(wxCommandEvent& event)
{
	prt.RefreshVariables();
	prt.Print(this);
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	Destroy();
}
